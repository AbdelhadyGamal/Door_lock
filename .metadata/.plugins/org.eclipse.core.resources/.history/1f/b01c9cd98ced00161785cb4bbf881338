/*
 * appl_services_states.c
 *
 *  Created on: Jan 28, 2017
 *      Author: Abdelhady
 */
/* ---------------------------------------------------------------------------------------------------
 [FILE NAME]: <appl_services_states.c>
 [AUTHOR(S)]: <Abdelhady>
 [DATE CREATED]: <Jan 28, 2017>
 [DESCRIPTION]: <Contain the main application services and states of the door lock system>
 ---------------------------------------------------------------------------------------------------*/

/*---------------------------------------------INCLUDES -----------------------------------------------*/

#include "MC2_services_states.h"

/*-------------------------------------FUNCTION Definitions ----------------------------------------*/
/* ---------------------------------------------------------------------------------------------------------------
 [Function Name] :setpassword
 [Description] :This function is responsible of setting the password for the first time and
 storing it in the memory by asking the user to Enter New password Of 8 bit and confirm it

 [Returns] :void
 ---------------------------------------------------------------------------------------------------------------*/
void PWM_Timer0_Init(unsigned char set_duty_cycle) {

	TCNT0 = 0; //initial timer value

	OCR0 = set_duty_cycle;

	DDRB = DDRB | (1 << PB3); //set OC0 as output pin --> pin where the PWM signal is generated from MC.

	/* Configure timer control register
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1 << WGM00) | (1 << WGM01) | (1 << COM01) | (1 << CS01);
	SET_BIT(DDRB, PB1);
	SET_BIT(DDRB, PB2);
}

/*-------------------------------------------------------------------------------------------------------
 [Function Name] :storePassword
 [Description] :This function is responsible of storing the password in the EEPROM at the
 location "PASSWORD_LOCATION" and setting the flag to "PASSWORD_FLAG_LOCATION" to show that
 the password is already set
 [Args] : uint8 *Pointer to array of Elements that contains the password to be stored
 [in] uint8 *ArrPtr:
 As an output Arg, this Argshall indicate a_functionArgDescription4
 [Returns] :void

 ---------------------------------------------------------------------------------------------------------------*/

uint8 TwoArrayMatch(uint8 *pass1, uint8 *pass2) {
	uint8 result = 1;
	for (uint8 Loop_counter = 0; Loop_counter < 8; Loop_counter++) {
		if (*(pass1 + Loop_counter) != *(pass2 + Loop_counter)) {

			result = 0;
		}

	}
	return result;
}


void storePassword() {
	/**
	 * this for loop is to loop the 8 char of the password to be stored in the
	 */

	uint8 ArrPtr[20];
	UART_sendByte(1);
	UART_receiveString(ArrPtr);
	uint8 Loop_counter = 0;


	for (uint8 Loop_counter = 0; Loop_counter < 8; Loop_counter++) {

		EEPROM_Write_Byte(PASSWORD_LOCATION + Loop_counter,*(ArrPtr + Loop_counter));
		LCD_clearScreen();
		LCD_displayString("storing pass");
	}

	EEPROM_Write_Byte(PASSWORD_FLAG_LOCATION, PASSWORD_IS_SET);
}

/* ---------------------------------------------------------------------------------------------------------------
 [Function Name] :AlarmTurnOn
 [Description] :This function is responsible turning on the alarm when it is called
 [Args] :Null
 [in] a_functionArgType1 a_functionArgName1:
 This Argshall indicate a_functionArgDescription1
 [out] a_functionArgType2 a_functionArgName2:
 This Argshall indicate a_functionArgDescription2
 [in/out] a_functionArgType3 a_functionArgName3:
 As an input Arg, this Argshall indicate a_functionArgDescription3
 As an output Arg, this Argshall indicate a_functionArgDescription4
 [Returns] :${return_type}
 This return shall indicate var_func_returnt_description
 ---------------------------------------------------------------------------------------------------------------*/

void AlarmInit() {
	DDRB = 0xFF;

}

void PasswordSetFlag(){

	EEPROM_Write_Byte(PASSWORD_LOCATION,PASSWORD_IS_SET);

}
void AlarmTurnOn() {
	DDRB = 0xFF;


	for (uint8 var = 0; var < 100; ++var) {
		SET_BIT(PORTB, PB0);
		_delay_ms(7);
		CLEAR_BIT(PORTB, 0);
		_delay_ms(7);
	}



}

/** ---------------------------------------------------------------------------------------------------------------
 [Function Name] :OpenTheDoor
 [Description] :This function is responsible turning on the alarm when it is called
 [Args] :Null
 [in] a_functionArgType1 a_functionArgName1:
 This Argshall indicate a_functionArgDescription1
 [out] a_functionArgType2 a_functionArgName2:
 This Argshall indicate a_functionArgDescription2
 [in/out] a_functionArgType3 a_functionArgName3:
 As an input Arg, this Argshall indicate a_functionArgDescription3
 As an output Arg, this Argshall indicate a_functionArgDescription4
 [Returns] :${return_type}
 This return shall indicate var_func_returnt_description
 ---------------------------------------------------------------------------------------------------------------*/
void OpenTheDoor() {
	SET_BIT(PORTB, PB1);
	CLEAR_BIT(PORTB, PB2);
	_delay_ms(1000);
	CLEAR_BIT(PORTB, PB1);

}

void CloseTheDoor() {
	SET_BIT(PORTB, PB2);
	CLEAR_BIT(PORTB, PB1);
	_delay_ms(1000);
	CLEAR_BIT(PORTB, PB2);
}
void Password_is_set_quary() {
	uint8 *Flag;

	EEPROM_Read_Byte(PASSWORD_FLAG_LOCATION,Flag);
	if (*Flag == PASSWORD_IS_SET)
	{
		LCD_clearScreen();
		LCD_displayString("PASSWORD_IS_SET");
		UART_sendByte(PASSWORD_IS_SET);
	}
	else {
		LCD_clearScreen();
		LCD_displayString("PASSWORD_IS_CLEARED");
			UART_sendByte(PASSWORD_IS_CLEARED);
		}
}
/* ---------------------------------------------------------------------------------------------------------------
 [Function Name] :OpenTheDoor
 [Description] :This function is responsible turning on the alarm when it is called
 [Args] :Null
 [in] a_functionArgType1 a_functionArgName1:
 This Argshall indicate a_functionArgDescription1
 [out] a_functionArgType2 a_functionArgName2:
 This Argshall indicate a_functionArgDescription2
 [in/out] a_functionArgType3 a_functionArgName3:
 As an input Arg, this Argshall indicate a_functionArgDescription3
 As an output Arg, this Argshall indicate a_functionArgDescription4
 [Returns] :${return_type}
 This return shall indicate var_func_returnt_description
 ---------------------------------------------------------------------------------------------------------------*/

void getcurrentpassword() {

	uint8 *a;
	for (uint8 Loop_counter = 0; Loop_counter < 8; Loop_counter++) {

		EEPROM_Read_Byte(PASSWORD_LOCATION + Loop_counter, (a + Loop_counter));
		UART_sendByte(*(a + Loop_counter));
	}

}

