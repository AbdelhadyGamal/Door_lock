
doorlock_app.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000039e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000015e  00800060  000039e0  00003a54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000378c  00000000  00000000  00003bb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000f54  00000000  00000000  00007340  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00008294  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000083d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00008544  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  0000a18d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000b078  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000be28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000bf88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000c215  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000c9e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ee       	ldi	r30, 0xE0	; 224
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3b       	cpi	r26, 0xBE	; 190
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 1e 19 	call	0x323c	; 0x323c <main>
      7a:	0c 94 ee 1c 	jmp	0x39dc	; 0x39dc <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 72 1c 	jmp	0x38e4	; 0x38e4 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a5 eb       	ldi	r26, 0xB5	; 181
     118:	b1 e0       	ldi	r27, 0x01	; 1
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 8e 1c 	jmp	0x391c	; 0x391c <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 7e 1c 	jmp	0x38fc	; 0x38fc <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 9a 1c 	jmp	0x3934	; 0x3934 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 7e 1c 	jmp	0x38fc	; 0x38fc <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 9a 1c 	jmp	0x3934	; 0x3934 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 72 1c 	jmp	0x38e4	; 0x38e4 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	85 eb       	ldi	r24, 0xB5	; 181
     486:	91 e0       	ldi	r25, 0x01	; 1
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 8e 1c 	jmp	0x391c	; 0x391c <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 7e 1c 	jmp	0x38fc	; 0x38fc <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 9a 1c 	jmp	0x3934	; 0x3934 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 7e 1c 	jmp	0x38fc	; 0x38fc <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 9a 1c 	jmp	0x3934	; 0x3934 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 7e 1c 	jmp	0x38fc	; 0x38fc <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 9a 1c 	jmp	0x3934	; 0x3934 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 82 1c 	jmp	0x3904	; 0x3904 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 9e 1c 	jmp	0x393c	; 0x393c <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__pack_f+0x178>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__pack_f+0x172>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__pack_f+0x17c>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__pack_f+0x114>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__pack_f+0x76>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__pack_f+0xca>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__pack_f+0x86>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__pack_f+0x7e>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__pack_f+0x9c>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__pack_f+0x94>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__pack_f+0xbe>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__pack_f+0xee>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__pack_f+0xf6>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__pack_f+0xf6>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__pack_f+0x10e>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__pack_f+0x162>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__pack_f+0x172>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__pack_f+0x144>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__pack_f+0x154>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__pack_f+0x14c>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__pack_f+0x162>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__pack_f+0x164>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__pack_f+0x17c>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <KeyPad_getPressedKey>:
 *  Author: Mohamed Tarek
 */

#include "keypad.h"

uint8 KeyPad_getPressedKey(void){
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <KeyPad_getPressedKey+0x6>
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;

	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
     b40:	1a 82       	std	Y+2, r1	; 0x02
     b42:	4d c0       	rjmp	.+154    	; 0xbde <KeyPad_getPressedKey+0xa8>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
     b44:	ea e3       	ldi	r30, 0x3A	; 58
     b46:	f0 e0       	ldi	r31, 0x00	; 0
     b48:	8a 81       	ldd	r24, Y+2	; 0x02
     b4a:	28 2f       	mov	r18, r24
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	80 e1       	ldi	r24, 0x10	; 16
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	02 c0       	rjmp	.+4      	; 0xb58 <KeyPad_getPressedKey+0x22>
     b54:	88 0f       	add	r24, r24
     b56:	99 1f       	adc	r25, r25
     b58:	2a 95       	dec	r18
     b5a:	e2 f7       	brpl	.-8      	; 0xb54 <KeyPad_getPressedKey+0x1e>
     b5c:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
     b5e:	eb e3       	ldi	r30, 0x3B	; 59
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	8a 81       	ldd	r24, Y+2	; 0x02
     b64:	28 2f       	mov	r18, r24
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	80 e1       	ldi	r24, 0x10	; 16
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	02 2e       	mov	r0, r18
     b6e:	02 c0       	rjmp	.+4      	; 0xb74 <KeyPad_getPressedKey+0x3e>
     b70:	88 0f       	add	r24, r24
     b72:	99 1f       	adc	r25, r25
     b74:	0a 94       	dec	r0
     b76:	e2 f7       	brpl	.-8      	; 0xb70 <KeyPad_getPressedKey+0x3a>
     b78:	80 95       	com	r24
     b7a:	80 83       	st	Z, r24
			for(row=0;row<N_row;row++) /* loop for rows */
     b7c:	19 82       	std	Y+1, r1	; 0x01
     b7e:	29 c0       	rjmp	.+82     	; 0xbd2 <KeyPad_getPressedKey+0x9c>
			{
				if(!(KEYPAD_PORT_IN & (1<<row))) /* if the switch is press in this row */ 
     b80:	e9 e3       	ldi	r30, 0x39	; 57
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	80 81       	ld	r24, Z
     b86:	28 2f       	mov	r18, r24
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	89 81       	ldd	r24, Y+1	; 0x01
     b8c:	88 2f       	mov	r24, r24
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	a9 01       	movw	r20, r18
     b92:	02 c0       	rjmp	.+4      	; 0xb98 <KeyPad_getPressedKey+0x62>
     b94:	55 95       	asr	r21
     b96:	47 95       	ror	r20
     b98:	8a 95       	dec	r24
     b9a:	e2 f7       	brpl	.-8      	; 0xb94 <KeyPad_getPressedKey+0x5e>
     b9c:	ca 01       	movw	r24, r20
     b9e:	81 70       	andi	r24, 0x01	; 1
     ba0:	90 70       	andi	r25, 0x00	; 0
     ba2:	00 97       	sbiw	r24, 0x00	; 0
     ba4:	99 f4       	brne	.+38     	; 0xbcc <KeyPad_getPressedKey+0x96>
				{
					#if (N_col == 3)  
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1); 
     ba6:	89 81       	ldd	r24, Y+1	; 0x01
     ba8:	28 2f       	mov	r18, r24
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	c9 01       	movw	r24, r18
     bae:	88 0f       	add	r24, r24
     bb0:	99 1f       	adc	r25, r25
     bb2:	82 0f       	add	r24, r18
     bb4:	93 1f       	adc	r25, r19
     bb6:	98 2f       	mov	r25, r24
     bb8:	8a 81       	ldd	r24, Y+2	; 0x02
     bba:	89 0f       	add	r24, r25
     bbc:	8f 5f       	subi	r24, 0xFF	; 255
     bbe:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <KeyPad_4x3_adjustKeyNumber>
					#endif				
				}
			}
		}
	}	
}
     bc2:	0f 90       	pop	r0
     bc4:	0f 90       	pop	r0
     bc6:	cf 91       	pop	r28
     bc8:	df 91       	pop	r29
     bca:	08 95       	ret
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
			for(row=0;row<N_row;row++) /* loop for rows */
     bcc:	89 81       	ldd	r24, Y+1	; 0x01
     bce:	8f 5f       	subi	r24, 0xFF	; 255
     bd0:	89 83       	std	Y+1, r24	; 0x01
     bd2:	89 81       	ldd	r24, Y+1	; 0x01
     bd4:	84 30       	cpi	r24, 0x04	; 4
     bd6:	a0 f2       	brcs	.-88     	; 0xb80 <KeyPad_getPressedKey+0x4a>
uint8 KeyPad_getPressedKey(void){
	uint8 col,row;

	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
     bd8:	8a 81       	ldd	r24, Y+2	; 0x02
     bda:	8f 5f       	subi	r24, 0xFF	; 255
     bdc:	8a 83       	std	Y+2, r24	; 0x02
     bde:	8a 81       	ldd	r24, Y+2	; 0x02
     be0:	83 30       	cpi	r24, 0x03	; 3
     be2:	08 f4       	brcc	.+2      	; 0xbe6 <KeyPad_getPressedKey+0xb0>
     be4:	af cf       	rjmp	.-162    	; 0xb44 <KeyPad_getPressedKey+0xe>
     be6:	ac cf       	rjmp	.-168    	; 0xb40 <KeyPad_getPressedKey+0xa>

00000be8 <KeyPad_4x3_adjustKeyNumber>:
}

#if (N_col == 3) 

uint8 KeyPad_4x3_adjustKeyNumber(uint8 button_number)
{
     be8:	df 93       	push	r29
     bea:	cf 93       	push	r28
     bec:	00 d0       	rcall	.+0      	; 0xbee <KeyPad_4x3_adjustKeyNumber+0x6>
     bee:	00 d0       	rcall	.+0      	; 0xbf0 <KeyPad_4x3_adjustKeyNumber+0x8>
     bf0:	cd b7       	in	r28, 0x3d	; 61
     bf2:	de b7       	in	r29, 0x3e	; 62
     bf4:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
     bf6:	89 81       	ldd	r24, Y+1	; 0x01
     bf8:	28 2f       	mov	r18, r24
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	3c 83       	std	Y+4, r19	; 0x04
     bfe:	2b 83       	std	Y+3, r18	; 0x03
     c00:	8b 81       	ldd	r24, Y+3	; 0x03
     c02:	9c 81       	ldd	r25, Y+4	; 0x04
     c04:	8a 30       	cpi	r24, 0x0A	; 10
     c06:	91 05       	cpc	r25, r1
     c08:	81 f0       	breq	.+32     	; 0xc2a <KeyPad_4x3_adjustKeyNumber+0x42>
     c0a:	2b 81       	ldd	r18, Y+3	; 0x03
     c0c:	3c 81       	ldd	r19, Y+4	; 0x04
     c0e:	2a 30       	cpi	r18, 0x0A	; 10
     c10:	31 05       	cpc	r19, r1
     c12:	9c f0       	brlt	.+38     	; 0xc3a <KeyPad_4x3_adjustKeyNumber+0x52>
     c14:	8b 81       	ldd	r24, Y+3	; 0x03
     c16:	9c 81       	ldd	r25, Y+4	; 0x04
     c18:	8b 30       	cpi	r24, 0x0B	; 11
     c1a:	91 05       	cpc	r25, r1
     c1c:	49 f0       	breq	.+18     	; 0xc30 <KeyPad_4x3_adjustKeyNumber+0x48>
     c1e:	2b 81       	ldd	r18, Y+3	; 0x03
     c20:	3c 81       	ldd	r19, Y+4	; 0x04
     c22:	2c 30       	cpi	r18, 0x0C	; 12
     c24:	31 05       	cpc	r19, r1
     c26:	31 f0       	breq	.+12     	; 0xc34 <KeyPad_4x3_adjustKeyNumber+0x4c>
     c28:	08 c0       	rjmp	.+16     	; 0xc3a <KeyPad_4x3_adjustKeyNumber+0x52>
	{
		case 10: return '*'; // ASCII Code of =
     c2a:	3a e2       	ldi	r19, 0x2A	; 42
     c2c:	3a 83       	std	Y+2, r19	; 0x02
     c2e:	07 c0       	rjmp	.+14     	; 0xc3e <KeyPad_4x3_adjustKeyNumber+0x56>
				 break;
		case 11: return 0;
     c30:	1a 82       	std	Y+2, r1	; 0x02
     c32:	05 c0       	rjmp	.+10     	; 0xc3e <KeyPad_4x3_adjustKeyNumber+0x56>
				 break;		
		case 12: return '#'; // ASCII Code of +
     c34:	83 e2       	ldi	r24, 0x23	; 35
     c36:	8a 83       	std	Y+2, r24	; 0x02
     c38:	02 c0       	rjmp	.+4      	; 0xc3e <KeyPad_4x3_adjustKeyNumber+0x56>
				 break;
		default: return button_number;								 						
     c3a:	99 81       	ldd	r25, Y+1	; 0x01
     c3c:	9a 83       	std	Y+2, r25	; 0x02
     c3e:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
     c40:	0f 90       	pop	r0
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0
     c46:	0f 90       	pop	r0
     c48:	cf 91       	pop	r28
     c4a:	df 91       	pop	r29
     c4c:	08 95       	ret

00000c4e <APP_passwordIsSetQuary>:
 [Returns] :void  return value by reference in the pointer "answer"
 0x00 if is not set
 0xFF if is set
 ---------------------------------------------------------------------------------------------------------------*/

void APP_passwordIsSetQuary(uint8 *answer) {
     c4e:	df 93       	push	r29
     c50:	cf 93       	push	r28
     c52:	00 d0       	rcall	.+0      	; 0xc54 <APP_passwordIsSetQuary+0x6>
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
     c58:	9a 83       	std	Y+2, r25	; 0x02
     c5a:	89 83       	std	Y+1, r24	; 0x01

	LCD_clearScreen();
     c5c:	0e 94 14 19 	call	0x3228	; 0x3228 <LCD_clearScreen>
		LCD_displayString("Password 0");
     c60:	80 e6       	ldi	r24, 0x60	; 96
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	0e 94 6d 18 	call	0x30da	; 0x30da <LCD_displayString>
	UART_sendByte(PASSWORDISSETQUARYCOMMMAND);
     c68:	80 e0       	ldi	r24, 0x00	; 0
     c6a:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <UART_sendByte>
	LCD_clearScreen();
     c6e:	0e 94 14 19 	call	0x3228	; 0x3228 <LCD_clearScreen>
		LCD_displayString("Password 1");
     c72:	8b e6       	ldi	r24, 0x6B	; 107
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	0e 94 6d 18 	call	0x30da	; 0x30da <LCD_displayString>
		*answer = UART_recieveByte();
     c7a:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <UART_recieveByte>
     c7e:	e9 81       	ldd	r30, Y+1	; 0x01
     c80:	fa 81       	ldd	r31, Y+2	; 0x02
     c82:	80 83       	st	Z, r24
		LCD_clearScreen();
     c84:	0e 94 14 19 	call	0x3228	; 0x3228 <LCD_clearScreen>
		LCD_displayString("Password 2");
     c88:	86 e7       	ldi	r24, 0x76	; 118
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	0e 94 6d 18 	call	0x30da	; 0x30da <LCD_displayString>
}
     c90:	0f 90       	pop	r0
     c92:	0f 90       	pop	r0
     c94:	cf 91       	pop	r28
     c96:	df 91       	pop	r29
     c98:	08 95       	ret

00000c9a <APP_pwmTimer0Init>:
 storing it in the memory by asking the user to Enter New password Of 8 bit and confirm it

 [Returns] :void
 ---------------------------------------------------------------------------------------------------------------*/

void APP_pwmTimer0Init(unsigned char set_duty_cycle) {
     c9a:	df 93       	push	r29
     c9c:	cf 93       	push	r28
     c9e:	0f 92       	push	r0
     ca0:	cd b7       	in	r28, 0x3d	; 61
     ca2:	de b7       	in	r29, 0x3e	; 62
     ca4:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0; //initial timer value
     ca6:	e2 e5       	ldi	r30, 0x52	; 82
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	10 82       	st	Z, r1

	OCR0 = set_duty_cycle;
     cac:	ec e5       	ldi	r30, 0x5C	; 92
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
     cb2:	80 83       	st	Z, r24

	DDRB = DDRB | (1 << PB3); //set OC0 as output pin --> pin where the PWM signal is generated from MC.
     cb4:	a7 e3       	ldi	r26, 0x37	; 55
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e7 e3       	ldi	r30, 0x37	; 55
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	88 60       	ori	r24, 0x08	; 8
     cc0:	8c 93       	st	X, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1 << WGM00) | (1 << WGM01) | (1 << COM01) | (1 << CS01);
     cc2:	e3 e5       	ldi	r30, 0x53	; 83
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	8a e6       	ldi	r24, 0x6A	; 106
     cc8:	80 83       	st	Z, r24
	SET_BIT(DDRB, PB1);
     cca:	a7 e3       	ldi	r26, 0x37	; 55
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	e7 e3       	ldi	r30, 0x37	; 55
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	82 60       	ori	r24, 0x02	; 2
     cd6:	8c 93       	st	X, r24
	SET_BIT(DDRB, PB2);
     cd8:	a7 e3       	ldi	r26, 0x37	; 55
     cda:	b0 e0       	ldi	r27, 0x00	; 0
     cdc:	e7 e3       	ldi	r30, 0x37	; 55
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	84 60       	ori	r24, 0x04	; 4
     ce4:	8c 93       	st	X, r24
}
     ce6:	0f 90       	pop	r0
     ce8:	cf 91       	pop	r28
     cea:	df 91       	pop	r29
     cec:	08 95       	ret

00000cee <APP_setPassword>:

void APP_setPassword() {
     cee:	0f 93       	push	r16
     cf0:	1f 93       	push	r17
     cf2:	df 93       	push	r29
     cf4:	cf 93       	push	r28
     cf6:	cd b7       	in	r28, 0x3d	; 61
     cf8:	de b7       	in	r29, 0x3e	; 62
     cfa:	c2 54       	subi	r28, 0x42	; 66
     cfc:	d0 40       	sbci	r29, 0x00	; 0
     cfe:	0f b6       	in	r0, 0x3f	; 63
     d00:	f8 94       	cli
     d02:	de bf       	out	0x3e, r29	; 62
     d04:	0f be       	out	0x3f, r0	; 63
     d06:	cd bf       	out	0x3d, r28	; 61
	 */
	uint8 PassArrayConfirmation[9];
	/**
	 * Loop_counter is a 8 bit variable used within the local for loops to count to eight
	 */
	uint8 Loop_counter = 0;
     d08:	1e a6       	std	Y+46, r1	; 0x2e
	/**
	 error
	 */
	char mystr[2] = "a";
     d0a:	fe 01       	movw	r30, r28
     d0c:	ef 5b       	subi	r30, 0xBF	; 191
     d0e:	ff 4f       	sbci	r31, 0xFF	; 255
     d10:	80 91 f4 00 	lds	r24, 0x00F4
     d14:	90 91 f5 00 	lds	r25, 0x00F5
     d18:	91 83       	std	Z+1, r25	; 0x01
     d1a:	80 83       	st	Z, r24

	uint8 password_doesnot_matches = 0;
     d1c:	1d a6       	std	Y+45, r1	; 0x2d

	uint8 *passwordIsSet;

	APP_passwordIsSetSetFlageQuary(passwordIsSet);
     d1e:	8b a5       	ldd	r24, Y+43	; 0x2b
     d20:	9c a5       	ldd	r25, Y+44	; 0x2c
     d22:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <APP_passwordIsSetSetFlageQuary>

	if ((*passwordIsSet) != PASSWORD_IS_SET) {
     d26:	eb a5       	ldd	r30, Y+43	; 0x2b
     d28:	fc a5       	ldd	r31, Y+44	; 0x2c
     d2a:	80 81       	ld	r24, Z
     d2c:	8f 30       	cpi	r24, 0x0F	; 15
     d2e:	09 f4       	brne	.+2      	; 0xd32 <APP_setPassword+0x44>
     d30:	0d c2       	rjmp	.+1050   	; 0x114c <APP_setPassword+0x45e>
		 * this do while loop is to ensure that the two passwords entered by the user is identical
		 * it
		 */

		do {
			LCD_clearScreen();
     d32:	0e 94 14 19 	call	0x3228	; 0x3228 <LCD_clearScreen>
			LCD_displayString("E New Pass");
     d36:	81 e8       	ldi	r24, 0x81	; 129
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	0e 94 6d 18 	call	0x30da	; 0x30da <LCD_displayString>

			for (Loop_counter = 0; Loop_counter < 8; Loop_counter++) {
     d3e:	1e a6       	std	Y+46, r1	; 0x2e
     d40:	a0 c0       	rjmp	.+320    	; 0xe82 <APP_setPassword+0x194>

				PassArrayFirst[Loop_counter] = KeyPad_getPressedKey();
     d42:	8e a5       	ldd	r24, Y+46	; 0x2e
     d44:	08 2f       	mov	r16, r24
     d46:	10 e0       	ldi	r17, 0x00	; 0
     d48:	0e 94 9b 05 	call	0xb36	; 0xb36 <KeyPad_getPressedKey>
     d4c:	28 2f       	mov	r18, r24
     d4e:	ce 01       	movw	r24, r28
     d50:	8f 96       	adiw	r24, 0x2f	; 47
     d52:	fc 01       	movw	r30, r24
     d54:	e0 0f       	add	r30, r16
     d56:	f1 1f       	adc	r31, r17
     d58:	20 83       	st	Z, r18
				LCD_goToRowColumn(1, Loop_counter + 1);
     d5a:	8e a5       	ldd	r24, Y+46	; 0x2e
     d5c:	98 2f       	mov	r25, r24
     d5e:	9f 5f       	subi	r25, 0xFF	; 255
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	69 2f       	mov	r22, r25
     d64:	0e 94 96 18 	call	0x312c	; 0x312c <LCD_goToRowColumn>
				itoa(PassArrayFirst[Loop_counter], mystr, 10);
     d68:	8e a5       	ldd	r24, Y+46	; 0x2e
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	ce 01       	movw	r24, r28
     d70:	8f 96       	adiw	r24, 0x2f	; 47
     d72:	fc 01       	movw	r30, r24
     d74:	e2 0f       	add	r30, r18
     d76:	f3 1f       	adc	r31, r19
     d78:	80 81       	ld	r24, Z
     d7a:	88 2f       	mov	r24, r24
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	9e 01       	movw	r18, r28
     d80:	2f 5b       	subi	r18, 0xBF	; 191
     d82:	3f 4f       	sbci	r19, 0xFF	; 255
     d84:	b9 01       	movw	r22, r18
     d86:	4a e0       	ldi	r20, 0x0A	; 10
     d88:	50 e0       	ldi	r21, 0x00	; 0
     d8a:	0e 94 a9 1c 	call	0x3952	; 0x3952 <itoa>
				LCD_displayString(mystr);
     d8e:	ce 01       	movw	r24, r28
     d90:	8f 5b       	subi	r24, 0xBF	; 191
     d92:	9f 4f       	sbci	r25, 0xFF	; 255
     d94:	0e 94 6d 18 	call	0x30da	; 0x30da <LCD_displayString>
     d98:	80 e0       	ldi	r24, 0x00	; 0
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	a8 ec       	ldi	r26, 0xC8	; 200
     d9e:	b2 e4       	ldi	r27, 0x42	; 66
     da0:	8f a3       	std	Y+39, r24	; 0x27
     da2:	98 a7       	std	Y+40, r25	; 0x28
     da4:	a9 a7       	std	Y+41, r26	; 0x29
     da6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     da8:	6f a1       	ldd	r22, Y+39	; 0x27
     daa:	78 a5       	ldd	r23, Y+40	; 0x28
     dac:	89 a5       	ldd	r24, Y+41	; 0x29
     dae:	9a a5       	ldd	r25, Y+42	; 0x2a
     db0:	20 e0       	ldi	r18, 0x00	; 0
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	4a ef       	ldi	r20, 0xFA	; 250
     db6:	54 e4       	ldi	r21, 0x44	; 68
     db8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     dbc:	dc 01       	movw	r26, r24
     dbe:	cb 01       	movw	r24, r22
     dc0:	8b a3       	std	Y+35, r24	; 0x23
     dc2:	9c a3       	std	Y+36, r25	; 0x24
     dc4:	ad a3       	std	Y+37, r26	; 0x25
     dc6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     dc8:	6b a1       	ldd	r22, Y+35	; 0x23
     dca:	7c a1       	ldd	r23, Y+36	; 0x24
     dcc:	8d a1       	ldd	r24, Y+37	; 0x25
     dce:	9e a1       	ldd	r25, Y+38	; 0x26
     dd0:	20 e0       	ldi	r18, 0x00	; 0
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	40 e8       	ldi	r20, 0x80	; 128
     dd6:	5f e3       	ldi	r21, 0x3F	; 63
     dd8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     ddc:	88 23       	and	r24, r24
     dde:	2c f4       	brge	.+10     	; 0xdea <APP_setPassword+0xfc>
		__ticks = 1;
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	9a a3       	std	Y+34, r25	; 0x22
     de6:	89 a3       	std	Y+33, r24	; 0x21
     de8:	3f c0       	rjmp	.+126    	; 0xe68 <APP_setPassword+0x17a>
	else if (__tmp > 65535)
     dea:	6b a1       	ldd	r22, Y+35	; 0x23
     dec:	7c a1       	ldd	r23, Y+36	; 0x24
     dee:	8d a1       	ldd	r24, Y+37	; 0x25
     df0:	9e a1       	ldd	r25, Y+38	; 0x26
     df2:	20 e0       	ldi	r18, 0x00	; 0
     df4:	3f ef       	ldi	r19, 0xFF	; 255
     df6:	4f e7       	ldi	r20, 0x7F	; 127
     df8:	57 e4       	ldi	r21, 0x47	; 71
     dfa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     dfe:	18 16       	cp	r1, r24
     e00:	4c f5       	brge	.+82     	; 0xe54 <APP_setPassword+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e02:	6f a1       	ldd	r22, Y+39	; 0x27
     e04:	78 a5       	ldd	r23, Y+40	; 0x28
     e06:	89 a5       	ldd	r24, Y+41	; 0x29
     e08:	9a a5       	ldd	r25, Y+42	; 0x2a
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	40 e2       	ldi	r20, 0x20	; 32
     e10:	51 e4       	ldi	r21, 0x41	; 65
     e12:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e16:	dc 01       	movw	r26, r24
     e18:	cb 01       	movw	r24, r22
     e1a:	bc 01       	movw	r22, r24
     e1c:	cd 01       	movw	r24, r26
     e1e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e22:	dc 01       	movw	r26, r24
     e24:	cb 01       	movw	r24, r22
     e26:	9a a3       	std	Y+34, r25	; 0x22
     e28:	89 a3       	std	Y+33, r24	; 0x21
     e2a:	0f c0       	rjmp	.+30     	; 0xe4a <APP_setPassword+0x15c>
     e2c:	88 ec       	ldi	r24, 0xC8	; 200
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	98 a3       	std	Y+32, r25	; 0x20
     e32:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e34:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e36:	98 a1       	ldd	r25, Y+32	; 0x20
     e38:	01 97       	sbiw	r24, 0x01	; 1
     e3a:	f1 f7       	brne	.-4      	; 0xe38 <APP_setPassword+0x14a>
     e3c:	98 a3       	std	Y+32, r25	; 0x20
     e3e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e40:	89 a1       	ldd	r24, Y+33	; 0x21
     e42:	9a a1       	ldd	r25, Y+34	; 0x22
     e44:	01 97       	sbiw	r24, 0x01	; 1
     e46:	9a a3       	std	Y+34, r25	; 0x22
     e48:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e4a:	89 a1       	ldd	r24, Y+33	; 0x21
     e4c:	9a a1       	ldd	r25, Y+34	; 0x22
     e4e:	00 97       	sbiw	r24, 0x00	; 0
     e50:	69 f7       	brne	.-38     	; 0xe2c <APP_setPassword+0x13e>
     e52:	14 c0       	rjmp	.+40     	; 0xe7c <APP_setPassword+0x18e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e54:	6b a1       	ldd	r22, Y+35	; 0x23
     e56:	7c a1       	ldd	r23, Y+36	; 0x24
     e58:	8d a1       	ldd	r24, Y+37	; 0x25
     e5a:	9e a1       	ldd	r25, Y+38	; 0x26
     e5c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e60:	dc 01       	movw	r26, r24
     e62:	cb 01       	movw	r24, r22
     e64:	9a a3       	std	Y+34, r25	; 0x22
     e66:	89 a3       	std	Y+33, r24	; 0x21
     e68:	89 a1       	ldd	r24, Y+33	; 0x21
     e6a:	9a a1       	ldd	r25, Y+34	; 0x22
     e6c:	9e 8f       	std	Y+30, r25	; 0x1e
     e6e:	8d 8f       	std	Y+29, r24	; 0x1d
     e70:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e72:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e74:	01 97       	sbiw	r24, 0x01	; 1
     e76:	f1 f7       	brne	.-4      	; 0xe74 <APP_setPassword+0x186>
     e78:	9e 8f       	std	Y+30, r25	; 0x1e
     e7a:	8d 8f       	std	Y+29, r24	; 0x1d

		do {
			LCD_clearScreen();
			LCD_displayString("E New Pass");

			for (Loop_counter = 0; Loop_counter < 8; Loop_counter++) {
     e7c:	8e a5       	ldd	r24, Y+46	; 0x2e
     e7e:	8f 5f       	subi	r24, 0xFF	; 255
     e80:	8e a7       	std	Y+46, r24	; 0x2e
     e82:	8e a5       	ldd	r24, Y+46	; 0x2e
     e84:	88 30       	cpi	r24, 0x08	; 8
     e86:	08 f4       	brcc	.+2      	; 0xe8a <APP_setPassword+0x19c>
     e88:	5c cf       	rjmp	.-328    	; 0xd42 <APP_setPassword+0x54>
				itoa(PassArrayFirst[Loop_counter], mystr, 10);
				LCD_displayString(mystr);
				_delay_ms(100);

			}
			PassArrayFirst[9]='\0';
     e8a:	18 ae       	std	Y+56, r1	; 0x38

			LCD_clearScreen();
     e8c:	0e 94 14 19 	call	0x3228	; 0x3228 <LCD_clearScreen>
			LCD_displayString("confirm Pass");
     e90:	8c e8       	ldi	r24, 0x8C	; 140
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	0e 94 6d 18 	call	0x30da	; 0x30da <LCD_displayString>

			for (Loop_counter = 0; Loop_counter < 8; Loop_counter++) {
     e98:	1e a6       	std	Y+46, r1	; 0x2e
     e9a:	a0 c0       	rjmp	.+320    	; 0xfdc <APP_setPassword+0x2ee>

				PassArrayConfirmation[Loop_counter] = KeyPad_getPressedKey();
     e9c:	8e a5       	ldd	r24, Y+46	; 0x2e
     e9e:	08 2f       	mov	r16, r24
     ea0:	10 e0       	ldi	r17, 0x00	; 0
     ea2:	0e 94 9b 05 	call	0xb36	; 0xb36 <KeyPad_getPressedKey>
     ea6:	28 2f       	mov	r18, r24
     ea8:	ce 01       	movw	r24, r28
     eaa:	c8 96       	adiw	r24, 0x38	; 56
     eac:	fc 01       	movw	r30, r24
     eae:	e0 0f       	add	r30, r16
     eb0:	f1 1f       	adc	r31, r17
     eb2:	20 83       	st	Z, r18
				LCD_goToRowColumn(1, Loop_counter + 1);
     eb4:	8e a5       	ldd	r24, Y+46	; 0x2e
     eb6:	98 2f       	mov	r25, r24
     eb8:	9f 5f       	subi	r25, 0xFF	; 255
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	69 2f       	mov	r22, r25
     ebe:	0e 94 96 18 	call	0x312c	; 0x312c <LCD_goToRowColumn>

				itoa(PassArrayConfirmation[Loop_counter], mystr, 10);
     ec2:	8e a5       	ldd	r24, Y+46	; 0x2e
     ec4:	28 2f       	mov	r18, r24
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	ce 01       	movw	r24, r28
     eca:	c8 96       	adiw	r24, 0x38	; 56
     ecc:	fc 01       	movw	r30, r24
     ece:	e2 0f       	add	r30, r18
     ed0:	f3 1f       	adc	r31, r19
     ed2:	80 81       	ld	r24, Z
     ed4:	88 2f       	mov	r24, r24
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	9e 01       	movw	r18, r28
     eda:	2f 5b       	subi	r18, 0xBF	; 191
     edc:	3f 4f       	sbci	r19, 0xFF	; 255
     ede:	b9 01       	movw	r22, r18
     ee0:	4a e0       	ldi	r20, 0x0A	; 10
     ee2:	50 e0       	ldi	r21, 0x00	; 0
     ee4:	0e 94 a9 1c 	call	0x3952	; 0x3952 <itoa>
				LCD_displayString(mystr);
     ee8:	ce 01       	movw	r24, r28
     eea:	8f 5b       	subi	r24, 0xBF	; 191
     eec:	9f 4f       	sbci	r25, 0xFF	; 255
     eee:	0e 94 6d 18 	call	0x30da	; 0x30da <LCD_displayString>
     ef2:	80 e0       	ldi	r24, 0x00	; 0
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	a8 ec       	ldi	r26, 0xC8	; 200
     ef8:	b2 e4       	ldi	r27, 0x42	; 66
     efa:	89 8f       	std	Y+25, r24	; 0x19
     efc:	9a 8f       	std	Y+26, r25	; 0x1a
     efe:	ab 8f       	std	Y+27, r26	; 0x1b
     f00:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f02:	69 8d       	ldd	r22, Y+25	; 0x19
     f04:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f06:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f08:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	4a ef       	ldi	r20, 0xFA	; 250
     f10:	54 e4       	ldi	r21, 0x44	; 68
     f12:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f16:	dc 01       	movw	r26, r24
     f18:	cb 01       	movw	r24, r22
     f1a:	8d 8b       	std	Y+21, r24	; 0x15
     f1c:	9e 8b       	std	Y+22, r25	; 0x16
     f1e:	af 8b       	std	Y+23, r26	; 0x17
     f20:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f22:	6d 89       	ldd	r22, Y+21	; 0x15
     f24:	7e 89       	ldd	r23, Y+22	; 0x16
     f26:	8f 89       	ldd	r24, Y+23	; 0x17
     f28:	98 8d       	ldd	r25, Y+24	; 0x18
     f2a:	20 e0       	ldi	r18, 0x00	; 0
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	40 e8       	ldi	r20, 0x80	; 128
     f30:	5f e3       	ldi	r21, 0x3F	; 63
     f32:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     f36:	88 23       	and	r24, r24
     f38:	2c f4       	brge	.+10     	; 0xf44 <APP_setPassword+0x256>
		__ticks = 1;
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	9c 8b       	std	Y+20, r25	; 0x14
     f40:	8b 8b       	std	Y+19, r24	; 0x13
     f42:	3f c0       	rjmp	.+126    	; 0xfc2 <APP_setPassword+0x2d4>
	else if (__tmp > 65535)
     f44:	6d 89       	ldd	r22, Y+21	; 0x15
     f46:	7e 89       	ldd	r23, Y+22	; 0x16
     f48:	8f 89       	ldd	r24, Y+23	; 0x17
     f4a:	98 8d       	ldd	r25, Y+24	; 0x18
     f4c:	20 e0       	ldi	r18, 0x00	; 0
     f4e:	3f ef       	ldi	r19, 0xFF	; 255
     f50:	4f e7       	ldi	r20, 0x7F	; 127
     f52:	57 e4       	ldi	r21, 0x47	; 71
     f54:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     f58:	18 16       	cp	r1, r24
     f5a:	4c f5       	brge	.+82     	; 0xfae <APP_setPassword+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f5c:	69 8d       	ldd	r22, Y+25	; 0x19
     f5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f60:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f62:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f64:	20 e0       	ldi	r18, 0x00	; 0
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	40 e2       	ldi	r20, 0x20	; 32
     f6a:	51 e4       	ldi	r21, 0x41	; 65
     f6c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f70:	dc 01       	movw	r26, r24
     f72:	cb 01       	movw	r24, r22
     f74:	bc 01       	movw	r22, r24
     f76:	cd 01       	movw	r24, r26
     f78:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f7c:	dc 01       	movw	r26, r24
     f7e:	cb 01       	movw	r24, r22
     f80:	9c 8b       	std	Y+20, r25	; 0x14
     f82:	8b 8b       	std	Y+19, r24	; 0x13
     f84:	0f c0       	rjmp	.+30     	; 0xfa4 <APP_setPassword+0x2b6>
     f86:	88 ec       	ldi	r24, 0xC8	; 200
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	9a 8b       	std	Y+18, r25	; 0x12
     f8c:	89 8b       	std	Y+17, r24	; 0x11
     f8e:	89 89       	ldd	r24, Y+17	; 0x11
     f90:	9a 89       	ldd	r25, Y+18	; 0x12
     f92:	01 97       	sbiw	r24, 0x01	; 1
     f94:	f1 f7       	brne	.-4      	; 0xf92 <APP_setPassword+0x2a4>
     f96:	9a 8b       	std	Y+18, r25	; 0x12
     f98:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f9a:	8b 89       	ldd	r24, Y+19	; 0x13
     f9c:	9c 89       	ldd	r25, Y+20	; 0x14
     f9e:	01 97       	sbiw	r24, 0x01	; 1
     fa0:	9c 8b       	std	Y+20, r25	; 0x14
     fa2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fa4:	8b 89       	ldd	r24, Y+19	; 0x13
     fa6:	9c 89       	ldd	r25, Y+20	; 0x14
     fa8:	00 97       	sbiw	r24, 0x00	; 0
     faa:	69 f7       	brne	.-38     	; 0xf86 <APP_setPassword+0x298>
     fac:	14 c0       	rjmp	.+40     	; 0xfd6 <APP_setPassword+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fae:	6d 89       	ldd	r22, Y+21	; 0x15
     fb0:	7e 89       	ldd	r23, Y+22	; 0x16
     fb2:	8f 89       	ldd	r24, Y+23	; 0x17
     fb4:	98 8d       	ldd	r25, Y+24	; 0x18
     fb6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fba:	dc 01       	movw	r26, r24
     fbc:	cb 01       	movw	r24, r22
     fbe:	9c 8b       	std	Y+20, r25	; 0x14
     fc0:	8b 8b       	std	Y+19, r24	; 0x13
     fc2:	8b 89       	ldd	r24, Y+19	; 0x13
     fc4:	9c 89       	ldd	r25, Y+20	; 0x14
     fc6:	98 8b       	std	Y+16, r25	; 0x10
     fc8:	8f 87       	std	Y+15, r24	; 0x0f
     fca:	8f 85       	ldd	r24, Y+15	; 0x0f
     fcc:	98 89       	ldd	r25, Y+16	; 0x10
     fce:	01 97       	sbiw	r24, 0x01	; 1
     fd0:	f1 f7       	brne	.-4      	; 0xfce <APP_setPassword+0x2e0>
     fd2:	98 8b       	std	Y+16, r25	; 0x10
     fd4:	8f 87       	std	Y+15, r24	; 0x0f
			PassArrayFirst[9]='\0';

			LCD_clearScreen();
			LCD_displayString("confirm Pass");

			for (Loop_counter = 0; Loop_counter < 8; Loop_counter++) {
     fd6:	8e a5       	ldd	r24, Y+46	; 0x2e
     fd8:	8f 5f       	subi	r24, 0xFF	; 255
     fda:	8e a7       	std	Y+46, r24	; 0x2e
     fdc:	8e a5       	ldd	r24, Y+46	; 0x2e
     fde:	88 30       	cpi	r24, 0x08	; 8
     fe0:	08 f4       	brcc	.+2      	; 0xfe4 <APP_setPassword+0x2f6>
     fe2:	5c cf       	rjmp	.-328    	; 0xe9c <APP_setPassword+0x1ae>
				itoa(PassArrayConfirmation[Loop_counter], mystr, 10);
				LCD_displayString(mystr);
				_delay_ms(100);

			}
			PassArrayConfirmation[9]='\0';
     fe4:	fe 01       	movw	r30, r28
     fe6:	ef 5b       	subi	r30, 0xBF	; 191
     fe8:	ff 4f       	sbci	r31, 0xFF	; 255
     fea:	10 82       	st	Z, r1
			password_doesnot_matches = 0;
     fec:	1d a6       	std	Y+45, r1	; 0x2d

			for (Loop_counter = 0; Loop_counter < 8; Loop_counter++) {
     fee:	1e a6       	std	Y+46, r1	; 0x2e
     ff0:	19 c0       	rjmp	.+50     	; 0x1024 <APP_setPassword+0x336>

				if (PassArrayConfirmation[Loop_counter]
     ff2:	8e a5       	ldd	r24, Y+46	; 0x2e
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	ce 01       	movw	r24, r28
     ffa:	c8 96       	adiw	r24, 0x38	; 56
     ffc:	fc 01       	movw	r30, r24
     ffe:	e2 0f       	add	r30, r18
    1000:	f3 1f       	adc	r31, r19
    1002:	40 81       	ld	r20, Z
    1004:	8e a5       	ldd	r24, Y+46	; 0x2e
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	ce 01       	movw	r24, r28
    100c:	8f 96       	adiw	r24, 0x2f	; 47
    100e:	fc 01       	movw	r30, r24
    1010:	e2 0f       	add	r30, r18
    1012:	f3 1f       	adc	r31, r19
    1014:	80 81       	ld	r24, Z
    1016:	48 17       	cp	r20, r24
    1018:	11 f0       	breq	.+4      	; 0x101e <APP_setPassword+0x330>
						!= PassArrayFirst[Loop_counter]) {
					password_doesnot_matches = 1;
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	8d a7       	std	Y+45, r24	; 0x2d

			}
			PassArrayConfirmation[9]='\0';
			password_doesnot_matches = 0;

			for (Loop_counter = 0; Loop_counter < 8; Loop_counter++) {
    101e:	8e a5       	ldd	r24, Y+46	; 0x2e
    1020:	8f 5f       	subi	r24, 0xFF	; 255
    1022:	8e a7       	std	Y+46, r24	; 0x2e
    1024:	8e a5       	ldd	r24, Y+46	; 0x2e
    1026:	88 30       	cpi	r24, 0x08	; 8
    1028:	20 f3       	brcs	.-56     	; 0xff2 <APP_setPassword+0x304>
					password_doesnot_matches = 1;

				}
			}

			if (password_doesnot_matches) {
    102a:	8d a5       	ldd	r24, Y+45	; 0x2d
    102c:	88 23       	and	r24, r24
    102e:	71 f0       	breq	.+28     	; 0x104c <APP_setPassword+0x35e>
				LCD_clearScreen();
    1030:	0e 94 14 19 	call	0x3228	; 0x3228 <LCD_clearScreen>
				LCD_displayString("the pass doesn't match");
    1034:	89 e9       	ldi	r24, 0x99	; 153
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	0e 94 6d 18 	call	0x30da	; 0x30da <LCD_displayString>
				LCD_goToRowColumn(1, 0);
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	60 e0       	ldi	r22, 0x00	; 0
    1040:	0e 94 96 18 	call	0x312c	; 0x312c <LCD_goToRowColumn>
				LCD_displayString("please enter new pass that match");
    1044:	80 eb       	ldi	r24, 0xB0	; 176
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	0e 94 6d 18 	call	0x30da	; 0x30da <LCD_displayString>
			}

		} while (password_doesnot_matches);
    104c:	8d a5       	ldd	r24, Y+45	; 0x2d
    104e:	88 23       	and	r24, r24
    1050:	09 f0       	breq	.+2      	; 0x1054 <APP_setPassword+0x366>
    1052:	6f ce       	rjmp	.-802    	; 0xd32 <APP_setPassword+0x44>

		LCD_clearScreen();
    1054:	0e 94 14 19 	call	0x3228	; 0x3228 <LCD_clearScreen>
		LCD_displayString("Password Matched) ");
    1058:	81 ed       	ldi	r24, 0xD1	; 209
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	0e 94 6d 18 	call	0x30da	; 0x30da <LCD_displayString>
		APP_storePasswordQuary(PassArrayFirst);
    1060:	ce 01       	movw	r24, r28
    1062:	8f 96       	adiw	r24, 0x2f	; 47
    1064:	0e 94 37 0a 	call	0x146e	; 0x146e <APP_storePasswordQuary>
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	aa e7       	ldi	r26, 0x7A	; 122
    106e:	b4 e4       	ldi	r27, 0x44	; 68
    1070:	8b 87       	std	Y+11, r24	; 0x0b
    1072:	9c 87       	std	Y+12, r25	; 0x0c
    1074:	ad 87       	std	Y+13, r26	; 0x0d
    1076:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1078:	6b 85       	ldd	r22, Y+11	; 0x0b
    107a:	7c 85       	ldd	r23, Y+12	; 0x0c
    107c:	8d 85       	ldd	r24, Y+13	; 0x0d
    107e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1080:	20 e0       	ldi	r18, 0x00	; 0
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	4a ef       	ldi	r20, 0xFA	; 250
    1086:	54 e4       	ldi	r21, 0x44	; 68
    1088:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    108c:	dc 01       	movw	r26, r24
    108e:	cb 01       	movw	r24, r22
    1090:	8f 83       	std	Y+7, r24	; 0x07
    1092:	98 87       	std	Y+8, r25	; 0x08
    1094:	a9 87       	std	Y+9, r26	; 0x09
    1096:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1098:	6f 81       	ldd	r22, Y+7	; 0x07
    109a:	78 85       	ldd	r23, Y+8	; 0x08
    109c:	89 85       	ldd	r24, Y+9	; 0x09
    109e:	9a 85       	ldd	r25, Y+10	; 0x0a
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	40 e8       	ldi	r20, 0x80	; 128
    10a6:	5f e3       	ldi	r21, 0x3F	; 63
    10a8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    10ac:	88 23       	and	r24, r24
    10ae:	2c f4       	brge	.+10     	; 0x10ba <APP_setPassword+0x3cc>
		__ticks = 1;
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	9e 83       	std	Y+6, r25	; 0x06
    10b6:	8d 83       	std	Y+5, r24	; 0x05
    10b8:	3f c0       	rjmp	.+126    	; 0x1138 <APP_setPassword+0x44a>
	else if (__tmp > 65535)
    10ba:	6f 81       	ldd	r22, Y+7	; 0x07
    10bc:	78 85       	ldd	r23, Y+8	; 0x08
    10be:	89 85       	ldd	r24, Y+9	; 0x09
    10c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	3f ef       	ldi	r19, 0xFF	; 255
    10c6:	4f e7       	ldi	r20, 0x7F	; 127
    10c8:	57 e4       	ldi	r21, 0x47	; 71
    10ca:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    10ce:	18 16       	cp	r1, r24
    10d0:	4c f5       	brge	.+82     	; 0x1124 <APP_setPassword+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    10d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    10d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    10d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    10da:	20 e0       	ldi	r18, 0x00	; 0
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	40 e2       	ldi	r20, 0x20	; 32
    10e0:	51 e4       	ldi	r21, 0x41	; 65
    10e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10e6:	dc 01       	movw	r26, r24
    10e8:	cb 01       	movw	r24, r22
    10ea:	bc 01       	movw	r22, r24
    10ec:	cd 01       	movw	r24, r26
    10ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10f2:	dc 01       	movw	r26, r24
    10f4:	cb 01       	movw	r24, r22
    10f6:	9e 83       	std	Y+6, r25	; 0x06
    10f8:	8d 83       	std	Y+5, r24	; 0x05
    10fa:	0f c0       	rjmp	.+30     	; 0x111a <APP_setPassword+0x42c>
    10fc:	88 ec       	ldi	r24, 0xC8	; 200
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	9c 83       	std	Y+4, r25	; 0x04
    1102:	8b 83       	std	Y+3, r24	; 0x03
    1104:	8b 81       	ldd	r24, Y+3	; 0x03
    1106:	9c 81       	ldd	r25, Y+4	; 0x04
    1108:	01 97       	sbiw	r24, 0x01	; 1
    110a:	f1 f7       	brne	.-4      	; 0x1108 <APP_setPassword+0x41a>
    110c:	9c 83       	std	Y+4, r25	; 0x04
    110e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1110:	8d 81       	ldd	r24, Y+5	; 0x05
    1112:	9e 81       	ldd	r25, Y+6	; 0x06
    1114:	01 97       	sbiw	r24, 0x01	; 1
    1116:	9e 83       	std	Y+6, r25	; 0x06
    1118:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    111a:	8d 81       	ldd	r24, Y+5	; 0x05
    111c:	9e 81       	ldd	r25, Y+6	; 0x06
    111e:	00 97       	sbiw	r24, 0x00	; 0
    1120:	69 f7       	brne	.-38     	; 0x10fc <APP_setPassword+0x40e>
    1122:	14 c0       	rjmp	.+40     	; 0x114c <APP_setPassword+0x45e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1124:	6f 81       	ldd	r22, Y+7	; 0x07
    1126:	78 85       	ldd	r23, Y+8	; 0x08
    1128:	89 85       	ldd	r24, Y+9	; 0x09
    112a:	9a 85       	ldd	r25, Y+10	; 0x0a
    112c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1130:	dc 01       	movw	r26, r24
    1132:	cb 01       	movw	r24, r22
    1134:	9e 83       	std	Y+6, r25	; 0x06
    1136:	8d 83       	std	Y+5, r24	; 0x05
    1138:	8d 81       	ldd	r24, Y+5	; 0x05
    113a:	9e 81       	ldd	r25, Y+6	; 0x06
    113c:	9a 83       	std	Y+2, r25	; 0x02
    113e:	89 83       	std	Y+1, r24	; 0x01
    1140:	89 81       	ldd	r24, Y+1	; 0x01
    1142:	9a 81       	ldd	r25, Y+2	; 0x02
    1144:	01 97       	sbiw	r24, 0x01	; 1
    1146:	f1 f7       	brne	.-4      	; 0x1144 <APP_setPassword+0x456>
    1148:	9a 83       	std	Y+2, r25	; 0x02
    114a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
	}
	LCD_clearScreen();
    114c:	0e 94 14 19 	call	0x3228	; 0x3228 <LCD_clearScreen>
	LCD_displayString("System is ready");
    1150:	84 ee       	ldi	r24, 0xE4	; 228
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	0e 94 6d 18 	call	0x30da	; 0x30da <LCD_displayString>
}
    1158:	ce 5b       	subi	r28, 0xBE	; 190
    115a:	df 4f       	sbci	r29, 0xFF	; 255
    115c:	0f b6       	in	r0, 0x3f	; 63
    115e:	f8 94       	cli
    1160:	de bf       	out	0x3e, r29	; 62
    1162:	0f be       	out	0x3f, r0	; 63
    1164:	cd bf       	out	0x3d, r28	; 61
    1166:	cf 91       	pop	r28
    1168:	df 91       	pop	r29
    116a:	1f 91       	pop	r17
    116c:	0f 91       	pop	r16
    116e:	08 95       	ret

00001170 <APP_doesTheUserHaveThePassword>:
 [in] uint8 *ArrPtr:
 As an output Arg, this Argshall indicate a_functionArgDescription4
 [Returns] :void

 ---------------------------------------------------------------------------------------------------------------*/
uint8 APP_doesTheUserHaveThePassword() {
    1170:	df 93       	push	r29
    1172:	cf 93       	push	r28
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
    1178:	e1 97       	sbiw	r28, 0x31	; 49
    117a:	0f b6       	in	r0, 0x3f	; 63
    117c:	f8 94       	cli
    117e:	de bf       	out	0x3e, r29	; 62
    1180:	0f be       	out	0x3f, r0	; 63
    1182:	cd bf       	out	0x3d, r28	; 61
	 */
	uint8 PassArraystored[8];
	/**
	 * Loop_counter is a 8 bit variable used within the local for loops to count to eight
	 */
	uint8 Loop_counter = 0;
    1184:	1e 8e       	std	Y+30, r1	; 0x1e
	/**
	 error
	 */
	char mystr[2] = "a";
    1186:	80 91 f4 00 	lds	r24, 0x00F4
    118a:	90 91 f5 00 	lds	r25, 0x00F5
    118e:	98 ab       	std	Y+48, r25	; 0x30
    1190:	8f a7       	std	Y+47, r24	; 0x2f

	uint8 password_doesnot_matches = 0;
    1192:	1d 8e       	std	Y+29, r1	; 0x1d
	/**
	 * this do while loop is to ensure that the two passwords entered by the user is identical
	 * it
	 */
	APP_getCurrentPassword(PassArraystored);
    1194:	ce 01       	movw	r24, r28
    1196:	87 96       	adiw	r24, 0x27	; 39
    1198:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <APP_getCurrentPassword>

	do {

		APP_getPasswordFromUser(PassArrayentered);
    119c:	ce 01       	movw	r24, r28
    119e:	4f 96       	adiw	r24, 0x1f	; 31
    11a0:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <APP_getPasswordFromUser>
		if (APP_twoArrayMatch(PassArrayentered, PassArraystored)) {
    11a4:	ce 01       	movw	r24, r28
    11a6:	4f 96       	adiw	r24, 0x1f	; 31
    11a8:	9e 01       	movw	r18, r28
    11aa:	29 5d       	subi	r18, 0xD9	; 217
    11ac:	3f 4f       	sbci	r19, 0xFF	; 255
    11ae:	b9 01       	movw	r22, r18
    11b0:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <APP_twoArrayMatch>
    11b4:	88 23       	and	r24, r24
    11b6:	09 f4       	brne	.+2      	; 0x11ba <APP_doesTheUserHaveThePassword+0x4a>
    11b8:	7b c0       	rjmp	.+246    	; 0x12b0 <APP_doesTheUserHaveThePassword+0x140>

			LCD_clearScreen();
    11ba:	0e 94 14 19 	call	0x3228	; 0x3228 <LCD_clearScreen>
			LCD_displayString("Pass is correct");
    11be:	86 ef       	ldi	r24, 0xF6	; 246
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	0e 94 6d 18 	call	0x30da	; 0x30da <LCD_displayString>
    11c6:	80 e0       	ldi	r24, 0x00	; 0
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	aa e7       	ldi	r26, 0x7A	; 122
    11cc:	b4 e4       	ldi	r27, 0x44	; 68
    11ce:	89 8f       	std	Y+25, r24	; 0x19
    11d0:	9a 8f       	std	Y+26, r25	; 0x1a
    11d2:	ab 8f       	std	Y+27, r26	; 0x1b
    11d4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11d6:	69 8d       	ldd	r22, Y+25	; 0x19
    11d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11de:	20 e0       	ldi	r18, 0x00	; 0
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	4a ef       	ldi	r20, 0xFA	; 250
    11e4:	54 e4       	ldi	r21, 0x44	; 68
    11e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11ea:	dc 01       	movw	r26, r24
    11ec:	cb 01       	movw	r24, r22
    11ee:	8d 8b       	std	Y+21, r24	; 0x15
    11f0:	9e 8b       	std	Y+22, r25	; 0x16
    11f2:	af 8b       	std	Y+23, r26	; 0x17
    11f4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    11f6:	6d 89       	ldd	r22, Y+21	; 0x15
    11f8:	7e 89       	ldd	r23, Y+22	; 0x16
    11fa:	8f 89       	ldd	r24, Y+23	; 0x17
    11fc:	98 8d       	ldd	r25, Y+24	; 0x18
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	40 e8       	ldi	r20, 0x80	; 128
    1204:	5f e3       	ldi	r21, 0x3F	; 63
    1206:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    120a:	88 23       	and	r24, r24
    120c:	2c f4       	brge	.+10     	; 0x1218 <APP_doesTheUserHaveThePassword+0xa8>
		__ticks = 1;
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	9c 8b       	std	Y+20, r25	; 0x14
    1214:	8b 8b       	std	Y+19, r24	; 0x13
    1216:	3f c0       	rjmp	.+126    	; 0x1296 <APP_doesTheUserHaveThePassword+0x126>
	else if (__tmp > 65535)
    1218:	6d 89       	ldd	r22, Y+21	; 0x15
    121a:	7e 89       	ldd	r23, Y+22	; 0x16
    121c:	8f 89       	ldd	r24, Y+23	; 0x17
    121e:	98 8d       	ldd	r25, Y+24	; 0x18
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	3f ef       	ldi	r19, 0xFF	; 255
    1224:	4f e7       	ldi	r20, 0x7F	; 127
    1226:	57 e4       	ldi	r21, 0x47	; 71
    1228:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    122c:	18 16       	cp	r1, r24
    122e:	4c f5       	brge	.+82     	; 0x1282 <APP_doesTheUserHaveThePassword+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1230:	69 8d       	ldd	r22, Y+25	; 0x19
    1232:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1234:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1236:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1238:	20 e0       	ldi	r18, 0x00	; 0
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	40 e2       	ldi	r20, 0x20	; 32
    123e:	51 e4       	ldi	r21, 0x41	; 65
    1240:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1244:	dc 01       	movw	r26, r24
    1246:	cb 01       	movw	r24, r22
    1248:	bc 01       	movw	r22, r24
    124a:	cd 01       	movw	r24, r26
    124c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1250:	dc 01       	movw	r26, r24
    1252:	cb 01       	movw	r24, r22
    1254:	9c 8b       	std	Y+20, r25	; 0x14
    1256:	8b 8b       	std	Y+19, r24	; 0x13
    1258:	0f c0       	rjmp	.+30     	; 0x1278 <APP_doesTheUserHaveThePassword+0x108>
    125a:	88 ec       	ldi	r24, 0xC8	; 200
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	9a 8b       	std	Y+18, r25	; 0x12
    1260:	89 8b       	std	Y+17, r24	; 0x11
    1262:	89 89       	ldd	r24, Y+17	; 0x11
    1264:	9a 89       	ldd	r25, Y+18	; 0x12
    1266:	01 97       	sbiw	r24, 0x01	; 1
    1268:	f1 f7       	brne	.-4      	; 0x1266 <APP_doesTheUserHaveThePassword+0xf6>
    126a:	9a 8b       	std	Y+18, r25	; 0x12
    126c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    126e:	8b 89       	ldd	r24, Y+19	; 0x13
    1270:	9c 89       	ldd	r25, Y+20	; 0x14
    1272:	01 97       	sbiw	r24, 0x01	; 1
    1274:	9c 8b       	std	Y+20, r25	; 0x14
    1276:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1278:	8b 89       	ldd	r24, Y+19	; 0x13
    127a:	9c 89       	ldd	r25, Y+20	; 0x14
    127c:	00 97       	sbiw	r24, 0x00	; 0
    127e:	69 f7       	brne	.-38     	; 0x125a <APP_doesTheUserHaveThePassword+0xea>
    1280:	14 c0       	rjmp	.+40     	; 0x12aa <APP_doesTheUserHaveThePassword+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1282:	6d 89       	ldd	r22, Y+21	; 0x15
    1284:	7e 89       	ldd	r23, Y+22	; 0x16
    1286:	8f 89       	ldd	r24, Y+23	; 0x17
    1288:	98 8d       	ldd	r25, Y+24	; 0x18
    128a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    128e:	dc 01       	movw	r26, r24
    1290:	cb 01       	movw	r24, r22
    1292:	9c 8b       	std	Y+20, r25	; 0x14
    1294:	8b 8b       	std	Y+19, r24	; 0x13
    1296:	8b 89       	ldd	r24, Y+19	; 0x13
    1298:	9c 89       	ldd	r25, Y+20	; 0x14
    129a:	98 8b       	std	Y+16, r25	; 0x10
    129c:	8f 87       	std	Y+15, r24	; 0x0f
    129e:	8f 85       	ldd	r24, Y+15	; 0x0f
    12a0:	98 89       	ldd	r25, Y+16	; 0x10
    12a2:	01 97       	sbiw	r24, 0x01	; 1
    12a4:	f1 f7       	brne	.-4      	; 0x12a2 <APP_doesTheUserHaveThePassword+0x132>
    12a6:	98 8b       	std	Y+16, r25	; 0x10
    12a8:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);
			return 1;
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	89 ab       	std	Y+49, r24	; 0x31
    12ae:	80 c0       	rjmp	.+256    	; 0x13b0 <APP_doesTheUserHaveThePassword+0x240>
		}
		LCD_clearScreen();
    12b0:	0e 94 14 19 	call	0x3228	; 0x3228 <LCD_clearScreen>
		LCD_displayString("the pass doesn't match");
    12b4:	89 e9       	ldi	r24, 0x99	; 153
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	0e 94 6d 18 	call	0x30da	; 0x30da <LCD_displayString>
		Loop_counter++;
    12bc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    12be:	8f 5f       	subi	r24, 0xFF	; 255
    12c0:	8e 8f       	std	Y+30, r24	; 0x1e
    12c2:	80 e0       	ldi	r24, 0x00	; 0
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	aa e7       	ldi	r26, 0x7A	; 122
    12c8:	b4 e4       	ldi	r27, 0x44	; 68
    12ca:	8b 87       	std	Y+11, r24	; 0x0b
    12cc:	9c 87       	std	Y+12, r25	; 0x0c
    12ce:	ad 87       	std	Y+13, r26	; 0x0d
    12d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    12d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    12d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    12d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    12da:	20 e0       	ldi	r18, 0x00	; 0
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	4a ef       	ldi	r20, 0xFA	; 250
    12e0:	54 e4       	ldi	r21, 0x44	; 68
    12e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12e6:	dc 01       	movw	r26, r24
    12e8:	cb 01       	movw	r24, r22
    12ea:	8f 83       	std	Y+7, r24	; 0x07
    12ec:	98 87       	std	Y+8, r25	; 0x08
    12ee:	a9 87       	std	Y+9, r26	; 0x09
    12f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12f2:	6f 81       	ldd	r22, Y+7	; 0x07
    12f4:	78 85       	ldd	r23, Y+8	; 0x08
    12f6:	89 85       	ldd	r24, Y+9	; 0x09
    12f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12fa:	20 e0       	ldi	r18, 0x00	; 0
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	40 e8       	ldi	r20, 0x80	; 128
    1300:	5f e3       	ldi	r21, 0x3F	; 63
    1302:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1306:	88 23       	and	r24, r24
    1308:	2c f4       	brge	.+10     	; 0x1314 <APP_doesTheUserHaveThePassword+0x1a4>
		__ticks = 1;
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	9e 83       	std	Y+6, r25	; 0x06
    1310:	8d 83       	std	Y+5, r24	; 0x05
    1312:	3f c0       	rjmp	.+126    	; 0x1392 <APP_doesTheUserHaveThePassword+0x222>
	else if (__tmp > 65535)
    1314:	6f 81       	ldd	r22, Y+7	; 0x07
    1316:	78 85       	ldd	r23, Y+8	; 0x08
    1318:	89 85       	ldd	r24, Y+9	; 0x09
    131a:	9a 85       	ldd	r25, Y+10	; 0x0a
    131c:	20 e0       	ldi	r18, 0x00	; 0
    131e:	3f ef       	ldi	r19, 0xFF	; 255
    1320:	4f e7       	ldi	r20, 0x7F	; 127
    1322:	57 e4       	ldi	r21, 0x47	; 71
    1324:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1328:	18 16       	cp	r1, r24
    132a:	4c f5       	brge	.+82     	; 0x137e <APP_doesTheUserHaveThePassword+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    132c:	6b 85       	ldd	r22, Y+11	; 0x0b
    132e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1330:	8d 85       	ldd	r24, Y+13	; 0x0d
    1332:	9e 85       	ldd	r25, Y+14	; 0x0e
    1334:	20 e0       	ldi	r18, 0x00	; 0
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	40 e2       	ldi	r20, 0x20	; 32
    133a:	51 e4       	ldi	r21, 0x41	; 65
    133c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1340:	dc 01       	movw	r26, r24
    1342:	cb 01       	movw	r24, r22
    1344:	bc 01       	movw	r22, r24
    1346:	cd 01       	movw	r24, r26
    1348:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    134c:	dc 01       	movw	r26, r24
    134e:	cb 01       	movw	r24, r22
    1350:	9e 83       	std	Y+6, r25	; 0x06
    1352:	8d 83       	std	Y+5, r24	; 0x05
    1354:	0f c0       	rjmp	.+30     	; 0x1374 <APP_doesTheUserHaveThePassword+0x204>
    1356:	88 ec       	ldi	r24, 0xC8	; 200
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	9c 83       	std	Y+4, r25	; 0x04
    135c:	8b 83       	std	Y+3, r24	; 0x03
    135e:	8b 81       	ldd	r24, Y+3	; 0x03
    1360:	9c 81       	ldd	r25, Y+4	; 0x04
    1362:	01 97       	sbiw	r24, 0x01	; 1
    1364:	f1 f7       	brne	.-4      	; 0x1362 <APP_doesTheUserHaveThePassword+0x1f2>
    1366:	9c 83       	std	Y+4, r25	; 0x04
    1368:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    136a:	8d 81       	ldd	r24, Y+5	; 0x05
    136c:	9e 81       	ldd	r25, Y+6	; 0x06
    136e:	01 97       	sbiw	r24, 0x01	; 1
    1370:	9e 83       	std	Y+6, r25	; 0x06
    1372:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1374:	8d 81       	ldd	r24, Y+5	; 0x05
    1376:	9e 81       	ldd	r25, Y+6	; 0x06
    1378:	00 97       	sbiw	r24, 0x00	; 0
    137a:	69 f7       	brne	.-38     	; 0x1356 <APP_doesTheUserHaveThePassword+0x1e6>
    137c:	14 c0       	rjmp	.+40     	; 0x13a6 <APP_doesTheUserHaveThePassword+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    137e:	6f 81       	ldd	r22, Y+7	; 0x07
    1380:	78 85       	ldd	r23, Y+8	; 0x08
    1382:	89 85       	ldd	r24, Y+9	; 0x09
    1384:	9a 85       	ldd	r25, Y+10	; 0x0a
    1386:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    138a:	dc 01       	movw	r26, r24
    138c:	cb 01       	movw	r24, r22
    138e:	9e 83       	std	Y+6, r25	; 0x06
    1390:	8d 83       	std	Y+5, r24	; 0x05
    1392:	8d 81       	ldd	r24, Y+5	; 0x05
    1394:	9e 81       	ldd	r25, Y+6	; 0x06
    1396:	9a 83       	std	Y+2, r25	; 0x02
    1398:	89 83       	std	Y+1, r24	; 0x01
    139a:	89 81       	ldd	r24, Y+1	; 0x01
    139c:	9a 81       	ldd	r25, Y+2	; 0x02
    139e:	01 97       	sbiw	r24, 0x01	; 1
    13a0:	f1 f7       	brne	.-4      	; 0x139e <APP_doesTheUserHaveThePassword+0x22e>
    13a2:	9a 83       	std	Y+2, r25	; 0x02
    13a4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);

	} while (Loop_counter < 3);
    13a6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13a8:	83 30       	cpi	r24, 0x03	; 3
    13aa:	08 f4       	brcc	.+2      	; 0x13ae <APP_doesTheUserHaveThePassword+0x23e>
    13ac:	f7 ce       	rjmp	.-530    	; 0x119c <APP_doesTheUserHaveThePassword+0x2c>

	/**
	 * password doesn't match for three times
	 * so the alarm should be turned on
	 */
	return 0;
    13ae:	19 aa       	std	Y+49, r1	; 0x31
    13b0:	89 a9       	ldd	r24, Y+49	; 0x31

}
    13b2:	e1 96       	adiw	r28, 0x31	; 49
    13b4:	0f b6       	in	r0, 0x3f	; 63
    13b6:	f8 94       	cli
    13b8:	de bf       	out	0x3e, r29	; 62
    13ba:	0f be       	out	0x3f, r0	; 63
    13bc:	cd bf       	out	0x3d, r28	; 61
    13be:	cf 91       	pop	r28
    13c0:	df 91       	pop	r29
    13c2:	08 95       	ret

000013c4 <APP_twoArrayMatch>:
uint8 APP_twoArrayMatch(uint8 *pass1, uint8 *pass2) {
    13c4:	df 93       	push	r29
    13c6:	cf 93       	push	r28
    13c8:	00 d0       	rcall	.+0      	; 0x13ca <APP_twoArrayMatch+0x6>
    13ca:	00 d0       	rcall	.+0      	; 0x13cc <APP_twoArrayMatch+0x8>
    13cc:	00 d0       	rcall	.+0      	; 0x13ce <APP_twoArrayMatch+0xa>
    13ce:	cd b7       	in	r28, 0x3d	; 61
    13d0:	de b7       	in	r29, 0x3e	; 62
    13d2:	9c 83       	std	Y+4, r25	; 0x04
    13d4:	8b 83       	std	Y+3, r24	; 0x03
    13d6:	7e 83       	std	Y+6, r23	; 0x06
    13d8:	6d 83       	std	Y+5, r22	; 0x05
	uint8 result = 1;
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	8a 83       	std	Y+2, r24	; 0x02
	for (uint8 Loop_counter = 0; Loop_counter < 8; Loop_counter++) {
    13de:	19 82       	std	Y+1, r1	; 0x01
    13e0:	18 c0       	rjmp	.+48     	; 0x1412 <APP_twoArrayMatch+0x4e>
		if (*(pass1 + Loop_counter) != *(pass2 + Loop_counter)) {
    13e2:	89 81       	ldd	r24, Y+1	; 0x01
    13e4:	28 2f       	mov	r18, r24
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ea:	9c 81       	ldd	r25, Y+4	; 0x04
    13ec:	fc 01       	movw	r30, r24
    13ee:	e2 0f       	add	r30, r18
    13f0:	f3 1f       	adc	r31, r19
    13f2:	40 81       	ld	r20, Z
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
    13f6:	28 2f       	mov	r18, r24
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	8d 81       	ldd	r24, Y+5	; 0x05
    13fc:	9e 81       	ldd	r25, Y+6	; 0x06
    13fe:	fc 01       	movw	r30, r24
    1400:	e2 0f       	add	r30, r18
    1402:	f3 1f       	adc	r31, r19
    1404:	80 81       	ld	r24, Z
    1406:	48 17       	cp	r20, r24
    1408:	09 f0       	breq	.+2      	; 0x140c <APP_twoArrayMatch+0x48>

			result = 0;
    140a:	1a 82       	std	Y+2, r1	; 0x02
	return 0;

}
uint8 APP_twoArrayMatch(uint8 *pass1, uint8 *pass2) {
	uint8 result = 1;
	for (uint8 Loop_counter = 0; Loop_counter < 8; Loop_counter++) {
    140c:	89 81       	ldd	r24, Y+1	; 0x01
    140e:	8f 5f       	subi	r24, 0xFF	; 255
    1410:	89 83       	std	Y+1, r24	; 0x01
    1412:	89 81       	ldd	r24, Y+1	; 0x01
    1414:	88 30       	cpi	r24, 0x08	; 8
    1416:	28 f3       	brcs	.-54     	; 0x13e2 <APP_twoArrayMatch+0x1e>

			result = 0;
		}

	}
	return result;
    1418:	8a 81       	ldd	r24, Y+2	; 0x02
}
    141a:	26 96       	adiw	r28, 0x06	; 6
    141c:	0f b6       	in	r0, 0x3f	; 63
    141e:	f8 94       	cli
    1420:	de bf       	out	0x3e, r29	; 62
    1422:	0f be       	out	0x3f, r0	; 63
    1424:	cd bf       	out	0x3d, r28	; 61
    1426:	cf 91       	pop	r28
    1428:	df 91       	pop	r29
    142a:	08 95       	ret

0000142c <APP_showOptionMenuGetAnswer>:

uint8 APP_showOptionMenuGetAnswer() {
    142c:	df 93       	push	r29
    142e:	cf 93       	push	r28
    1430:	0f 92       	push	r0
    1432:	cd b7       	in	r28, 0x3d	; 61
    1434:	de b7       	in	r29, 0x3e	; 62
	uint8 result;
	LCD_clearScreen();
    1436:	0e 94 14 19 	call	0x3228	; 0x3228 <LCD_clearScreen>
	LCD_displayString("1 To change Pass");
    143a:	86 e0       	ldi	r24, 0x06	; 6
    143c:	91 e0       	ldi	r25, 0x01	; 1
    143e:	0e 94 6d 18 	call	0x30da	; 0x30da <LCD_displayString>
	LCD_goToRowColumn(1, 0);
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	60 e0       	ldi	r22, 0x00	; 0
    1446:	0e 94 96 18 	call	0x312c	; 0x312c <LCD_goToRowColumn>
	LCD_displayString("2 To open the Door");
    144a:	87 e1       	ldi	r24, 0x17	; 23
    144c:	91 e0       	ldi	r25, 0x01	; 1
    144e:	0e 94 6d 18 	call	0x30da	; 0x30da <LCD_displayString>

	do {
		result = KeyPad_getPressedKey();
    1452:	0e 94 9b 05 	call	0xb36	; 0xb36 <KeyPad_getPressedKey>
    1456:	89 83       	std	Y+1, r24	; 0x01
	} while (result != 1 && result != 2);
    1458:	89 81       	ldd	r24, Y+1	; 0x01
    145a:	81 30       	cpi	r24, 0x01	; 1
    145c:	19 f0       	breq	.+6      	; 0x1464 <APP_showOptionMenuGetAnswer+0x38>
    145e:	89 81       	ldd	r24, Y+1	; 0x01
    1460:	82 30       	cpi	r24, 0x02	; 2
    1462:	b9 f7       	brne	.-18     	; 0x1452 <APP_showOptionMenuGetAnswer+0x26>

	return result;
    1464:	89 81       	ldd	r24, Y+1	; 0x01
}
    1466:	0f 90       	pop	r0
    1468:	cf 91       	pop	r28
    146a:	df 91       	pop	r29
    146c:	08 95       	ret

0000146e <APP_storePasswordQuary>:

void APP_storePasswordQuary(uint8 *ArrPtr) {
    146e:	df 93       	push	r29
    1470:	cf 93       	push	r28
    1472:	cd b7       	in	r28, 0x3d	; 61
    1474:	de b7       	in	r29, 0x3e	; 62
    1476:	60 97       	sbiw	r28, 0x10	; 16
    1478:	0f b6       	in	r0, 0x3f	; 63
    147a:	f8 94       	cli
    147c:	de bf       	out	0x3e, r29	; 62
    147e:	0f be       	out	0x3f, r0	; 63
    1480:	cd bf       	out	0x3d, r28	; 61
    1482:	98 8b       	std	Y+16, r25	; 0x10
    1484:	8f 87       	std	Y+15, r24	; 0x0f
	/**
	 * this for loop is to loop the 8 char of the password to be stored in the
	 */
	do {
		LCD_clearScreen();
    1486:	0e 94 14 19 	call	0x3228	; 0x3228 <LCD_clearScreen>
		LCD_displayString("store comand 1");
    148a:	8a e2       	ldi	r24, 0x2A	; 42
    148c:	91 e0       	ldi	r25, 0x01	; 1
    148e:	0e 94 6d 18 	call	0x30da	; 0x30da <LCD_displayString>
	UART_sendByte(PASSWORDSTOREQUARYCOMMMAND);
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <UART_sendByte>
	LCD_clearScreen();
    1498:	0e 94 14 19 	call	0x3228	; 0x3228 <LCD_clearScreen>
	LCD_displayString("store comand 2");
    149c:	89 e3       	ldi	r24, 0x39	; 57
    149e:	91 e0       	ldi	r25, 0x01	; 1
    14a0:	0e 94 6d 18 	call	0x30da	; 0x30da <LCD_displayString>
	}

	while(!UART_recieveByte());
    14a4:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <UART_recieveByte>
    14a8:	88 23       	and	r24, r24
    14aa:	69 f3       	breq	.-38     	; 0x1486 <APP_storePasswordQuary+0x18>
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	a8 e4       	ldi	r26, 0x48	; 72
    14b2:	b2 e4       	ldi	r27, 0x42	; 66
    14b4:	8b 87       	std	Y+11, r24	; 0x0b
    14b6:	9c 87       	std	Y+12, r25	; 0x0c
    14b8:	ad 87       	std	Y+13, r26	; 0x0d
    14ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    14be:	7c 85       	ldd	r23, Y+12	; 0x0c
    14c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    14c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    14c4:	20 e0       	ldi	r18, 0x00	; 0
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	4a ef       	ldi	r20, 0xFA	; 250
    14ca:	54 e4       	ldi	r21, 0x44	; 68
    14cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14d0:	dc 01       	movw	r26, r24
    14d2:	cb 01       	movw	r24, r22
    14d4:	8f 83       	std	Y+7, r24	; 0x07
    14d6:	98 87       	std	Y+8, r25	; 0x08
    14d8:	a9 87       	std	Y+9, r26	; 0x09
    14da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14dc:	6f 81       	ldd	r22, Y+7	; 0x07
    14de:	78 85       	ldd	r23, Y+8	; 0x08
    14e0:	89 85       	ldd	r24, Y+9	; 0x09
    14e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    14e4:	20 e0       	ldi	r18, 0x00	; 0
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	40 e8       	ldi	r20, 0x80	; 128
    14ea:	5f e3       	ldi	r21, 0x3F	; 63
    14ec:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    14f0:	88 23       	and	r24, r24
    14f2:	2c f4       	brge	.+10     	; 0x14fe <APP_storePasswordQuary+0x90>
		__ticks = 1;
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	9e 83       	std	Y+6, r25	; 0x06
    14fa:	8d 83       	std	Y+5, r24	; 0x05
    14fc:	3f c0       	rjmp	.+126    	; 0x157c <APP_storePasswordQuary+0x10e>
	else if (__tmp > 65535)
    14fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1500:	78 85       	ldd	r23, Y+8	; 0x08
    1502:	89 85       	ldd	r24, Y+9	; 0x09
    1504:	9a 85       	ldd	r25, Y+10	; 0x0a
    1506:	20 e0       	ldi	r18, 0x00	; 0
    1508:	3f ef       	ldi	r19, 0xFF	; 255
    150a:	4f e7       	ldi	r20, 0x7F	; 127
    150c:	57 e4       	ldi	r21, 0x47	; 71
    150e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1512:	18 16       	cp	r1, r24
    1514:	4c f5       	brge	.+82     	; 0x1568 <APP_storePasswordQuary+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1516:	6b 85       	ldd	r22, Y+11	; 0x0b
    1518:	7c 85       	ldd	r23, Y+12	; 0x0c
    151a:	8d 85       	ldd	r24, Y+13	; 0x0d
    151c:	9e 85       	ldd	r25, Y+14	; 0x0e
    151e:	20 e0       	ldi	r18, 0x00	; 0
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	40 e2       	ldi	r20, 0x20	; 32
    1524:	51 e4       	ldi	r21, 0x41	; 65
    1526:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    152a:	dc 01       	movw	r26, r24
    152c:	cb 01       	movw	r24, r22
    152e:	bc 01       	movw	r22, r24
    1530:	cd 01       	movw	r24, r26
    1532:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1536:	dc 01       	movw	r26, r24
    1538:	cb 01       	movw	r24, r22
    153a:	9e 83       	std	Y+6, r25	; 0x06
    153c:	8d 83       	std	Y+5, r24	; 0x05
    153e:	0f c0       	rjmp	.+30     	; 0x155e <APP_storePasswordQuary+0xf0>
    1540:	88 ec       	ldi	r24, 0xC8	; 200
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	9c 83       	std	Y+4, r25	; 0x04
    1546:	8b 83       	std	Y+3, r24	; 0x03
    1548:	8b 81       	ldd	r24, Y+3	; 0x03
    154a:	9c 81       	ldd	r25, Y+4	; 0x04
    154c:	01 97       	sbiw	r24, 0x01	; 1
    154e:	f1 f7       	brne	.-4      	; 0x154c <APP_storePasswordQuary+0xde>
    1550:	9c 83       	std	Y+4, r25	; 0x04
    1552:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1554:	8d 81       	ldd	r24, Y+5	; 0x05
    1556:	9e 81       	ldd	r25, Y+6	; 0x06
    1558:	01 97       	sbiw	r24, 0x01	; 1
    155a:	9e 83       	std	Y+6, r25	; 0x06
    155c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    155e:	8d 81       	ldd	r24, Y+5	; 0x05
    1560:	9e 81       	ldd	r25, Y+6	; 0x06
    1562:	00 97       	sbiw	r24, 0x00	; 0
    1564:	69 f7       	brne	.-38     	; 0x1540 <APP_storePasswordQuary+0xd2>
    1566:	14 c0       	rjmp	.+40     	; 0x1590 <APP_storePasswordQuary+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1568:	6f 81       	ldd	r22, Y+7	; 0x07
    156a:	78 85       	ldd	r23, Y+8	; 0x08
    156c:	89 85       	ldd	r24, Y+9	; 0x09
    156e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1570:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1574:	dc 01       	movw	r26, r24
    1576:	cb 01       	movw	r24, r22
    1578:	9e 83       	std	Y+6, r25	; 0x06
    157a:	8d 83       	std	Y+5, r24	; 0x05
    157c:	8d 81       	ldd	r24, Y+5	; 0x05
    157e:	9e 81       	ldd	r25, Y+6	; 0x06
    1580:	9a 83       	std	Y+2, r25	; 0x02
    1582:	89 83       	std	Y+1, r24	; 0x01
    1584:	89 81       	ldd	r24, Y+1	; 0x01
    1586:	9a 81       	ldd	r25, Y+2	; 0x02
    1588:	01 97       	sbiw	r24, 0x01	; 1
    158a:	f1 f7       	brne	.-4      	; 0x1588 <APP_storePasswordQuary+0x11a>
    158c:	9a 83       	std	Y+2, r25	; 0x02
    158e:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(50);
	UART_sendString(ArrPtr);
    1590:	8f 85       	ldd	r24, Y+15	; 0x0f
    1592:	98 89       	ldd	r25, Y+16	; 0x10
    1594:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <UART_sendString>


}
    1598:	60 96       	adiw	r28, 0x10	; 16
    159a:	0f b6       	in	r0, 0x3f	; 63
    159c:	f8 94       	cli
    159e:	de bf       	out	0x3e, r29	; 62
    15a0:	0f be       	out	0x3f, r0	; 63
    15a2:	cd bf       	out	0x3d, r28	; 61
    15a4:	cf 91       	pop	r28
    15a6:	df 91       	pop	r29
    15a8:	08 95       	ret

000015aa <APP_passwordIsSetSetFlageQuary>:

void APP_passwordIsSetSetFlageQuary() {
    15aa:	df 93       	push	r29
    15ac:	cf 93       	push	r28
    15ae:	cd b7       	in	r28, 0x3d	; 61
    15b0:	de b7       	in	r29, 0x3e	; 62


	UART_sendByte(PASSWORDSETFLAGQUARYCOMMMAND);
    15b2:	82 e0       	ldi	r24, 0x02	; 2
    15b4:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <UART_sendByte>
	/**
	 * ERORR

	EEPROM_Write_Byte(PASSWORD_FLAG_LOCATION, PASSWORD_IS_SET);
*/
}
    15b8:	cf 91       	pop	r28
    15ba:	df 91       	pop	r29
    15bc:	08 95       	ret

000015be <APP_alarmInit>:
 As an output Arg, this Argshall indicate a_functionArgDescription4
 [Returns] :${return_type}
 This return shall indicate var_func_returnt_description
 ---------------------------------------------------------------------------------------------------------------*/

void APP_alarmInit() {
    15be:	df 93       	push	r29
    15c0:	cf 93       	push	r28
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62
	DDRB = 0xFF;
    15c6:	e7 e3       	ldi	r30, 0x37	; 55
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	8f ef       	ldi	r24, 0xFF	; 255
    15cc:	80 83       	st	Z, r24

}
    15ce:	cf 91       	pop	r28
    15d0:	df 91       	pop	r29
    15d2:	08 95       	ret

000015d4 <APP_alarmTurnOn>:
void APP_alarmTurnOn() {
    15d4:	df 93       	push	r29
    15d6:	cf 93       	push	r28
    15d8:	cd b7       	in	r28, 0x3d	; 61
    15da:	de b7       	in	r29, 0x3e	; 62
    15dc:	6d 97       	sbiw	r28, 0x1d	; 29
    15de:	0f b6       	in	r0, 0x3f	; 63
    15e0:	f8 94       	cli
    15e2:	de bf       	out	0x3e, r29	; 62
    15e4:	0f be       	out	0x3f, r0	; 63
    15e6:	cd bf       	out	0x3d, r28	; 61



	UART_sendByte(GETCURRENTPASSQUARYCOMMMAND);
    15e8:	83 e0       	ldi	r24, 0x03	; 3
    15ea:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <UART_sendByte>
	LCD_clearScreen();
    15ee:	0e 94 14 19 	call	0x3228	; 0x3228 <LCD_clearScreen>
	LCD_displayString("ALARM IS ON");
    15f2:	88 e4       	ldi	r24, 0x48	; 72
    15f4:	91 e0       	ldi	r25, 0x01	; 1
    15f6:	0e 94 6d 18 	call	0x30da	; 0x30da <LCD_displayString>
	for (uint8 var = 0; var < 100; ++var) {
    15fa:	1d 8e       	std	Y+29, r1	; 0x1d
    15fc:	e7 c0       	rjmp	.+462    	; 0x17cc <APP_alarmTurnOn+0x1f8>
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	a0 ee       	ldi	r26, 0xE0	; 224
    1604:	b0 e4       	ldi	r27, 0x40	; 64
    1606:	89 8f       	std	Y+25, r24	; 0x19
    1608:	9a 8f       	std	Y+26, r25	; 0x1a
    160a:	ab 8f       	std	Y+27, r26	; 0x1b
    160c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    160e:	69 8d       	ldd	r22, Y+25	; 0x19
    1610:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1612:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1614:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1616:	20 e0       	ldi	r18, 0x00	; 0
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	4a ef       	ldi	r20, 0xFA	; 250
    161c:	54 e4       	ldi	r21, 0x44	; 68
    161e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1622:	dc 01       	movw	r26, r24
    1624:	cb 01       	movw	r24, r22
    1626:	8d 8b       	std	Y+21, r24	; 0x15
    1628:	9e 8b       	std	Y+22, r25	; 0x16
    162a:	af 8b       	std	Y+23, r26	; 0x17
    162c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    162e:	6d 89       	ldd	r22, Y+21	; 0x15
    1630:	7e 89       	ldd	r23, Y+22	; 0x16
    1632:	8f 89       	ldd	r24, Y+23	; 0x17
    1634:	98 8d       	ldd	r25, Y+24	; 0x18
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	40 e8       	ldi	r20, 0x80	; 128
    163c:	5f e3       	ldi	r21, 0x3F	; 63
    163e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1642:	88 23       	and	r24, r24
    1644:	2c f4       	brge	.+10     	; 0x1650 <APP_alarmTurnOn+0x7c>
		__ticks = 1;
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	9c 8b       	std	Y+20, r25	; 0x14
    164c:	8b 8b       	std	Y+19, r24	; 0x13
    164e:	3f c0       	rjmp	.+126    	; 0x16ce <APP_alarmTurnOn+0xfa>
	else if (__tmp > 65535)
    1650:	6d 89       	ldd	r22, Y+21	; 0x15
    1652:	7e 89       	ldd	r23, Y+22	; 0x16
    1654:	8f 89       	ldd	r24, Y+23	; 0x17
    1656:	98 8d       	ldd	r25, Y+24	; 0x18
    1658:	20 e0       	ldi	r18, 0x00	; 0
    165a:	3f ef       	ldi	r19, 0xFF	; 255
    165c:	4f e7       	ldi	r20, 0x7F	; 127
    165e:	57 e4       	ldi	r21, 0x47	; 71
    1660:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1664:	18 16       	cp	r1, r24
    1666:	4c f5       	brge	.+82     	; 0x16ba <APP_alarmTurnOn+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1668:	69 8d       	ldd	r22, Y+25	; 0x19
    166a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    166c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    166e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1670:	20 e0       	ldi	r18, 0x00	; 0
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	40 e2       	ldi	r20, 0x20	; 32
    1676:	51 e4       	ldi	r21, 0x41	; 65
    1678:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    167c:	dc 01       	movw	r26, r24
    167e:	cb 01       	movw	r24, r22
    1680:	bc 01       	movw	r22, r24
    1682:	cd 01       	movw	r24, r26
    1684:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1688:	dc 01       	movw	r26, r24
    168a:	cb 01       	movw	r24, r22
    168c:	9c 8b       	std	Y+20, r25	; 0x14
    168e:	8b 8b       	std	Y+19, r24	; 0x13
    1690:	0f c0       	rjmp	.+30     	; 0x16b0 <APP_alarmTurnOn+0xdc>
    1692:	88 ec       	ldi	r24, 0xC8	; 200
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	9a 8b       	std	Y+18, r25	; 0x12
    1698:	89 8b       	std	Y+17, r24	; 0x11
    169a:	89 89       	ldd	r24, Y+17	; 0x11
    169c:	9a 89       	ldd	r25, Y+18	; 0x12
    169e:	01 97       	sbiw	r24, 0x01	; 1
    16a0:	f1 f7       	brne	.-4      	; 0x169e <APP_alarmTurnOn+0xca>
    16a2:	9a 8b       	std	Y+18, r25	; 0x12
    16a4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16a6:	8b 89       	ldd	r24, Y+19	; 0x13
    16a8:	9c 89       	ldd	r25, Y+20	; 0x14
    16aa:	01 97       	sbiw	r24, 0x01	; 1
    16ac:	9c 8b       	std	Y+20, r25	; 0x14
    16ae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16b0:	8b 89       	ldd	r24, Y+19	; 0x13
    16b2:	9c 89       	ldd	r25, Y+20	; 0x14
    16b4:	00 97       	sbiw	r24, 0x00	; 0
    16b6:	69 f7       	brne	.-38     	; 0x1692 <APP_alarmTurnOn+0xbe>
    16b8:	14 c0       	rjmp	.+40     	; 0x16e2 <APP_alarmTurnOn+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ba:	6d 89       	ldd	r22, Y+21	; 0x15
    16bc:	7e 89       	ldd	r23, Y+22	; 0x16
    16be:	8f 89       	ldd	r24, Y+23	; 0x17
    16c0:	98 8d       	ldd	r25, Y+24	; 0x18
    16c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16c6:	dc 01       	movw	r26, r24
    16c8:	cb 01       	movw	r24, r22
    16ca:	9c 8b       	std	Y+20, r25	; 0x14
    16cc:	8b 8b       	std	Y+19, r24	; 0x13
    16ce:	8b 89       	ldd	r24, Y+19	; 0x13
    16d0:	9c 89       	ldd	r25, Y+20	; 0x14
    16d2:	98 8b       	std	Y+16, r25	; 0x10
    16d4:	8f 87       	std	Y+15, r24	; 0x0f
    16d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    16d8:	98 89       	ldd	r25, Y+16	; 0x10
    16da:	01 97       	sbiw	r24, 0x01	; 1
    16dc:	f1 f7       	brne	.-4      	; 0x16da <APP_alarmTurnOn+0x106>
    16de:	98 8b       	std	Y+16, r25	; 0x10
    16e0:	8f 87       	std	Y+15, r24	; 0x0f
    16e2:	80 e0       	ldi	r24, 0x00	; 0
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	a0 ee       	ldi	r26, 0xE0	; 224
    16e8:	b0 e4       	ldi	r27, 0x40	; 64
    16ea:	8b 87       	std	Y+11, r24	; 0x0b
    16ec:	9c 87       	std	Y+12, r25	; 0x0c
    16ee:	ad 87       	std	Y+13, r26	; 0x0d
    16f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    16f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    16f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    16f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	4a ef       	ldi	r20, 0xFA	; 250
    1700:	54 e4       	ldi	r21, 0x44	; 68
    1702:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1706:	dc 01       	movw	r26, r24
    1708:	cb 01       	movw	r24, r22
    170a:	8f 83       	std	Y+7, r24	; 0x07
    170c:	98 87       	std	Y+8, r25	; 0x08
    170e:	a9 87       	std	Y+9, r26	; 0x09
    1710:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1712:	6f 81       	ldd	r22, Y+7	; 0x07
    1714:	78 85       	ldd	r23, Y+8	; 0x08
    1716:	89 85       	ldd	r24, Y+9	; 0x09
    1718:	9a 85       	ldd	r25, Y+10	; 0x0a
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	40 e8       	ldi	r20, 0x80	; 128
    1720:	5f e3       	ldi	r21, 0x3F	; 63
    1722:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1726:	88 23       	and	r24, r24
    1728:	2c f4       	brge	.+10     	; 0x1734 <APP_alarmTurnOn+0x160>
		__ticks = 1;
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	9e 83       	std	Y+6, r25	; 0x06
    1730:	8d 83       	std	Y+5, r24	; 0x05
    1732:	3f c0       	rjmp	.+126    	; 0x17b2 <APP_alarmTurnOn+0x1de>
	else if (__tmp > 65535)
    1734:	6f 81       	ldd	r22, Y+7	; 0x07
    1736:	78 85       	ldd	r23, Y+8	; 0x08
    1738:	89 85       	ldd	r24, Y+9	; 0x09
    173a:	9a 85       	ldd	r25, Y+10	; 0x0a
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	3f ef       	ldi	r19, 0xFF	; 255
    1740:	4f e7       	ldi	r20, 0x7F	; 127
    1742:	57 e4       	ldi	r21, 0x47	; 71
    1744:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1748:	18 16       	cp	r1, r24
    174a:	4c f5       	brge	.+82     	; 0x179e <APP_alarmTurnOn+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    174c:	6b 85       	ldd	r22, Y+11	; 0x0b
    174e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1750:	8d 85       	ldd	r24, Y+13	; 0x0d
    1752:	9e 85       	ldd	r25, Y+14	; 0x0e
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	40 e2       	ldi	r20, 0x20	; 32
    175a:	51 e4       	ldi	r21, 0x41	; 65
    175c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1760:	dc 01       	movw	r26, r24
    1762:	cb 01       	movw	r24, r22
    1764:	bc 01       	movw	r22, r24
    1766:	cd 01       	movw	r24, r26
    1768:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    176c:	dc 01       	movw	r26, r24
    176e:	cb 01       	movw	r24, r22
    1770:	9e 83       	std	Y+6, r25	; 0x06
    1772:	8d 83       	std	Y+5, r24	; 0x05
    1774:	0f c0       	rjmp	.+30     	; 0x1794 <APP_alarmTurnOn+0x1c0>
    1776:	88 ec       	ldi	r24, 0xC8	; 200
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	9c 83       	std	Y+4, r25	; 0x04
    177c:	8b 83       	std	Y+3, r24	; 0x03
    177e:	8b 81       	ldd	r24, Y+3	; 0x03
    1780:	9c 81       	ldd	r25, Y+4	; 0x04
    1782:	01 97       	sbiw	r24, 0x01	; 1
    1784:	f1 f7       	brne	.-4      	; 0x1782 <APP_alarmTurnOn+0x1ae>
    1786:	9c 83       	std	Y+4, r25	; 0x04
    1788:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    178a:	8d 81       	ldd	r24, Y+5	; 0x05
    178c:	9e 81       	ldd	r25, Y+6	; 0x06
    178e:	01 97       	sbiw	r24, 0x01	; 1
    1790:	9e 83       	std	Y+6, r25	; 0x06
    1792:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1794:	8d 81       	ldd	r24, Y+5	; 0x05
    1796:	9e 81       	ldd	r25, Y+6	; 0x06
    1798:	00 97       	sbiw	r24, 0x00	; 0
    179a:	69 f7       	brne	.-38     	; 0x1776 <APP_alarmTurnOn+0x1a2>
    179c:	14 c0       	rjmp	.+40     	; 0x17c6 <APP_alarmTurnOn+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    179e:	6f 81       	ldd	r22, Y+7	; 0x07
    17a0:	78 85       	ldd	r23, Y+8	; 0x08
    17a2:	89 85       	ldd	r24, Y+9	; 0x09
    17a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17aa:	dc 01       	movw	r26, r24
    17ac:	cb 01       	movw	r24, r22
    17ae:	9e 83       	std	Y+6, r25	; 0x06
    17b0:	8d 83       	std	Y+5, r24	; 0x05
    17b2:	8d 81       	ldd	r24, Y+5	; 0x05
    17b4:	9e 81       	ldd	r25, Y+6	; 0x06
    17b6:	9a 83       	std	Y+2, r25	; 0x02
    17b8:	89 83       	std	Y+1, r24	; 0x01
    17ba:	89 81       	ldd	r24, Y+1	; 0x01
    17bc:	9a 81       	ldd	r25, Y+2	; 0x02
    17be:	01 97       	sbiw	r24, 0x01	; 1
    17c0:	f1 f7       	brne	.-4      	; 0x17be <APP_alarmTurnOn+0x1ea>
    17c2:	9a 83       	std	Y+2, r25	; 0x02
    17c4:	89 83       	std	Y+1, r24	; 0x01
    17c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17c8:	8f 5f       	subi	r24, 0xFF	; 255
    17ca:	8d 8f       	std	Y+29, r24	; 0x1d
    17cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17ce:	84 36       	cpi	r24, 0x64	; 100
    17d0:	08 f4       	brcc	.+2      	; 0x17d4 <APP_alarmTurnOn+0x200>
    17d2:	15 cf       	rjmp	.-470    	; 0x15fe <APP_alarmTurnOn+0x2a>
			_delay_ms(7);

			_delay_ms(7);
		}

		LCD_clearScreen();
    17d4:	0e 94 14 19 	call	0x3228	; 0x3228 <LCD_clearScreen>
		LCD_displayString("ALARM IS OFF");
    17d8:	84 e5       	ldi	r24, 0x54	; 84
    17da:	91 e0       	ldi	r25, 0x01	; 1
    17dc:	0e 94 6d 18 	call	0x30da	; 0x30da <LCD_displayString>
	}

	LCD_clearScreen();
	LCD_displayString("ALARM IS OFF");
*/
}
    17e0:	6d 96       	adiw	r28, 0x1d	; 29
    17e2:	0f b6       	in	r0, 0x3f	; 63
    17e4:	f8 94       	cli
    17e6:	de bf       	out	0x3e, r29	; 62
    17e8:	0f be       	out	0x3f, r0	; 63
    17ea:	cd bf       	out	0x3d, r28	; 61
    17ec:	cf 91       	pop	r28
    17ee:	df 91       	pop	r29
    17f0:	08 95       	ret

000017f2 <APP_openTheDoor>:
 As an input Arg, this Argshall indicate a_functionArgDescription3
 As an output Arg, this Argshall indicate a_functionArgDescription4
 [Returns] :${return_type}
 This return shall indicate var_func_returnt_description
 ---------------------------------------------------------------------------------------------------------------*/
void APP_openTheDoor() {
    17f2:	df 93       	push	r29
    17f4:	cf 93       	push	r28
    17f6:	cd b7       	in	r28, 0x3d	; 61
    17f8:	de b7       	in	r29, 0x3e	; 62
    17fa:	2e 97       	sbiw	r28, 0x0e	; 14
    17fc:	0f b6       	in	r0, 0x3f	; 63
    17fe:	f8 94       	cli
    1800:	de bf       	out	0x3e, r29	; 62
    1802:	0f be       	out	0x3f, r0	; 63
    1804:	cd bf       	out	0x3d, r28	; 61
	UART_sendByte(OPENDOORCOMAND);
    1806:	85 e0       	ldi	r24, 0x05	; 5
    1808:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <UART_sendByte>
	LCD_clearScreen();
    180c:	0e 94 14 19 	call	0x3228	; 0x3228 <LCD_clearScreen>
	LCD_displayString("door is opened");
    1810:	81 e6       	ldi	r24, 0x61	; 97
    1812:	91 e0       	ldi	r25, 0x01	; 1
    1814:	0e 94 6d 18 	call	0x30da	; 0x30da <LCD_displayString>
    1818:	80 e0       	ldi	r24, 0x00	; 0
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	aa e7       	ldi	r26, 0x7A	; 122
    181e:	b4 e4       	ldi	r27, 0x44	; 68
    1820:	8b 87       	std	Y+11, r24	; 0x0b
    1822:	9c 87       	std	Y+12, r25	; 0x0c
    1824:	ad 87       	std	Y+13, r26	; 0x0d
    1826:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1828:	6b 85       	ldd	r22, Y+11	; 0x0b
    182a:	7c 85       	ldd	r23, Y+12	; 0x0c
    182c:	8d 85       	ldd	r24, Y+13	; 0x0d
    182e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1830:	20 e0       	ldi	r18, 0x00	; 0
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	4a ef       	ldi	r20, 0xFA	; 250
    1836:	54 e4       	ldi	r21, 0x44	; 68
    1838:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    183c:	dc 01       	movw	r26, r24
    183e:	cb 01       	movw	r24, r22
    1840:	8f 83       	std	Y+7, r24	; 0x07
    1842:	98 87       	std	Y+8, r25	; 0x08
    1844:	a9 87       	std	Y+9, r26	; 0x09
    1846:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1848:	6f 81       	ldd	r22, Y+7	; 0x07
    184a:	78 85       	ldd	r23, Y+8	; 0x08
    184c:	89 85       	ldd	r24, Y+9	; 0x09
    184e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	40 e8       	ldi	r20, 0x80	; 128
    1856:	5f e3       	ldi	r21, 0x3F	; 63
    1858:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    185c:	88 23       	and	r24, r24
    185e:	2c f4       	brge	.+10     	; 0x186a <APP_openTheDoor+0x78>
		__ticks = 1;
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	9e 83       	std	Y+6, r25	; 0x06
    1866:	8d 83       	std	Y+5, r24	; 0x05
    1868:	3f c0       	rjmp	.+126    	; 0x18e8 <APP_openTheDoor+0xf6>
	else if (__tmp > 65535)
    186a:	6f 81       	ldd	r22, Y+7	; 0x07
    186c:	78 85       	ldd	r23, Y+8	; 0x08
    186e:	89 85       	ldd	r24, Y+9	; 0x09
    1870:	9a 85       	ldd	r25, Y+10	; 0x0a
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	3f ef       	ldi	r19, 0xFF	; 255
    1876:	4f e7       	ldi	r20, 0x7F	; 127
    1878:	57 e4       	ldi	r21, 0x47	; 71
    187a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    187e:	18 16       	cp	r1, r24
    1880:	4c f5       	brge	.+82     	; 0x18d4 <APP_openTheDoor+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1882:	6b 85       	ldd	r22, Y+11	; 0x0b
    1884:	7c 85       	ldd	r23, Y+12	; 0x0c
    1886:	8d 85       	ldd	r24, Y+13	; 0x0d
    1888:	9e 85       	ldd	r25, Y+14	; 0x0e
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	40 e2       	ldi	r20, 0x20	; 32
    1890:	51 e4       	ldi	r21, 0x41	; 65
    1892:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1896:	dc 01       	movw	r26, r24
    1898:	cb 01       	movw	r24, r22
    189a:	bc 01       	movw	r22, r24
    189c:	cd 01       	movw	r24, r26
    189e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18a2:	dc 01       	movw	r26, r24
    18a4:	cb 01       	movw	r24, r22
    18a6:	9e 83       	std	Y+6, r25	; 0x06
    18a8:	8d 83       	std	Y+5, r24	; 0x05
    18aa:	0f c0       	rjmp	.+30     	; 0x18ca <APP_openTheDoor+0xd8>
    18ac:	88 ec       	ldi	r24, 0xC8	; 200
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	9c 83       	std	Y+4, r25	; 0x04
    18b2:	8b 83       	std	Y+3, r24	; 0x03
    18b4:	8b 81       	ldd	r24, Y+3	; 0x03
    18b6:	9c 81       	ldd	r25, Y+4	; 0x04
    18b8:	01 97       	sbiw	r24, 0x01	; 1
    18ba:	f1 f7       	brne	.-4      	; 0x18b8 <APP_openTheDoor+0xc6>
    18bc:	9c 83       	std	Y+4, r25	; 0x04
    18be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18c0:	8d 81       	ldd	r24, Y+5	; 0x05
    18c2:	9e 81       	ldd	r25, Y+6	; 0x06
    18c4:	01 97       	sbiw	r24, 0x01	; 1
    18c6:	9e 83       	std	Y+6, r25	; 0x06
    18c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ca:	8d 81       	ldd	r24, Y+5	; 0x05
    18cc:	9e 81       	ldd	r25, Y+6	; 0x06
    18ce:	00 97       	sbiw	r24, 0x00	; 0
    18d0:	69 f7       	brne	.-38     	; 0x18ac <APP_openTheDoor+0xba>
    18d2:	14 c0       	rjmp	.+40     	; 0x18fc <APP_openTheDoor+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18d4:	6f 81       	ldd	r22, Y+7	; 0x07
    18d6:	78 85       	ldd	r23, Y+8	; 0x08
    18d8:	89 85       	ldd	r24, Y+9	; 0x09
    18da:	9a 85       	ldd	r25, Y+10	; 0x0a
    18dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18e0:	dc 01       	movw	r26, r24
    18e2:	cb 01       	movw	r24, r22
    18e4:	9e 83       	std	Y+6, r25	; 0x06
    18e6:	8d 83       	std	Y+5, r24	; 0x05
    18e8:	8d 81       	ldd	r24, Y+5	; 0x05
    18ea:	9e 81       	ldd	r25, Y+6	; 0x06
    18ec:	9a 83       	std	Y+2, r25	; 0x02
    18ee:	89 83       	std	Y+1, r24	; 0x01
    18f0:	89 81       	ldd	r24, Y+1	; 0x01
    18f2:	9a 81       	ldd	r25, Y+2	; 0x02
    18f4:	01 97       	sbiw	r24, 0x01	; 1
    18f6:	f1 f7       	brne	.-4      	; 0x18f4 <APP_openTheDoor+0x102>
    18f8:	9a 83       	std	Y+2, r25	; 0x02
    18fa:	89 83       	std	Y+1, r24	; 0x01
	CLEAR_BIT(PORTB, PB2);
	_delay_ms(1000);
	CLEAR_BIT(PORTB, PB1);
*/

}
    18fc:	2e 96       	adiw	r28, 0x0e	; 14
    18fe:	0f b6       	in	r0, 0x3f	; 63
    1900:	f8 94       	cli
    1902:	de bf       	out	0x3e, r29	; 62
    1904:	0f be       	out	0x3f, r0	; 63
    1906:	cd bf       	out	0x3d, r28	; 61
    1908:	cf 91       	pop	r28
    190a:	df 91       	pop	r29
    190c:	08 95       	ret

0000190e <APP_closeTheDoor>:

void APP_closeTheDoor() {
    190e:	df 93       	push	r29
    1910:	cf 93       	push	r28
    1912:	cd b7       	in	r28, 0x3d	; 61
    1914:	de b7       	in	r29, 0x3e	; 62
    1916:	6c 97       	sbiw	r28, 0x1c	; 28
    1918:	0f b6       	in	r0, 0x3f	; 63
    191a:	f8 94       	cli
    191c:	de bf       	out	0x3e, r29	; 62
    191e:	0f be       	out	0x3f, r0	; 63
    1920:	cd bf       	out	0x3d, r28	; 61

	UART_sendByte(CLOSEDOORCOMAND);
    1922:	86 e0       	ldi	r24, 0x06	; 6
    1924:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <UART_sendByte>
	LCD_clearScreen();
    1928:	0e 94 14 19 	call	0x3228	; 0x3228 <LCD_clearScreen>
	LCD_displayString("door is Closed");
    192c:	80 e7       	ldi	r24, 0x70	; 112
    192e:	91 e0       	ldi	r25, 0x01	; 1
    1930:	0e 94 6d 18 	call	0x30da	; 0x30da <LCD_displayString>
    1934:	80 e0       	ldi	r24, 0x00	; 0
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	aa e7       	ldi	r26, 0x7A	; 122
    193a:	b4 e4       	ldi	r27, 0x44	; 68
    193c:	89 8f       	std	Y+25, r24	; 0x19
    193e:	9a 8f       	std	Y+26, r25	; 0x1a
    1940:	ab 8f       	std	Y+27, r26	; 0x1b
    1942:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1944:	69 8d       	ldd	r22, Y+25	; 0x19
    1946:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1948:	8b 8d       	ldd	r24, Y+27	; 0x1b
    194a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    194c:	20 e0       	ldi	r18, 0x00	; 0
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	4a ef       	ldi	r20, 0xFA	; 250
    1952:	54 e4       	ldi	r21, 0x44	; 68
    1954:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1958:	dc 01       	movw	r26, r24
    195a:	cb 01       	movw	r24, r22
    195c:	8d 8b       	std	Y+21, r24	; 0x15
    195e:	9e 8b       	std	Y+22, r25	; 0x16
    1960:	af 8b       	std	Y+23, r26	; 0x17
    1962:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1964:	6d 89       	ldd	r22, Y+21	; 0x15
    1966:	7e 89       	ldd	r23, Y+22	; 0x16
    1968:	8f 89       	ldd	r24, Y+23	; 0x17
    196a:	98 8d       	ldd	r25, Y+24	; 0x18
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	40 e8       	ldi	r20, 0x80	; 128
    1972:	5f e3       	ldi	r21, 0x3F	; 63
    1974:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1978:	88 23       	and	r24, r24
    197a:	2c f4       	brge	.+10     	; 0x1986 <APP_closeTheDoor+0x78>
		__ticks = 1;
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	9c 8b       	std	Y+20, r25	; 0x14
    1982:	8b 8b       	std	Y+19, r24	; 0x13
    1984:	3f c0       	rjmp	.+126    	; 0x1a04 <APP_closeTheDoor+0xf6>
	else if (__tmp > 65535)
    1986:	6d 89       	ldd	r22, Y+21	; 0x15
    1988:	7e 89       	ldd	r23, Y+22	; 0x16
    198a:	8f 89       	ldd	r24, Y+23	; 0x17
    198c:	98 8d       	ldd	r25, Y+24	; 0x18
    198e:	20 e0       	ldi	r18, 0x00	; 0
    1990:	3f ef       	ldi	r19, 0xFF	; 255
    1992:	4f e7       	ldi	r20, 0x7F	; 127
    1994:	57 e4       	ldi	r21, 0x47	; 71
    1996:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    199a:	18 16       	cp	r1, r24
    199c:	4c f5       	brge	.+82     	; 0x19f0 <APP_closeTheDoor+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    199e:	69 8d       	ldd	r22, Y+25	; 0x19
    19a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19a6:	20 e0       	ldi	r18, 0x00	; 0
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	40 e2       	ldi	r20, 0x20	; 32
    19ac:	51 e4       	ldi	r21, 0x41	; 65
    19ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19b2:	dc 01       	movw	r26, r24
    19b4:	cb 01       	movw	r24, r22
    19b6:	bc 01       	movw	r22, r24
    19b8:	cd 01       	movw	r24, r26
    19ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19be:	dc 01       	movw	r26, r24
    19c0:	cb 01       	movw	r24, r22
    19c2:	9c 8b       	std	Y+20, r25	; 0x14
    19c4:	8b 8b       	std	Y+19, r24	; 0x13
    19c6:	0f c0       	rjmp	.+30     	; 0x19e6 <APP_closeTheDoor+0xd8>
    19c8:	88 ec       	ldi	r24, 0xC8	; 200
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	9a 8b       	std	Y+18, r25	; 0x12
    19ce:	89 8b       	std	Y+17, r24	; 0x11
    19d0:	89 89       	ldd	r24, Y+17	; 0x11
    19d2:	9a 89       	ldd	r25, Y+18	; 0x12
    19d4:	01 97       	sbiw	r24, 0x01	; 1
    19d6:	f1 f7       	brne	.-4      	; 0x19d4 <APP_closeTheDoor+0xc6>
    19d8:	9a 8b       	std	Y+18, r25	; 0x12
    19da:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19dc:	8b 89       	ldd	r24, Y+19	; 0x13
    19de:	9c 89       	ldd	r25, Y+20	; 0x14
    19e0:	01 97       	sbiw	r24, 0x01	; 1
    19e2:	9c 8b       	std	Y+20, r25	; 0x14
    19e4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e6:	8b 89       	ldd	r24, Y+19	; 0x13
    19e8:	9c 89       	ldd	r25, Y+20	; 0x14
    19ea:	00 97       	sbiw	r24, 0x00	; 0
    19ec:	69 f7       	brne	.-38     	; 0x19c8 <APP_closeTheDoor+0xba>
    19ee:	14 c0       	rjmp	.+40     	; 0x1a18 <APP_closeTheDoor+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19f0:	6d 89       	ldd	r22, Y+21	; 0x15
    19f2:	7e 89       	ldd	r23, Y+22	; 0x16
    19f4:	8f 89       	ldd	r24, Y+23	; 0x17
    19f6:	98 8d       	ldd	r25, Y+24	; 0x18
    19f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19fc:	dc 01       	movw	r26, r24
    19fe:	cb 01       	movw	r24, r22
    1a00:	9c 8b       	std	Y+20, r25	; 0x14
    1a02:	8b 8b       	std	Y+19, r24	; 0x13
    1a04:	8b 89       	ldd	r24, Y+19	; 0x13
    1a06:	9c 89       	ldd	r25, Y+20	; 0x14
    1a08:	98 8b       	std	Y+16, r25	; 0x10
    1a0a:	8f 87       	std	Y+15, r24	; 0x0f
    1a0c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a0e:	98 89       	ldd	r25, Y+16	; 0x10
    1a10:	01 97       	sbiw	r24, 0x01	; 1
    1a12:	f1 f7       	brne	.-4      	; 0x1a10 <APP_closeTheDoor+0x102>
    1a14:	98 8b       	std	Y+16, r25	; 0x10
    1a16:	8f 87       	std	Y+15, r24	; 0x0f
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	aa e7       	ldi	r26, 0x7A	; 122
    1a1e:	b4 e4       	ldi	r27, 0x44	; 68
    1a20:	8b 87       	std	Y+11, r24	; 0x0b
    1a22:	9c 87       	std	Y+12, r25	; 0x0c
    1a24:	ad 87       	std	Y+13, r26	; 0x0d
    1a26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a28:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	4a ef       	ldi	r20, 0xFA	; 250
    1a36:	54 e4       	ldi	r21, 0x44	; 68
    1a38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	8f 83       	std	Y+7, r24	; 0x07
    1a42:	98 87       	std	Y+8, r25	; 0x08
    1a44:	a9 87       	std	Y+9, r26	; 0x09
    1a46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a48:	6f 81       	ldd	r22, Y+7	; 0x07
    1a4a:	78 85       	ldd	r23, Y+8	; 0x08
    1a4c:	89 85       	ldd	r24, Y+9	; 0x09
    1a4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a50:	20 e0       	ldi	r18, 0x00	; 0
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	40 e8       	ldi	r20, 0x80	; 128
    1a56:	5f e3       	ldi	r21, 0x3F	; 63
    1a58:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a5c:	88 23       	and	r24, r24
    1a5e:	2c f4       	brge	.+10     	; 0x1a6a <APP_closeTheDoor+0x15c>
		__ticks = 1;
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	9e 83       	std	Y+6, r25	; 0x06
    1a66:	8d 83       	std	Y+5, r24	; 0x05
    1a68:	3f c0       	rjmp	.+126    	; 0x1ae8 <APP_closeTheDoor+0x1da>
	else if (__tmp > 65535)
    1a6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a6c:	78 85       	ldd	r23, Y+8	; 0x08
    1a6e:	89 85       	ldd	r24, Y+9	; 0x09
    1a70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a72:	20 e0       	ldi	r18, 0x00	; 0
    1a74:	3f ef       	ldi	r19, 0xFF	; 255
    1a76:	4f e7       	ldi	r20, 0x7F	; 127
    1a78:	57 e4       	ldi	r21, 0x47	; 71
    1a7a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a7e:	18 16       	cp	r1, r24
    1a80:	4c f5       	brge	.+82     	; 0x1ad4 <APP_closeTheDoor+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a82:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a84:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a86:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a88:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	40 e2       	ldi	r20, 0x20	; 32
    1a90:	51 e4       	ldi	r21, 0x41	; 65
    1a92:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	bc 01       	movw	r22, r24
    1a9c:	cd 01       	movw	r24, r26
    1a9e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aa2:	dc 01       	movw	r26, r24
    1aa4:	cb 01       	movw	r24, r22
    1aa6:	9e 83       	std	Y+6, r25	; 0x06
    1aa8:	8d 83       	std	Y+5, r24	; 0x05
    1aaa:	0f c0       	rjmp	.+30     	; 0x1aca <APP_closeTheDoor+0x1bc>
    1aac:	88 ec       	ldi	r24, 0xC8	; 200
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	9c 83       	std	Y+4, r25	; 0x04
    1ab2:	8b 83       	std	Y+3, r24	; 0x03
    1ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab8:	01 97       	sbiw	r24, 0x01	; 1
    1aba:	f1 f7       	brne	.-4      	; 0x1ab8 <APP_closeTheDoor+0x1aa>
    1abc:	9c 83       	std	Y+4, r25	; 0x04
    1abe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ac0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac4:	01 97       	sbiw	r24, 0x01	; 1
    1ac6:	9e 83       	std	Y+6, r25	; 0x06
    1ac8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aca:	8d 81       	ldd	r24, Y+5	; 0x05
    1acc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ace:	00 97       	sbiw	r24, 0x00	; 0
    1ad0:	69 f7       	brne	.-38     	; 0x1aac <APP_closeTheDoor+0x19e>
    1ad2:	14 c0       	rjmp	.+40     	; 0x1afc <APP_closeTheDoor+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ad4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ad6:	78 85       	ldd	r23, Y+8	; 0x08
    1ad8:	89 85       	ldd	r24, Y+9	; 0x09
    1ada:	9a 85       	ldd	r25, Y+10	; 0x0a
    1adc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	9e 83       	std	Y+6, r25	; 0x06
    1ae6:	8d 83       	std	Y+5, r24	; 0x05
    1ae8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aea:	9e 81       	ldd	r25, Y+6	; 0x06
    1aec:	9a 83       	std	Y+2, r25	; 0x02
    1aee:	89 83       	std	Y+1, r24	; 0x01
    1af0:	89 81       	ldd	r24, Y+1	; 0x01
    1af2:	9a 81       	ldd	r25, Y+2	; 0x02
    1af4:	01 97       	sbiw	r24, 0x01	; 1
    1af6:	f1 f7       	brne	.-4      	; 0x1af4 <APP_closeTheDoor+0x1e6>
    1af8:	9a 83       	std	Y+2, r25	; 0x02
    1afa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	_delay_ms(1000);

}
    1afc:	6c 96       	adiw	r28, 0x1c	; 28
    1afe:	0f b6       	in	r0, 0x3f	; 63
    1b00:	f8 94       	cli
    1b02:	de bf       	out	0x3e, r29	; 62
    1b04:	0f be       	out	0x3f, r0	; 63
    1b06:	cd bf       	out	0x3d, r28	; 61
    1b08:	cf 91       	pop	r28
    1b0a:	df 91       	pop	r29
    1b0c:	08 95       	ret

00001b0e <APP_getCurrentPassword>:
 As an output Arg, this Argshall indicate a_functionArgDescription4
 [Returns] :${return_type}
 This return shall indicate var_func_returnt_description
 ---------------------------------------------------------------------------------------------------------------*/

void APP_getCurrentPassword(uint8 *a) {
    1b0e:	0f 93       	push	r16
    1b10:	1f 93       	push	r17
    1b12:	df 93       	push	r29
    1b14:	cf 93       	push	r28
    1b16:	00 d0       	rcall	.+0      	; 0x1b18 <APP_getCurrentPassword+0xa>
    1b18:	0f 92       	push	r0
    1b1a:	cd b7       	in	r28, 0x3d	; 61
    1b1c:	de b7       	in	r29, 0x3e	; 62
    1b1e:	9b 83       	std	Y+3, r25	; 0x03
    1b20:	8a 83       	std	Y+2, r24	; 0x02



	UART_sendByte(GETCURRENTPASSQUARYCOMMMAND);
    1b22:	83 e0       	ldi	r24, 0x03	; 3
    1b24:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <UART_sendByte>
	for (uint8 Loop_counter = 0; Loop_counter < 8; Loop_counter++) {
    1b28:	19 82       	std	Y+1, r1	; 0x01
    1b2a:	0f c0       	rjmp	.+30     	; 0x1b4a <APP_getCurrentPassword+0x3c>

			 *(a+Loop_counter)=UART_recieveByte();
    1b2c:	89 81       	ldd	r24, Y+1	; 0x01
    1b2e:	28 2f       	mov	r18, r24
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	8a 81       	ldd	r24, Y+2	; 0x02
    1b34:	9b 81       	ldd	r25, Y+3	; 0x03
    1b36:	8c 01       	movw	r16, r24
    1b38:	02 0f       	add	r16, r18
    1b3a:	13 1f       	adc	r17, r19
    1b3c:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <UART_recieveByte>
    1b40:	f8 01       	movw	r30, r16
    1b42:	80 83       	st	Z, r24
void APP_getCurrentPassword(uint8 *a) {



	UART_sendByte(GETCURRENTPASSQUARYCOMMMAND);
	for (uint8 Loop_counter = 0; Loop_counter < 8; Loop_counter++) {
    1b44:	89 81       	ldd	r24, Y+1	; 0x01
    1b46:	8f 5f       	subi	r24, 0xFF	; 255
    1b48:	89 83       	std	Y+1, r24	; 0x01
    1b4a:	89 81       	ldd	r24, Y+1	; 0x01
    1b4c:	88 30       	cpi	r24, 0x08	; 8
    1b4e:	70 f3       	brcs	.-36     	; 0x1b2c <APP_getCurrentPassword+0x1e>
	 *for (uint8 Loop_counter = 0; Loop_counter < 8; Loop_counter++) {

		EEPROM_Read_Byte(PASSWORD_LOCATION + Loop_counter, (a + Loop_counter));
	}*/

}
    1b50:	0f 90       	pop	r0
    1b52:	0f 90       	pop	r0
    1b54:	0f 90       	pop	r0
    1b56:	cf 91       	pop	r28
    1b58:	df 91       	pop	r29
    1b5a:	1f 91       	pop	r17
    1b5c:	0f 91       	pop	r16
    1b5e:	08 95       	ret

00001b60 <APP_getPasswordFromUser>:


void APP_getPasswordFromUser(uint8 *a) {
    1b60:	0f 93       	push	r16
    1b62:	1f 93       	push	r17
    1b64:	df 93       	push	r29
    1b66:	cf 93       	push	r28
    1b68:	cd b7       	in	r28, 0x3d	; 61
    1b6a:	de b7       	in	r29, 0x3e	; 62
    1b6c:	a3 97       	sbiw	r28, 0x23	; 35
    1b6e:	0f b6       	in	r0, 0x3f	; 63
    1b70:	f8 94       	cli
    1b72:	de bf       	out	0x3e, r29	; 62
    1b74:	0f be       	out	0x3f, r0	; 63
    1b76:	cd bf       	out	0x3d, r28	; 61
    1b78:	9b a3       	std	Y+35, r25	; 0x23
    1b7a:	8a a3       	std	Y+34, r24	; 0x22

	LCD_clearScreen();
    1b7c:	0e 94 14 19 	call	0x3228	; 0x3228 <LCD_clearScreen>
	LCD_displayString("Enter your Pass");
    1b80:	8f e7       	ldi	r24, 0x7F	; 127
    1b82:	91 e0       	ldi	r25, 0x01	; 1
    1b84:	0e 94 6d 18 	call	0x30da	; 0x30da <LCD_displayString>
	uint8 mystr[2] = "a";
    1b88:	80 91 f4 00 	lds	r24, 0x00F4
    1b8c:	90 91 f5 00 	lds	r25, 0x00F5
    1b90:	9f 8f       	std	Y+31, r25	; 0x1f
    1b92:	8e 8f       	std	Y+30, r24	; 0x1e
	uint8 astric[2] = "*";
    1b94:	80 91 9c 01 	lds	r24, 0x019C
    1b98:	90 91 9d 01 	lds	r25, 0x019D
    1b9c:	99 a3       	std	Y+33, r25	; 0x21
    1b9e:	88 a3       	std	Y+32, r24	; 0x20

	for (uint8 Loop_counter = 0; Loop_counter < 8; Loop_counter++) {
    1ba0:	1d 8e       	std	Y+29, r1	; 0x1d
    1ba2:	1c c1       	rjmp	.+568    	; 0x1ddc <APP_getPasswordFromUser+0x27c>

		a[Loop_counter] = KeyPad_getPressedKey();
    1ba4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ba6:	28 2f       	mov	r18, r24
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	8a a1       	ldd	r24, Y+34	; 0x22
    1bac:	9b a1       	ldd	r25, Y+35	; 0x23
    1bae:	8c 01       	movw	r16, r24
    1bb0:	02 0f       	add	r16, r18
    1bb2:	13 1f       	adc	r17, r19
    1bb4:	0e 94 9b 05 	call	0xb36	; 0xb36 <KeyPad_getPressedKey>
    1bb8:	f8 01       	movw	r30, r16
    1bba:	80 83       	st	Z, r24
		LCD_goToRowColumn(1, Loop_counter + 1);
    1bbc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bbe:	98 2f       	mov	r25, r24
    1bc0:	9f 5f       	subi	r25, 0xFF	; 255
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	69 2f       	mov	r22, r25
    1bc6:	0e 94 96 18 	call	0x312c	; 0x312c <LCD_goToRowColumn>
		itoa(a[Loop_counter], mystr, 10);
    1bca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bcc:	28 2f       	mov	r18, r24
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	8a a1       	ldd	r24, Y+34	; 0x22
    1bd2:	9b a1       	ldd	r25, Y+35	; 0x23
    1bd4:	fc 01       	movw	r30, r24
    1bd6:	e2 0f       	add	r30, r18
    1bd8:	f3 1f       	adc	r31, r19
    1bda:	80 81       	ld	r24, Z
    1bdc:	88 2f       	mov	r24, r24
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	9e 01       	movw	r18, r28
    1be2:	22 5e       	subi	r18, 0xE2	; 226
    1be4:	3f 4f       	sbci	r19, 0xFF	; 255
    1be6:	b9 01       	movw	r22, r18
    1be8:	4a e0       	ldi	r20, 0x0A	; 10
    1bea:	50 e0       	ldi	r21, 0x00	; 0
    1bec:	0e 94 a9 1c 	call	0x3952	; 0x3952 <itoa>
		LCD_displayString(mystr);
    1bf0:	ce 01       	movw	r24, r28
    1bf2:	4e 96       	adiw	r24, 0x1e	; 30
    1bf4:	0e 94 6d 18 	call	0x30da	; 0x30da <LCD_displayString>
    1bf8:	80 e0       	ldi	r24, 0x00	; 0
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	a8 e4       	ldi	r26, 0x48	; 72
    1bfe:	b3 e4       	ldi	r27, 0x43	; 67
    1c00:	89 8f       	std	Y+25, r24	; 0x19
    1c02:	9a 8f       	std	Y+26, r25	; 0x1a
    1c04:	ab 8f       	std	Y+27, r26	; 0x1b
    1c06:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c08:	69 8d       	ldd	r22, Y+25	; 0x19
    1c0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	4a ef       	ldi	r20, 0xFA	; 250
    1c16:	54 e4       	ldi	r21, 0x44	; 68
    1c18:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	cb 01       	movw	r24, r22
    1c20:	8d 8b       	std	Y+21, r24	; 0x15
    1c22:	9e 8b       	std	Y+22, r25	; 0x16
    1c24:	af 8b       	std	Y+23, r26	; 0x17
    1c26:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c28:	6d 89       	ldd	r22, Y+21	; 0x15
    1c2a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c2c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c2e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	40 e8       	ldi	r20, 0x80	; 128
    1c36:	5f e3       	ldi	r21, 0x3F	; 63
    1c38:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c3c:	88 23       	and	r24, r24
    1c3e:	2c f4       	brge	.+10     	; 0x1c4a <APP_getPasswordFromUser+0xea>
		__ticks = 1;
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	9c 8b       	std	Y+20, r25	; 0x14
    1c46:	8b 8b       	std	Y+19, r24	; 0x13
    1c48:	3f c0       	rjmp	.+126    	; 0x1cc8 <APP_getPasswordFromUser+0x168>
	else if (__tmp > 65535)
    1c4a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c4c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c4e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c50:	98 8d       	ldd	r25, Y+24	; 0x18
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	3f ef       	ldi	r19, 0xFF	; 255
    1c56:	4f e7       	ldi	r20, 0x7F	; 127
    1c58:	57 e4       	ldi	r21, 0x47	; 71
    1c5a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c5e:	18 16       	cp	r1, r24
    1c60:	4c f5       	brge	.+82     	; 0x1cb4 <APP_getPasswordFromUser+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c62:	69 8d       	ldd	r22, Y+25	; 0x19
    1c64:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c68:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	40 e2       	ldi	r20, 0x20	; 32
    1c70:	51 e4       	ldi	r21, 0x41	; 65
    1c72:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	bc 01       	movw	r22, r24
    1c7c:	cd 01       	movw	r24, r26
    1c7e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	9c 8b       	std	Y+20, r25	; 0x14
    1c88:	8b 8b       	std	Y+19, r24	; 0x13
    1c8a:	0f c0       	rjmp	.+30     	; 0x1caa <APP_getPasswordFromUser+0x14a>
    1c8c:	88 ec       	ldi	r24, 0xC8	; 200
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	9a 8b       	std	Y+18, r25	; 0x12
    1c92:	89 8b       	std	Y+17, r24	; 0x11
    1c94:	89 89       	ldd	r24, Y+17	; 0x11
    1c96:	9a 89       	ldd	r25, Y+18	; 0x12
    1c98:	01 97       	sbiw	r24, 0x01	; 1
    1c9a:	f1 f7       	brne	.-4      	; 0x1c98 <APP_getPasswordFromUser+0x138>
    1c9c:	9a 8b       	std	Y+18, r25	; 0x12
    1c9e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ca0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ca2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ca4:	01 97       	sbiw	r24, 0x01	; 1
    1ca6:	9c 8b       	std	Y+20, r25	; 0x14
    1ca8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1caa:	8b 89       	ldd	r24, Y+19	; 0x13
    1cac:	9c 89       	ldd	r25, Y+20	; 0x14
    1cae:	00 97       	sbiw	r24, 0x00	; 0
    1cb0:	69 f7       	brne	.-38     	; 0x1c8c <APP_getPasswordFromUser+0x12c>
    1cb2:	14 c0       	rjmp	.+40     	; 0x1cdc <APP_getPasswordFromUser+0x17c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cb4:	6d 89       	ldd	r22, Y+21	; 0x15
    1cb6:	7e 89       	ldd	r23, Y+22	; 0x16
    1cb8:	8f 89       	ldd	r24, Y+23	; 0x17
    1cba:	98 8d       	ldd	r25, Y+24	; 0x18
    1cbc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cc0:	dc 01       	movw	r26, r24
    1cc2:	cb 01       	movw	r24, r22
    1cc4:	9c 8b       	std	Y+20, r25	; 0x14
    1cc6:	8b 8b       	std	Y+19, r24	; 0x13
    1cc8:	8b 89       	ldd	r24, Y+19	; 0x13
    1cca:	9c 89       	ldd	r25, Y+20	; 0x14
    1ccc:	98 8b       	std	Y+16, r25	; 0x10
    1cce:	8f 87       	std	Y+15, r24	; 0x0f
    1cd0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cd2:	98 89       	ldd	r25, Y+16	; 0x10
    1cd4:	01 97       	sbiw	r24, 0x01	; 1
    1cd6:	f1 f7       	brne	.-4      	; 0x1cd4 <APP_getPasswordFromUser+0x174>
    1cd8:	98 8b       	std	Y+16, r25	; 0x10
    1cda:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(200);

		LCD_goToRowColumn(1, Loop_counter + 1);
    1cdc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cde:	98 2f       	mov	r25, r24
    1ce0:	9f 5f       	subi	r25, 0xFF	; 255
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	69 2f       	mov	r22, r25
    1ce6:	0e 94 96 18 	call	0x312c	; 0x312c <LCD_goToRowColumn>
		LCD_displayString(astric);
    1cea:	ce 01       	movw	r24, r28
    1cec:	80 96       	adiw	r24, 0x20	; 32
    1cee:	0e 94 6d 18 	call	0x30da	; 0x30da <LCD_displayString>
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	a8 e4       	ldi	r26, 0x48	; 72
    1cf8:	b3 e4       	ldi	r27, 0x43	; 67
    1cfa:	8b 87       	std	Y+11, r24	; 0x0b
    1cfc:	9c 87       	std	Y+12, r25	; 0x0c
    1cfe:	ad 87       	std	Y+13, r26	; 0x0d
    1d00:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d02:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d04:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d06:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d08:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d0a:	20 e0       	ldi	r18, 0x00	; 0
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	4a ef       	ldi	r20, 0xFA	; 250
    1d10:	54 e4       	ldi	r21, 0x44	; 68
    1d12:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d16:	dc 01       	movw	r26, r24
    1d18:	cb 01       	movw	r24, r22
    1d1a:	8f 83       	std	Y+7, r24	; 0x07
    1d1c:	98 87       	std	Y+8, r25	; 0x08
    1d1e:	a9 87       	std	Y+9, r26	; 0x09
    1d20:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d22:	6f 81       	ldd	r22, Y+7	; 0x07
    1d24:	78 85       	ldd	r23, Y+8	; 0x08
    1d26:	89 85       	ldd	r24, Y+9	; 0x09
    1d28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d2a:	20 e0       	ldi	r18, 0x00	; 0
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	40 e8       	ldi	r20, 0x80	; 128
    1d30:	5f e3       	ldi	r21, 0x3F	; 63
    1d32:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d36:	88 23       	and	r24, r24
    1d38:	2c f4       	brge	.+10     	; 0x1d44 <APP_getPasswordFromUser+0x1e4>
		__ticks = 1;
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	9e 83       	std	Y+6, r25	; 0x06
    1d40:	8d 83       	std	Y+5, r24	; 0x05
    1d42:	3f c0       	rjmp	.+126    	; 0x1dc2 <APP_getPasswordFromUser+0x262>
	else if (__tmp > 65535)
    1d44:	6f 81       	ldd	r22, Y+7	; 0x07
    1d46:	78 85       	ldd	r23, Y+8	; 0x08
    1d48:	89 85       	ldd	r24, Y+9	; 0x09
    1d4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	3f ef       	ldi	r19, 0xFF	; 255
    1d50:	4f e7       	ldi	r20, 0x7F	; 127
    1d52:	57 e4       	ldi	r21, 0x47	; 71
    1d54:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d58:	18 16       	cp	r1, r24
    1d5a:	4c f5       	brge	.+82     	; 0x1dae <APP_getPasswordFromUser+0x24e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d60:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d62:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	40 e2       	ldi	r20, 0x20	; 32
    1d6a:	51 e4       	ldi	r21, 0x41	; 65
    1d6c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d70:	dc 01       	movw	r26, r24
    1d72:	cb 01       	movw	r24, r22
    1d74:	bc 01       	movw	r22, r24
    1d76:	cd 01       	movw	r24, r26
    1d78:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	cb 01       	movw	r24, r22
    1d80:	9e 83       	std	Y+6, r25	; 0x06
    1d82:	8d 83       	std	Y+5, r24	; 0x05
    1d84:	0f c0       	rjmp	.+30     	; 0x1da4 <APP_getPasswordFromUser+0x244>
    1d86:	88 ec       	ldi	r24, 0xC8	; 200
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	9c 83       	std	Y+4, r25	; 0x04
    1d8c:	8b 83       	std	Y+3, r24	; 0x03
    1d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d90:	9c 81       	ldd	r25, Y+4	; 0x04
    1d92:	01 97       	sbiw	r24, 0x01	; 1
    1d94:	f1 f7       	brne	.-4      	; 0x1d92 <APP_getPasswordFromUser+0x232>
    1d96:	9c 83       	std	Y+4, r25	; 0x04
    1d98:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d9e:	01 97       	sbiw	r24, 0x01	; 1
    1da0:	9e 83       	std	Y+6, r25	; 0x06
    1da2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1da4:	8d 81       	ldd	r24, Y+5	; 0x05
    1da6:	9e 81       	ldd	r25, Y+6	; 0x06
    1da8:	00 97       	sbiw	r24, 0x00	; 0
    1daa:	69 f7       	brne	.-38     	; 0x1d86 <APP_getPasswordFromUser+0x226>
    1dac:	14 c0       	rjmp	.+40     	; 0x1dd6 <APP_getPasswordFromUser+0x276>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dae:	6f 81       	ldd	r22, Y+7	; 0x07
    1db0:	78 85       	ldd	r23, Y+8	; 0x08
    1db2:	89 85       	ldd	r24, Y+9	; 0x09
    1db4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dba:	dc 01       	movw	r26, r24
    1dbc:	cb 01       	movw	r24, r22
    1dbe:	9e 83       	std	Y+6, r25	; 0x06
    1dc0:	8d 83       	std	Y+5, r24	; 0x05
    1dc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc6:	9a 83       	std	Y+2, r25	; 0x02
    1dc8:	89 83       	std	Y+1, r24	; 0x01
    1dca:	89 81       	ldd	r24, Y+1	; 0x01
    1dcc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dce:	01 97       	sbiw	r24, 0x01	; 1
    1dd0:	f1 f7       	brne	.-4      	; 0x1dce <APP_getPasswordFromUser+0x26e>
    1dd2:	9a 83       	std	Y+2, r25	; 0x02
    1dd4:	89 83       	std	Y+1, r24	; 0x01
	LCD_clearScreen();
	LCD_displayString("Enter your Pass");
	uint8 mystr[2] = "a";
	uint8 astric[2] = "*";

	for (uint8 Loop_counter = 0; Loop_counter < 8; Loop_counter++) {
    1dd6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1dd8:	8f 5f       	subi	r24, 0xFF	; 255
    1dda:	8d 8f       	std	Y+29, r24	; 0x1d
    1ddc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1dde:	88 30       	cpi	r24, 0x08	; 8
    1de0:	08 f4       	brcc	.+2      	; 0x1de4 <APP_getPasswordFromUser+0x284>
    1de2:	e0 ce       	rjmp	.-576    	; 0x1ba4 <APP_getPasswordFromUser+0x44>
		LCD_goToRowColumn(1, Loop_counter + 1);
		LCD_displayString(astric);
		_delay_ms(200);

	}
	LCD_clearScreen();
    1de4:	0e 94 14 19 	call	0x3228	; 0x3228 <LCD_clearScreen>
	LCD_displayString("Pass entered");
    1de8:	8f e8       	ldi	r24, 0x8F	; 143
    1dea:	91 e0       	ldi	r25, 0x01	; 1
    1dec:	0e 94 6d 18 	call	0x30da	; 0x30da <LCD_displayString>
}
    1df0:	a3 96       	adiw	r28, 0x23	; 35
    1df2:	0f b6       	in	r0, 0x3f	; 63
    1df4:	f8 94       	cli
    1df6:	de bf       	out	0x3e, r29	; 62
    1df8:	0f be       	out	0x3f, r0	; 63
    1dfa:	cd bf       	out	0x3d, r28	; 61
    1dfc:	cf 91       	pop	r28
    1dfe:	df 91       	pop	r29
    1e00:	1f 91       	pop	r17
    1e02:	0f 91       	pop	r16
    1e04:	08 95       	ret

00001e06 <EEPROM_Init>:
 * Author: Mohamed Tarek
 */ 
#include "external_eeprom.h"

void EEPROM_Init(void)
{
    1e06:	df 93       	push	r29
    1e08:	cf 93       	push	r28
    1e0a:	cd b7       	in	r28, 0x3d	; 61
    1e0c:	de b7       	in	r29, 0x3e	; 62
	TWI_Init(); // just initialize the TWI module inside the MC
    1e0e:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <TWI_Init>
}
    1e12:	cf 91       	pop	r28
    1e14:	df 91       	pop	r29
    1e16:	08 95       	ret

00001e18 <EEPROM_Write_Byte>:

uint8 EEPROM_Write_Byte(uint16 u16addr, uint8 u8data)
{
    1e18:	df 93       	push	r29
    1e1a:	cf 93       	push	r28
    1e1c:	00 d0       	rcall	.+0      	; 0x1e1e <EEPROM_Write_Byte+0x6>
    1e1e:	00 d0       	rcall	.+0      	; 0x1e20 <EEPROM_Write_Byte+0x8>
    1e20:	cd b7       	in	r28, 0x3d	; 61
    1e22:	de b7       	in	r29, 0x3e	; 62
    1e24:	9a 83       	std	Y+2, r25	; 0x02
    1e26:	89 83       	std	Y+1, r24	; 0x01
    1e28:	6b 83       	std	Y+3, r22	; 0x03
    TWI_Start();
    1e2a:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <TWI_Start>
    if (TWI_Get_Status() != TW_START)
    1e2e:	0e 94 1b 10 	call	0x2036	; 0x2036 <TWI_Get_Status>
    1e32:	88 30       	cpi	r24, 0x08	; 8
    1e34:	11 f0       	breq	.+4      	; 0x1e3a <EEPROM_Write_Byte+0x22>
        return ERROR;
    1e36:	1c 82       	std	Y+4, r1	; 0x04
    1e38:	28 c0       	rjmp	.+80     	; 0x1e8a <EEPROM_Write_Byte+0x72>
		
    //write the device address and so we need to get A8 A9 A10 address bits and R/W=0 (write)
    TWI_Write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1e3a:	89 81       	ldd	r24, Y+1	; 0x01
    1e3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e3e:	80 70       	andi	r24, 0x00	; 0
    1e40:	97 70       	andi	r25, 0x07	; 7
    1e42:	88 0f       	add	r24, r24
    1e44:	89 2f       	mov	r24, r25
    1e46:	88 1f       	adc	r24, r24
    1e48:	99 0b       	sbc	r25, r25
    1e4a:	91 95       	neg	r25
    1e4c:	80 6a       	ori	r24, 0xA0	; 160
    1e4e:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <TWI_Write>
    if (TWI_Get_Status() != TW_MT_SLA_W_ACK)
    1e52:	0e 94 1b 10 	call	0x2036	; 0x2036 <TWI_Get_Status>
    1e56:	88 31       	cpi	r24, 0x18	; 24
    1e58:	11 f0       	breq	.+4      	; 0x1e5e <EEPROM_Write_Byte+0x46>
        return ERROR; 
    1e5a:	1c 82       	std	Y+4, r1	; 0x04
    1e5c:	16 c0       	rjmp	.+44     	; 0x1e8a <EEPROM_Write_Byte+0x72>
		 
    //send the required location address
    TWI_Write((uint8)(u16addr));
    1e5e:	89 81       	ldd	r24, Y+1	; 0x01
    1e60:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <TWI_Write>
    if (TWI_Get_Status() != TW_MT_DATA_ACK)
    1e64:	0e 94 1b 10 	call	0x2036	; 0x2036 <TWI_Get_Status>
    1e68:	88 32       	cpi	r24, 0x28	; 40
    1e6a:	11 f0       	breq	.+4      	; 0x1e70 <EEPROM_Write_Byte+0x58>
        return ERROR;
    1e6c:	1c 82       	std	Y+4, r1	; 0x04
    1e6e:	0d c0       	rjmp	.+26     	; 0x1e8a <EEPROM_Write_Byte+0x72>
		
    //write byte to eeprom
    TWI_Write(u8data);
    1e70:	8b 81       	ldd	r24, Y+3	; 0x03
    1e72:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <TWI_Write>
    if (TWI_Get_Status() != TW_MT_DATA_ACK)
    1e76:	0e 94 1b 10 	call	0x2036	; 0x2036 <TWI_Get_Status>
    1e7a:	88 32       	cpi	r24, 0x28	; 40
    1e7c:	11 f0       	breq	.+4      	; 0x1e82 <EEPROM_Write_Byte+0x6a>
        return ERROR;
    1e7e:	1c 82       	std	Y+4, r1	; 0x04
    1e80:	04 c0       	rjmp	.+8      	; 0x1e8a <EEPROM_Write_Byte+0x72>
		
    TWI_Stop();
    1e82:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <TWI_Stop>
	
    return SUCCESS;
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	8c 83       	std	Y+4, r24	; 0x04
    1e8a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1e8c:	0f 90       	pop	r0
    1e8e:	0f 90       	pop	r0
    1e90:	0f 90       	pop	r0
    1e92:	0f 90       	pop	r0
    1e94:	cf 91       	pop	r28
    1e96:	df 91       	pop	r29
    1e98:	08 95       	ret

00001e9a <EEPROM_Read_Byte>:

uint8 EEPROM_Read_Byte(uint16 u16addr, uint8 *u8data)
{
    1e9a:	df 93       	push	r29
    1e9c:	cf 93       	push	r28
    1e9e:	00 d0       	rcall	.+0      	; 0x1ea0 <EEPROM_Read_Byte+0x6>
    1ea0:	00 d0       	rcall	.+0      	; 0x1ea2 <EEPROM_Read_Byte+0x8>
    1ea2:	0f 92       	push	r0
    1ea4:	cd b7       	in	r28, 0x3d	; 61
    1ea6:	de b7       	in	r29, 0x3e	; 62
    1ea8:	9a 83       	std	Y+2, r25	; 0x02
    1eaa:	89 83       	std	Y+1, r24	; 0x01
    1eac:	7c 83       	std	Y+4, r23	; 0x04
    1eae:	6b 83       	std	Y+3, r22	; 0x03
    TWI_Start();
    1eb0:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <TWI_Start>
    if (TWI_Get_Status() != TW_START)
    1eb4:	0e 94 1b 10 	call	0x2036	; 0x2036 <TWI_Get_Status>
    1eb8:	88 30       	cpi	r24, 0x08	; 8
    1eba:	11 f0       	breq	.+4      	; 0x1ec0 <EEPROM_Read_Byte+0x26>
        return ERROR;
    1ebc:	1d 82       	std	Y+5, r1	; 0x05
    1ebe:	44 c0       	rjmp	.+136    	; 0x1f48 <EEPROM_Read_Byte+0xae>
		
    //write the device address and so we need to get A8 A9 A10 address bits and R/W=0 (write)
    TWI_Write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1ec0:	89 81       	ldd	r24, Y+1	; 0x01
    1ec2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec4:	80 70       	andi	r24, 0x00	; 0
    1ec6:	97 70       	andi	r25, 0x07	; 7
    1ec8:	88 0f       	add	r24, r24
    1eca:	89 2f       	mov	r24, r25
    1ecc:	88 1f       	adc	r24, r24
    1ece:	99 0b       	sbc	r25, r25
    1ed0:	91 95       	neg	r25
    1ed2:	80 6a       	ori	r24, 0xA0	; 160
    1ed4:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <TWI_Write>
    if (TWI_Get_Status() != TW_MT_SLA_W_ACK)
    1ed8:	0e 94 1b 10 	call	0x2036	; 0x2036 <TWI_Get_Status>
    1edc:	88 31       	cpi	r24, 0x18	; 24
    1ede:	11 f0       	breq	.+4      	; 0x1ee4 <EEPROM_Read_Byte+0x4a>
        return ERROR;
    1ee0:	1d 82       	std	Y+5, r1	; 0x05
    1ee2:	32 c0       	rjmp	.+100    	; 0x1f48 <EEPROM_Read_Byte+0xae>
		
    //send the required location address
    TWI_Write((uint8)(u16addr));
    1ee4:	89 81       	ldd	r24, Y+1	; 0x01
    1ee6:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <TWI_Write>
    if (TWI_Get_Status() != TW_MT_DATA_ACK)
    1eea:	0e 94 1b 10 	call	0x2036	; 0x2036 <TWI_Get_Status>
    1eee:	88 32       	cpi	r24, 0x28	; 40
    1ef0:	11 f0       	breq	.+4      	; 0x1ef6 <EEPROM_Read_Byte+0x5c>
        return ERROR;
    1ef2:	1d 82       	std	Y+5, r1	; 0x05
    1ef4:	29 c0       	rjmp	.+82     	; 0x1f48 <EEPROM_Read_Byte+0xae>
		
    //send a repeated start
    TWI_Start();
    1ef6:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <TWI_Start>
    if (TWI_Get_Status() != TW_REP_START)
    1efa:	0e 94 1b 10 	call	0x2036	; 0x2036 <TWI_Get_Status>
    1efe:	80 31       	cpi	r24, 0x10	; 16
    1f00:	11 f0       	breq	.+4      	; 0x1f06 <EEPROM_Read_Byte+0x6c>
        return ERROR;
    1f02:	1d 82       	std	Y+5, r1	; 0x05
    1f04:	21 c0       	rjmp	.+66     	; 0x1f48 <EEPROM_Read_Byte+0xae>
		
    //write the device address and so we need to get A8 A9 A10 address bits and R/W=1 (Read)
    TWI_Write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1f06:	89 81       	ldd	r24, Y+1	; 0x01
    1f08:	9a 81       	ldd	r25, Y+2	; 0x02
    1f0a:	80 70       	andi	r24, 0x00	; 0
    1f0c:	97 70       	andi	r25, 0x07	; 7
    1f0e:	88 0f       	add	r24, r24
    1f10:	89 2f       	mov	r24, r25
    1f12:	88 1f       	adc	r24, r24
    1f14:	99 0b       	sbc	r25, r25
    1f16:	91 95       	neg	r25
    1f18:	81 6a       	ori	r24, 0xA1	; 161
    1f1a:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <TWI_Write>
    if (TWI_Get_Status() != TW_MT_SLA_R_ACK)
    1f1e:	0e 94 1b 10 	call	0x2036	; 0x2036 <TWI_Get_Status>
    1f22:	80 34       	cpi	r24, 0x40	; 64
    1f24:	11 f0       	breq	.+4      	; 0x1f2a <EEPROM_Read_Byte+0x90>
        return ERROR;
    1f26:	1d 82       	std	Y+5, r1	; 0x05
    1f28:	0f c0       	rjmp	.+30     	; 0x1f48 <EEPROM_Read_Byte+0xae>
		
    *u8data = TWI_Read_With_NACK();
    1f2a:	0e 94 08 10 	call	0x2010	; 0x2010 <TWI_Read_With_NACK>
    1f2e:	eb 81       	ldd	r30, Y+3	; 0x03
    1f30:	fc 81       	ldd	r31, Y+4	; 0x04
    1f32:	80 83       	st	Z, r24
    if (TWI_Get_Status() != TW_MR_DATA_NACK)
    1f34:	0e 94 1b 10 	call	0x2036	; 0x2036 <TWI_Get_Status>
    1f38:	88 35       	cpi	r24, 0x58	; 88
    1f3a:	11 f0       	breq	.+4      	; 0x1f40 <EEPROM_Read_Byte+0xa6>
        return ERROR;
    1f3c:	1d 82       	std	Y+5, r1	; 0x05
    1f3e:	04 c0       	rjmp	.+8      	; 0x1f48 <EEPROM_Read_Byte+0xae>
		
    TWI_Stop();
    1f40:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <TWI_Stop>
    return SUCCESS;
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	8d 83       	std	Y+5, r24	; 0x05
    1f48:	8d 81       	ldd	r24, Y+5	; 0x05

}
    1f4a:	0f 90       	pop	r0
    1f4c:	0f 90       	pop	r0
    1f4e:	0f 90       	pop	r0
    1f50:	0f 90       	pop	r0
    1f52:	0f 90       	pop	r0
    1f54:	cf 91       	pop	r28
    1f56:	df 91       	pop	r29
    1f58:	08 95       	ret

00001f5a <TWI_Init>:
 * Author: Mohamed Tarek
 */ 
#include "i2c.h"

void TWI_Init(void)
{
    1f5a:	df 93       	push	r29
    1f5c:	cf 93       	push	r28
    1f5e:	cd b7       	in	r28, 0x3d	; 61
    1f60:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
    1f62:	e0 e2       	ldi	r30, 0x20	; 32
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	82 e0       	ldi	r24, 0x02	; 2
    1f68:	80 83       	st	Z, r24
	TWSR = 0x00;
    1f6a:	e1 e2       	ldi	r30, 0x21	; 33
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
    1f70:	e2 e2       	ldi	r30, 0x22	; 34
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	82 e0       	ldi	r24, 0x02	; 2
    1f76:	80 83       	st	Z, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    1f78:	e6 e5       	ldi	r30, 0x56	; 86
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	84 e0       	ldi	r24, 0x04	; 4
    1f7e:	80 83       	st	Z, r24
}
    1f80:	cf 91       	pop	r28
    1f82:	df 91       	pop	r29
    1f84:	08 95       	ret

00001f86 <TWI_Start>:

void TWI_Start(void)
{
    1f86:	df 93       	push	r29
    1f88:	cf 93       	push	r28
    1f8a:	cd b7       	in	r28, 0x3d	; 61
    1f8c:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1f8e:	e6 e5       	ldi	r30, 0x56	; 86
    1f90:	f0 e0       	ldi	r31, 0x00	; 0
    1f92:	84 ea       	ldi	r24, 0xA4	; 164
    1f94:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1f96:	e6 e5       	ldi	r30, 0x56	; 86
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	80 81       	ld	r24, Z
    1f9c:	88 23       	and	r24, r24
    1f9e:	dc f7       	brge	.-10     	; 0x1f96 <TWI_Start+0x10>
}
    1fa0:	cf 91       	pop	r28
    1fa2:	df 91       	pop	r29
    1fa4:	08 95       	ret

00001fa6 <TWI_Stop>:

void TWI_Stop(void)
{
    1fa6:	df 93       	push	r29
    1fa8:	cf 93       	push	r28
    1faa:	cd b7       	in	r28, 0x3d	; 61
    1fac:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1fae:	e6 e5       	ldi	r30, 0x56	; 86
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	84 e9       	ldi	r24, 0x94	; 148
    1fb4:	80 83       	st	Z, r24
}
    1fb6:	cf 91       	pop	r28
    1fb8:	df 91       	pop	r29
    1fba:	08 95       	ret

00001fbc <TWI_Write>:

void TWI_Write(uint8 data)
{
    1fbc:	df 93       	push	r29
    1fbe:	cf 93       	push	r28
    1fc0:	0f 92       	push	r0
    1fc2:	cd b7       	in	r28, 0x3d	; 61
    1fc4:	de b7       	in	r29, 0x3e	; 62
    1fc6:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1fc8:	e3 e2       	ldi	r30, 0x23	; 35
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	89 81       	ldd	r24, Y+1	; 0x01
    1fce:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    1fd0:	e6 e5       	ldi	r30, 0x56	; 86
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	84 e8       	ldi	r24, 0x84	; 132
    1fd6:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1fd8:	e6 e5       	ldi	r30, 0x56	; 86
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	80 81       	ld	r24, Z
    1fde:	88 23       	and	r24, r24
    1fe0:	dc f7       	brge	.-10     	; 0x1fd8 <TWI_Write+0x1c>
}
    1fe2:	0f 90       	pop	r0
    1fe4:	cf 91       	pop	r28
    1fe6:	df 91       	pop	r29
    1fe8:	08 95       	ret

00001fea <TWI_Read_With_ACK>:

uint8 TWI_Read_With_ACK(void)
{
    1fea:	df 93       	push	r29
    1fec:	cf 93       	push	r28
    1fee:	cd b7       	in	r28, 0x3d	; 61
    1ff0:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1ff2:	e6 e5       	ldi	r30, 0x56	; 86
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	84 ec       	ldi	r24, 0xC4	; 196
    1ff8:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1ffa:	e6 e5       	ldi	r30, 0x56	; 86
    1ffc:	f0 e0       	ldi	r31, 0x00	; 0
    1ffe:	80 81       	ld	r24, Z
    2000:	88 23       	and	r24, r24
    2002:	dc f7       	brge	.-10     	; 0x1ffa <TWI_Read_With_ACK+0x10>
    /* Read Data */
    return TWDR;
    2004:	e3 e2       	ldi	r30, 0x23	; 35
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	80 81       	ld	r24, Z
}
    200a:	cf 91       	pop	r28
    200c:	df 91       	pop	r29
    200e:	08 95       	ret

00002010 <TWI_Read_With_NACK>:

uint8 TWI_Read_With_NACK(void)
{
    2010:	df 93       	push	r29
    2012:	cf 93       	push	r28
    2014:	cd b7       	in	r28, 0x3d	; 61
    2016:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2018:	e6 e5       	ldi	r30, 0x56	; 86
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	84 e8       	ldi	r24, 0x84	; 132
    201e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2020:	e6 e5       	ldi	r30, 0x56	; 86
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	80 81       	ld	r24, Z
    2026:	88 23       	and	r24, r24
    2028:	dc f7       	brge	.-10     	; 0x2020 <TWI_Read_With_NACK+0x10>
    /* Read Data */
    return TWDR;
    202a:	e3 e2       	ldi	r30, 0x23	; 35
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
}
    2030:	cf 91       	pop	r28
    2032:	df 91       	pop	r29
    2034:	08 95       	ret

00002036 <TWI_Get_Status>:

uint8 TWI_Get_Status(void)
{
    2036:	df 93       	push	r29
    2038:	cf 93       	push	r28
    203a:	0f 92       	push	r0
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62
    unsigned char status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    2040:	e1 e2       	ldi	r30, 0x21	; 33
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	80 81       	ld	r24, Z
    2046:	88 7f       	andi	r24, 0xF8	; 248
    2048:	89 83       	std	Y+1, r24	; 0x01
    return status;
    204a:	89 81       	ldd	r24, Y+1	; 0x01
}
    204c:	0f 90       	pop	r0
    204e:	cf 91       	pop	r28
    2050:	df 91       	pop	r29
    2052:	08 95       	ret

00002054 <LCD_init>:
 */

#include "lcd.h"

void LCD_init(void)
{
    2054:	df 93       	push	r29
    2056:	cf 93       	push	r28
    2058:	cd b7       	in	r28, 0x3d	; 61
    205a:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    205c:	a1 e3       	ldi	r26, 0x31	; 49
    205e:	b0 e0       	ldi	r27, 0x00	; 0
    2060:	e1 e3       	ldi	r30, 0x31	; 49
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	80 81       	ld	r24, Z
    2066:	80 67       	ori	r24, 0x70	; 112
    2068:	8c 93       	st	X, r24
	
	#if (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT_DIR |= 0xF0; /* Configure the highest 4 bits of the data port as output pins */
    206a:	a4 e3       	ldi	r26, 0x34	; 52
    206c:	b0 e0       	ldi	r27, 0x00	; 0
    206e:	e4 e3       	ldi	r30, 0x34	; 52
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	80 81       	ld	r24, Z
    2074:	80 6f       	ori	r24, 0xF0	; 240
    2076:	8c 93       	st	X, r24
		#else
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif		 
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
    2078:	82 e0       	ldi	r24, 0x02	; 2
    207a:	0e 94 4b 10 	call	0x2096	; 0x2096 <LCD_sendCommand>
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
    207e:	88 e2       	ldi	r24, 0x28	; 40
    2080:	0e 94 4b 10 	call	0x2096	; 0x2096 <LCD_sendCommand>
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    2084:	8c e0       	ldi	r24, 0x0C	; 12
    2086:	0e 94 4b 10 	call	0x2096	; 0x2096 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	0e 94 4b 10 	call	0x2096	; 0x2096 <LCD_sendCommand>
}
    2090:	cf 91       	pop	r28
    2092:	df 91       	pop	r29
    2094:	08 95       	ret

00002096 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    2096:	0f 93       	push	r16
    2098:	1f 93       	push	r17
    209a:	df 93       	push	r29
    209c:	cf 93       	push	r28
    209e:	cd b7       	in	r28, 0x3d	; 61
    20a0:	de b7       	in	r29, 0x3e	; 62
    20a2:	c3 56       	subi	r28, 0x63	; 99
    20a4:	d0 40       	sbci	r29, 0x00	; 0
    20a6:	0f b6       	in	r0, 0x3f	; 63
    20a8:	f8 94       	cli
    20aa:	de bf       	out	0x3e, r29	; 62
    20ac:	0f be       	out	0x3f, r0	; 63
    20ae:	cd bf       	out	0x3d, r28	; 61
    20b0:	fe 01       	movw	r30, r28
    20b2:	ed 59       	subi	r30, 0x9D	; 157
    20b4:	ff 4f       	sbci	r31, 0xFF	; 255
    20b6:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    20b8:	a2 e3       	ldi	r26, 0x32	; 50
    20ba:	b0 e0       	ldi	r27, 0x00	; 0
    20bc:	e2 e3       	ldi	r30, 0x32	; 50
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	80 81       	ld	r24, Z
    20c2:	8f 7e       	andi	r24, 0xEF	; 239
    20c4:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    20c6:	a2 e3       	ldi	r26, 0x32	; 50
    20c8:	b0 e0       	ldi	r27, 0x00	; 0
    20ca:	e2 e3       	ldi	r30, 0x32	; 50
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	80 81       	ld	r24, Z
    20d0:	8f 7d       	andi	r24, 0xDF	; 223
    20d2:	8c 93       	st	X, r24
    20d4:	fe 01       	movw	r30, r28
    20d6:	e1 5a       	subi	r30, 0xA1	; 161
    20d8:	ff 4f       	sbci	r31, 0xFF	; 255
    20da:	80 e0       	ldi	r24, 0x00	; 0
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	a0 e8       	ldi	r26, 0x80	; 128
    20e0:	bf e3       	ldi	r27, 0x3F	; 63
    20e2:	80 83       	st	Z, r24
    20e4:	91 83       	std	Z+1, r25	; 0x01
    20e6:	a2 83       	std	Z+2, r26	; 0x02
    20e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ea:	8e 01       	movw	r16, r28
    20ec:	05 5a       	subi	r16, 0xA5	; 165
    20ee:	1f 4f       	sbci	r17, 0xFF	; 255
    20f0:	fe 01       	movw	r30, r28
    20f2:	e1 5a       	subi	r30, 0xA1	; 161
    20f4:	ff 4f       	sbci	r31, 0xFF	; 255
    20f6:	60 81       	ld	r22, Z
    20f8:	71 81       	ldd	r23, Z+1	; 0x01
    20fa:	82 81       	ldd	r24, Z+2	; 0x02
    20fc:	93 81       	ldd	r25, Z+3	; 0x03
    20fe:	20 e0       	ldi	r18, 0x00	; 0
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	4a ef       	ldi	r20, 0xFA	; 250
    2104:	54 e4       	ldi	r21, 0x44	; 68
    2106:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    210a:	dc 01       	movw	r26, r24
    210c:	cb 01       	movw	r24, r22
    210e:	f8 01       	movw	r30, r16
    2110:	80 83       	st	Z, r24
    2112:	91 83       	std	Z+1, r25	; 0x01
    2114:	a2 83       	std	Z+2, r26	; 0x02
    2116:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2118:	fe 01       	movw	r30, r28
    211a:	e5 5a       	subi	r30, 0xA5	; 165
    211c:	ff 4f       	sbci	r31, 0xFF	; 255
    211e:	60 81       	ld	r22, Z
    2120:	71 81       	ldd	r23, Z+1	; 0x01
    2122:	82 81       	ldd	r24, Z+2	; 0x02
    2124:	93 81       	ldd	r25, Z+3	; 0x03
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	40 e8       	ldi	r20, 0x80	; 128
    212c:	5f e3       	ldi	r21, 0x3F	; 63
    212e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2132:	88 23       	and	r24, r24
    2134:	44 f4       	brge	.+16     	; 0x2146 <LCD_sendCommand+0xb0>
		__ticks = 1;
    2136:	fe 01       	movw	r30, r28
    2138:	e7 5a       	subi	r30, 0xA7	; 167
    213a:	ff 4f       	sbci	r31, 0xFF	; 255
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	91 83       	std	Z+1, r25	; 0x01
    2142:	80 83       	st	Z, r24
    2144:	64 c0       	rjmp	.+200    	; 0x220e <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    2146:	fe 01       	movw	r30, r28
    2148:	e5 5a       	subi	r30, 0xA5	; 165
    214a:	ff 4f       	sbci	r31, 0xFF	; 255
    214c:	60 81       	ld	r22, Z
    214e:	71 81       	ldd	r23, Z+1	; 0x01
    2150:	82 81       	ldd	r24, Z+2	; 0x02
    2152:	93 81       	ldd	r25, Z+3	; 0x03
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	3f ef       	ldi	r19, 0xFF	; 255
    2158:	4f e7       	ldi	r20, 0x7F	; 127
    215a:	57 e4       	ldi	r21, 0x47	; 71
    215c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2160:	18 16       	cp	r1, r24
    2162:	0c f0       	brlt	.+2      	; 0x2166 <LCD_sendCommand+0xd0>
    2164:	43 c0       	rjmp	.+134    	; 0x21ec <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2166:	fe 01       	movw	r30, r28
    2168:	e1 5a       	subi	r30, 0xA1	; 161
    216a:	ff 4f       	sbci	r31, 0xFF	; 255
    216c:	60 81       	ld	r22, Z
    216e:	71 81       	ldd	r23, Z+1	; 0x01
    2170:	82 81       	ldd	r24, Z+2	; 0x02
    2172:	93 81       	ldd	r25, Z+3	; 0x03
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	40 e2       	ldi	r20, 0x20	; 32
    217a:	51 e4       	ldi	r21, 0x41	; 65
    217c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2180:	dc 01       	movw	r26, r24
    2182:	cb 01       	movw	r24, r22
    2184:	8e 01       	movw	r16, r28
    2186:	07 5a       	subi	r16, 0xA7	; 167
    2188:	1f 4f       	sbci	r17, 0xFF	; 255
    218a:	bc 01       	movw	r22, r24
    218c:	cd 01       	movw	r24, r26
    218e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	f8 01       	movw	r30, r16
    2198:	91 83       	std	Z+1, r25	; 0x01
    219a:	80 83       	st	Z, r24
    219c:	1f c0       	rjmp	.+62     	; 0x21dc <LCD_sendCommand+0x146>
    219e:	fe 01       	movw	r30, r28
    21a0:	e9 5a       	subi	r30, 0xA9	; 169
    21a2:	ff 4f       	sbci	r31, 0xFF	; 255
    21a4:	88 ec       	ldi	r24, 0xC8	; 200
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	91 83       	std	Z+1, r25	; 0x01
    21aa:	80 83       	st	Z, r24
    21ac:	fe 01       	movw	r30, r28
    21ae:	e9 5a       	subi	r30, 0xA9	; 169
    21b0:	ff 4f       	sbci	r31, 0xFF	; 255
    21b2:	80 81       	ld	r24, Z
    21b4:	91 81       	ldd	r25, Z+1	; 0x01
    21b6:	01 97       	sbiw	r24, 0x01	; 1
    21b8:	f1 f7       	brne	.-4      	; 0x21b6 <LCD_sendCommand+0x120>
    21ba:	fe 01       	movw	r30, r28
    21bc:	e9 5a       	subi	r30, 0xA9	; 169
    21be:	ff 4f       	sbci	r31, 0xFF	; 255
    21c0:	91 83       	std	Z+1, r25	; 0x01
    21c2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21c4:	de 01       	movw	r26, r28
    21c6:	a7 5a       	subi	r26, 0xA7	; 167
    21c8:	bf 4f       	sbci	r27, 0xFF	; 255
    21ca:	fe 01       	movw	r30, r28
    21cc:	e7 5a       	subi	r30, 0xA7	; 167
    21ce:	ff 4f       	sbci	r31, 0xFF	; 255
    21d0:	80 81       	ld	r24, Z
    21d2:	91 81       	ldd	r25, Z+1	; 0x01
    21d4:	01 97       	sbiw	r24, 0x01	; 1
    21d6:	11 96       	adiw	r26, 0x01	; 1
    21d8:	9c 93       	st	X, r25
    21da:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21dc:	fe 01       	movw	r30, r28
    21de:	e7 5a       	subi	r30, 0xA7	; 167
    21e0:	ff 4f       	sbci	r31, 0xFF	; 255
    21e2:	80 81       	ld	r24, Z
    21e4:	91 81       	ldd	r25, Z+1	; 0x01
    21e6:	00 97       	sbiw	r24, 0x00	; 0
    21e8:	d1 f6       	brne	.-76     	; 0x219e <LCD_sendCommand+0x108>
    21ea:	27 c0       	rjmp	.+78     	; 0x223a <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ec:	8e 01       	movw	r16, r28
    21ee:	07 5a       	subi	r16, 0xA7	; 167
    21f0:	1f 4f       	sbci	r17, 0xFF	; 255
    21f2:	fe 01       	movw	r30, r28
    21f4:	e5 5a       	subi	r30, 0xA5	; 165
    21f6:	ff 4f       	sbci	r31, 0xFF	; 255
    21f8:	60 81       	ld	r22, Z
    21fa:	71 81       	ldd	r23, Z+1	; 0x01
    21fc:	82 81       	ldd	r24, Z+2	; 0x02
    21fe:	93 81       	ldd	r25, Z+3	; 0x03
    2200:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2204:	dc 01       	movw	r26, r24
    2206:	cb 01       	movw	r24, r22
    2208:	f8 01       	movw	r30, r16
    220a:	91 83       	std	Z+1, r25	; 0x01
    220c:	80 83       	st	Z, r24
    220e:	de 01       	movw	r26, r28
    2210:	ab 5a       	subi	r26, 0xAB	; 171
    2212:	bf 4f       	sbci	r27, 0xFF	; 255
    2214:	fe 01       	movw	r30, r28
    2216:	e7 5a       	subi	r30, 0xA7	; 167
    2218:	ff 4f       	sbci	r31, 0xFF	; 255
    221a:	80 81       	ld	r24, Z
    221c:	91 81       	ldd	r25, Z+1	; 0x01
    221e:	8d 93       	st	X+, r24
    2220:	9c 93       	st	X, r25
    2222:	fe 01       	movw	r30, r28
    2224:	eb 5a       	subi	r30, 0xAB	; 171
    2226:	ff 4f       	sbci	r31, 0xFF	; 255
    2228:	80 81       	ld	r24, Z
    222a:	91 81       	ldd	r25, Z+1	; 0x01
    222c:	01 97       	sbiw	r24, 0x01	; 1
    222e:	f1 f7       	brne	.-4      	; 0x222c <LCD_sendCommand+0x196>
    2230:	fe 01       	movw	r30, r28
    2232:	eb 5a       	subi	r30, 0xAB	; 171
    2234:	ff 4f       	sbci	r31, 0xFF	; 255
    2236:	91 83       	std	Z+1, r25	; 0x01
    2238:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    223a:	a2 e3       	ldi	r26, 0x32	; 50
    223c:	b0 e0       	ldi	r27, 0x00	; 0
    223e:	e2 e3       	ldi	r30, 0x32	; 50
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	80 81       	ld	r24, Z
    2244:	80 64       	ori	r24, 0x40	; 64
    2246:	8c 93       	st	X, r24
    2248:	fe 01       	movw	r30, r28
    224a:	ef 5a       	subi	r30, 0xAF	; 175
    224c:	ff 4f       	sbci	r31, 0xFF	; 255
    224e:	80 e0       	ldi	r24, 0x00	; 0
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	a0 e8       	ldi	r26, 0x80	; 128
    2254:	bf e3       	ldi	r27, 0x3F	; 63
    2256:	80 83       	st	Z, r24
    2258:	91 83       	std	Z+1, r25	; 0x01
    225a:	a2 83       	std	Z+2, r26	; 0x02
    225c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    225e:	8e 01       	movw	r16, r28
    2260:	03 5b       	subi	r16, 0xB3	; 179
    2262:	1f 4f       	sbci	r17, 0xFF	; 255
    2264:	fe 01       	movw	r30, r28
    2266:	ef 5a       	subi	r30, 0xAF	; 175
    2268:	ff 4f       	sbci	r31, 0xFF	; 255
    226a:	60 81       	ld	r22, Z
    226c:	71 81       	ldd	r23, Z+1	; 0x01
    226e:	82 81       	ldd	r24, Z+2	; 0x02
    2270:	93 81       	ldd	r25, Z+3	; 0x03
    2272:	20 e0       	ldi	r18, 0x00	; 0
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	4a ef       	ldi	r20, 0xFA	; 250
    2278:	54 e4       	ldi	r21, 0x44	; 68
    227a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    227e:	dc 01       	movw	r26, r24
    2280:	cb 01       	movw	r24, r22
    2282:	f8 01       	movw	r30, r16
    2284:	80 83       	st	Z, r24
    2286:	91 83       	std	Z+1, r25	; 0x01
    2288:	a2 83       	std	Z+2, r26	; 0x02
    228a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    228c:	fe 01       	movw	r30, r28
    228e:	e3 5b       	subi	r30, 0xB3	; 179
    2290:	ff 4f       	sbci	r31, 0xFF	; 255
    2292:	60 81       	ld	r22, Z
    2294:	71 81       	ldd	r23, Z+1	; 0x01
    2296:	82 81       	ldd	r24, Z+2	; 0x02
    2298:	93 81       	ldd	r25, Z+3	; 0x03
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	40 e8       	ldi	r20, 0x80	; 128
    22a0:	5f e3       	ldi	r21, 0x3F	; 63
    22a2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22a6:	88 23       	and	r24, r24
    22a8:	44 f4       	brge	.+16     	; 0x22ba <LCD_sendCommand+0x224>
		__ticks = 1;
    22aa:	fe 01       	movw	r30, r28
    22ac:	e5 5b       	subi	r30, 0xB5	; 181
    22ae:	ff 4f       	sbci	r31, 0xFF	; 255
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	91 83       	std	Z+1, r25	; 0x01
    22b6:	80 83       	st	Z, r24
    22b8:	64 c0       	rjmp	.+200    	; 0x2382 <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
    22ba:	fe 01       	movw	r30, r28
    22bc:	e3 5b       	subi	r30, 0xB3	; 179
    22be:	ff 4f       	sbci	r31, 0xFF	; 255
    22c0:	60 81       	ld	r22, Z
    22c2:	71 81       	ldd	r23, Z+1	; 0x01
    22c4:	82 81       	ldd	r24, Z+2	; 0x02
    22c6:	93 81       	ldd	r25, Z+3	; 0x03
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	3f ef       	ldi	r19, 0xFF	; 255
    22cc:	4f e7       	ldi	r20, 0x7F	; 127
    22ce:	57 e4       	ldi	r21, 0x47	; 71
    22d0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22d4:	18 16       	cp	r1, r24
    22d6:	0c f0       	brlt	.+2      	; 0x22da <LCD_sendCommand+0x244>
    22d8:	43 c0       	rjmp	.+134    	; 0x2360 <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22da:	fe 01       	movw	r30, r28
    22dc:	ef 5a       	subi	r30, 0xAF	; 175
    22de:	ff 4f       	sbci	r31, 0xFF	; 255
    22e0:	60 81       	ld	r22, Z
    22e2:	71 81       	ldd	r23, Z+1	; 0x01
    22e4:	82 81       	ldd	r24, Z+2	; 0x02
    22e6:	93 81       	ldd	r25, Z+3	; 0x03
    22e8:	20 e0       	ldi	r18, 0x00	; 0
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	40 e2       	ldi	r20, 0x20	; 32
    22ee:	51 e4       	ldi	r21, 0x41	; 65
    22f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22f4:	dc 01       	movw	r26, r24
    22f6:	cb 01       	movw	r24, r22
    22f8:	8e 01       	movw	r16, r28
    22fa:	05 5b       	subi	r16, 0xB5	; 181
    22fc:	1f 4f       	sbci	r17, 0xFF	; 255
    22fe:	bc 01       	movw	r22, r24
    2300:	cd 01       	movw	r24, r26
    2302:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	f8 01       	movw	r30, r16
    230c:	91 83       	std	Z+1, r25	; 0x01
    230e:	80 83       	st	Z, r24
    2310:	1f c0       	rjmp	.+62     	; 0x2350 <LCD_sendCommand+0x2ba>
    2312:	fe 01       	movw	r30, r28
    2314:	e7 5b       	subi	r30, 0xB7	; 183
    2316:	ff 4f       	sbci	r31, 0xFF	; 255
    2318:	88 ec       	ldi	r24, 0xC8	; 200
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	91 83       	std	Z+1, r25	; 0x01
    231e:	80 83       	st	Z, r24
    2320:	fe 01       	movw	r30, r28
    2322:	e7 5b       	subi	r30, 0xB7	; 183
    2324:	ff 4f       	sbci	r31, 0xFF	; 255
    2326:	80 81       	ld	r24, Z
    2328:	91 81       	ldd	r25, Z+1	; 0x01
    232a:	01 97       	sbiw	r24, 0x01	; 1
    232c:	f1 f7       	brne	.-4      	; 0x232a <LCD_sendCommand+0x294>
    232e:	fe 01       	movw	r30, r28
    2330:	e7 5b       	subi	r30, 0xB7	; 183
    2332:	ff 4f       	sbci	r31, 0xFF	; 255
    2334:	91 83       	std	Z+1, r25	; 0x01
    2336:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2338:	de 01       	movw	r26, r28
    233a:	a5 5b       	subi	r26, 0xB5	; 181
    233c:	bf 4f       	sbci	r27, 0xFF	; 255
    233e:	fe 01       	movw	r30, r28
    2340:	e5 5b       	subi	r30, 0xB5	; 181
    2342:	ff 4f       	sbci	r31, 0xFF	; 255
    2344:	80 81       	ld	r24, Z
    2346:	91 81       	ldd	r25, Z+1	; 0x01
    2348:	01 97       	sbiw	r24, 0x01	; 1
    234a:	11 96       	adiw	r26, 0x01	; 1
    234c:	9c 93       	st	X, r25
    234e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2350:	fe 01       	movw	r30, r28
    2352:	e5 5b       	subi	r30, 0xB5	; 181
    2354:	ff 4f       	sbci	r31, 0xFF	; 255
    2356:	80 81       	ld	r24, Z
    2358:	91 81       	ldd	r25, Z+1	; 0x01
    235a:	00 97       	sbiw	r24, 0x00	; 0
    235c:	d1 f6       	brne	.-76     	; 0x2312 <LCD_sendCommand+0x27c>
    235e:	27 c0       	rjmp	.+78     	; 0x23ae <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2360:	8e 01       	movw	r16, r28
    2362:	05 5b       	subi	r16, 0xB5	; 181
    2364:	1f 4f       	sbci	r17, 0xFF	; 255
    2366:	fe 01       	movw	r30, r28
    2368:	e3 5b       	subi	r30, 0xB3	; 179
    236a:	ff 4f       	sbci	r31, 0xFF	; 255
    236c:	60 81       	ld	r22, Z
    236e:	71 81       	ldd	r23, Z+1	; 0x01
    2370:	82 81       	ldd	r24, Z+2	; 0x02
    2372:	93 81       	ldd	r25, Z+3	; 0x03
    2374:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	f8 01       	movw	r30, r16
    237e:	91 83       	std	Z+1, r25	; 0x01
    2380:	80 83       	st	Z, r24
    2382:	de 01       	movw	r26, r28
    2384:	a9 5b       	subi	r26, 0xB9	; 185
    2386:	bf 4f       	sbci	r27, 0xFF	; 255
    2388:	fe 01       	movw	r30, r28
    238a:	e5 5b       	subi	r30, 0xB5	; 181
    238c:	ff 4f       	sbci	r31, 0xFF	; 255
    238e:	80 81       	ld	r24, Z
    2390:	91 81       	ldd	r25, Z+1	; 0x01
    2392:	8d 93       	st	X+, r24
    2394:	9c 93       	st	X, r25
    2396:	fe 01       	movw	r30, r28
    2398:	e9 5b       	subi	r30, 0xB9	; 185
    239a:	ff 4f       	sbci	r31, 0xFF	; 255
    239c:	80 81       	ld	r24, Z
    239e:	91 81       	ldd	r25, Z+1	; 0x01
    23a0:	01 97       	sbiw	r24, 0x01	; 1
    23a2:	f1 f7       	brne	.-4      	; 0x23a0 <LCD_sendCommand+0x30a>
    23a4:	fe 01       	movw	r30, r28
    23a6:	e9 5b       	subi	r30, 0xB9	; 185
    23a8:	ff 4f       	sbci	r31, 0xFF	; 255
    23aa:	91 83       	std	Z+1, r25	; 0x01
    23ac:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	#if (DATA_BITS_MODE == 4)
		/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT = (command & 0xF0); 
    23ae:	a5 e3       	ldi	r26, 0x35	; 53
    23b0:	b0 e0       	ldi	r27, 0x00	; 0
    23b2:	fe 01       	movw	r30, r28
    23b4:	ed 59       	subi	r30, 0x9D	; 157
    23b6:	ff 4f       	sbci	r31, 0xFF	; 255
    23b8:	80 81       	ld	r24, Z
    23ba:	80 7f       	andi	r24, 0xF0	; 240
    23bc:	8c 93       	st	X, r24
    23be:	fe 01       	movw	r30, r28
    23c0:	ed 5b       	subi	r30, 0xBD	; 189
    23c2:	ff 4f       	sbci	r31, 0xFF	; 255
    23c4:	80 e0       	ldi	r24, 0x00	; 0
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	a0 e8       	ldi	r26, 0x80	; 128
    23ca:	bf e3       	ldi	r27, 0x3F	; 63
    23cc:	80 83       	st	Z, r24
    23ce:	91 83       	std	Z+1, r25	; 0x01
    23d0:	a2 83       	std	Z+2, r26	; 0x02
    23d2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23d4:	8e 01       	movw	r16, r28
    23d6:	01 5c       	subi	r16, 0xC1	; 193
    23d8:	1f 4f       	sbci	r17, 0xFF	; 255
    23da:	fe 01       	movw	r30, r28
    23dc:	ed 5b       	subi	r30, 0xBD	; 189
    23de:	ff 4f       	sbci	r31, 0xFF	; 255
    23e0:	60 81       	ld	r22, Z
    23e2:	71 81       	ldd	r23, Z+1	; 0x01
    23e4:	82 81       	ldd	r24, Z+2	; 0x02
    23e6:	93 81       	ldd	r25, Z+3	; 0x03
    23e8:	20 e0       	ldi	r18, 0x00	; 0
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	4a ef       	ldi	r20, 0xFA	; 250
    23ee:	54 e4       	ldi	r21, 0x44	; 68
    23f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23f4:	dc 01       	movw	r26, r24
    23f6:	cb 01       	movw	r24, r22
    23f8:	f8 01       	movw	r30, r16
    23fa:	80 83       	st	Z, r24
    23fc:	91 83       	std	Z+1, r25	; 0x01
    23fe:	a2 83       	std	Z+2, r26	; 0x02
    2400:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2402:	fe 01       	movw	r30, r28
    2404:	ff 96       	adiw	r30, 0x3f	; 63
    2406:	60 81       	ld	r22, Z
    2408:	71 81       	ldd	r23, Z+1	; 0x01
    240a:	82 81       	ldd	r24, Z+2	; 0x02
    240c:	93 81       	ldd	r25, Z+3	; 0x03
    240e:	20 e0       	ldi	r18, 0x00	; 0
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	40 e8       	ldi	r20, 0x80	; 128
    2414:	5f e3       	ldi	r21, 0x3F	; 63
    2416:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    241a:	88 23       	and	r24, r24
    241c:	2c f4       	brge	.+10     	; 0x2428 <LCD_sendCommand+0x392>
		__ticks = 1;
    241e:	81 e0       	ldi	r24, 0x01	; 1
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	9e af       	std	Y+62, r25	; 0x3e
    2424:	8d af       	std	Y+61, r24	; 0x3d
    2426:	46 c0       	rjmp	.+140    	; 0x24b4 <LCD_sendCommand+0x41e>
	else if (__tmp > 65535)
    2428:	fe 01       	movw	r30, r28
    242a:	ff 96       	adiw	r30, 0x3f	; 63
    242c:	60 81       	ld	r22, Z
    242e:	71 81       	ldd	r23, Z+1	; 0x01
    2430:	82 81       	ldd	r24, Z+2	; 0x02
    2432:	93 81       	ldd	r25, Z+3	; 0x03
    2434:	20 e0       	ldi	r18, 0x00	; 0
    2436:	3f ef       	ldi	r19, 0xFF	; 255
    2438:	4f e7       	ldi	r20, 0x7F	; 127
    243a:	57 e4       	ldi	r21, 0x47	; 71
    243c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2440:	18 16       	cp	r1, r24
    2442:	64 f5       	brge	.+88     	; 0x249c <LCD_sendCommand+0x406>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2444:	fe 01       	movw	r30, r28
    2446:	ed 5b       	subi	r30, 0xBD	; 189
    2448:	ff 4f       	sbci	r31, 0xFF	; 255
    244a:	60 81       	ld	r22, Z
    244c:	71 81       	ldd	r23, Z+1	; 0x01
    244e:	82 81       	ldd	r24, Z+2	; 0x02
    2450:	93 81       	ldd	r25, Z+3	; 0x03
    2452:	20 e0       	ldi	r18, 0x00	; 0
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	40 e2       	ldi	r20, 0x20	; 32
    2458:	51 e4       	ldi	r21, 0x41	; 65
    245a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    245e:	dc 01       	movw	r26, r24
    2460:	cb 01       	movw	r24, r22
    2462:	bc 01       	movw	r22, r24
    2464:	cd 01       	movw	r24, r26
    2466:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    246a:	dc 01       	movw	r26, r24
    246c:	cb 01       	movw	r24, r22
    246e:	9e af       	std	Y+62, r25	; 0x3e
    2470:	8d af       	std	Y+61, r24	; 0x3d
    2472:	0f c0       	rjmp	.+30     	; 0x2492 <LCD_sendCommand+0x3fc>
    2474:	88 ec       	ldi	r24, 0xC8	; 200
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	9c af       	std	Y+60, r25	; 0x3c
    247a:	8b af       	std	Y+59, r24	; 0x3b
    247c:	8b ad       	ldd	r24, Y+59	; 0x3b
    247e:	9c ad       	ldd	r25, Y+60	; 0x3c
    2480:	01 97       	sbiw	r24, 0x01	; 1
    2482:	f1 f7       	brne	.-4      	; 0x2480 <LCD_sendCommand+0x3ea>
    2484:	9c af       	std	Y+60, r25	; 0x3c
    2486:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2488:	8d ad       	ldd	r24, Y+61	; 0x3d
    248a:	9e ad       	ldd	r25, Y+62	; 0x3e
    248c:	01 97       	sbiw	r24, 0x01	; 1
    248e:	9e af       	std	Y+62, r25	; 0x3e
    2490:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2492:	8d ad       	ldd	r24, Y+61	; 0x3d
    2494:	9e ad       	ldd	r25, Y+62	; 0x3e
    2496:	00 97       	sbiw	r24, 0x00	; 0
    2498:	69 f7       	brne	.-38     	; 0x2474 <LCD_sendCommand+0x3de>
    249a:	16 c0       	rjmp	.+44     	; 0x24c8 <LCD_sendCommand+0x432>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    249c:	fe 01       	movw	r30, r28
    249e:	ff 96       	adiw	r30, 0x3f	; 63
    24a0:	60 81       	ld	r22, Z
    24a2:	71 81       	ldd	r23, Z+1	; 0x01
    24a4:	82 81       	ldd	r24, Z+2	; 0x02
    24a6:	93 81       	ldd	r25, Z+3	; 0x03
    24a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24ac:	dc 01       	movw	r26, r24
    24ae:	cb 01       	movw	r24, r22
    24b0:	9e af       	std	Y+62, r25	; 0x3e
    24b2:	8d af       	std	Y+61, r24	; 0x3d
    24b4:	8d ad       	ldd	r24, Y+61	; 0x3d
    24b6:	9e ad       	ldd	r25, Y+62	; 0x3e
    24b8:	9a af       	std	Y+58, r25	; 0x3a
    24ba:	89 af       	std	Y+57, r24	; 0x39
    24bc:	89 ad       	ldd	r24, Y+57	; 0x39
    24be:	9a ad       	ldd	r25, Y+58	; 0x3a
    24c0:	01 97       	sbiw	r24, 0x01	; 1
    24c2:	f1 f7       	brne	.-4      	; 0x24c0 <LCD_sendCommand+0x42a>
    24c4:	9a af       	std	Y+58, r25	; 0x3a
    24c6:	89 af       	std	Y+57, r24	; 0x39
		#else 
			LCD_DATA_PORT = ((command >> 4) & 0x0F);
		#endif
			
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    24c8:	a2 e3       	ldi	r26, 0x32	; 50
    24ca:	b0 e0       	ldi	r27, 0x00	; 0
    24cc:	e2 e3       	ldi	r30, 0x32	; 50
    24ce:	f0 e0       	ldi	r31, 0x00	; 0
    24d0:	80 81       	ld	r24, Z
    24d2:	8f 7b       	andi	r24, 0xBF	; 191
    24d4:	8c 93       	st	X, r24
    24d6:	80 e0       	ldi	r24, 0x00	; 0
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	a0 e8       	ldi	r26, 0x80	; 128
    24dc:	bf e3       	ldi	r27, 0x3F	; 63
    24de:	8d ab       	std	Y+53, r24	; 0x35
    24e0:	9e ab       	std	Y+54, r25	; 0x36
    24e2:	af ab       	std	Y+55, r26	; 0x37
    24e4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24e6:	6d a9       	ldd	r22, Y+53	; 0x35
    24e8:	7e a9       	ldd	r23, Y+54	; 0x36
    24ea:	8f a9       	ldd	r24, Y+55	; 0x37
    24ec:	98 ad       	ldd	r25, Y+56	; 0x38
    24ee:	20 e0       	ldi	r18, 0x00	; 0
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	4a ef       	ldi	r20, 0xFA	; 250
    24f4:	54 e4       	ldi	r21, 0x44	; 68
    24f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24fa:	dc 01       	movw	r26, r24
    24fc:	cb 01       	movw	r24, r22
    24fe:	89 ab       	std	Y+49, r24	; 0x31
    2500:	9a ab       	std	Y+50, r25	; 0x32
    2502:	ab ab       	std	Y+51, r26	; 0x33
    2504:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2506:	69 a9       	ldd	r22, Y+49	; 0x31
    2508:	7a a9       	ldd	r23, Y+50	; 0x32
    250a:	8b a9       	ldd	r24, Y+51	; 0x33
    250c:	9c a9       	ldd	r25, Y+52	; 0x34
    250e:	20 e0       	ldi	r18, 0x00	; 0
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	40 e8       	ldi	r20, 0x80	; 128
    2514:	5f e3       	ldi	r21, 0x3F	; 63
    2516:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    251a:	88 23       	and	r24, r24
    251c:	2c f4       	brge	.+10     	; 0x2528 <LCD_sendCommand+0x492>
		__ticks = 1;
    251e:	81 e0       	ldi	r24, 0x01	; 1
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	98 ab       	std	Y+48, r25	; 0x30
    2524:	8f a7       	std	Y+47, r24	; 0x2f
    2526:	3f c0       	rjmp	.+126    	; 0x25a6 <LCD_sendCommand+0x510>
	else if (__tmp > 65535)
    2528:	69 a9       	ldd	r22, Y+49	; 0x31
    252a:	7a a9       	ldd	r23, Y+50	; 0x32
    252c:	8b a9       	ldd	r24, Y+51	; 0x33
    252e:	9c a9       	ldd	r25, Y+52	; 0x34
    2530:	20 e0       	ldi	r18, 0x00	; 0
    2532:	3f ef       	ldi	r19, 0xFF	; 255
    2534:	4f e7       	ldi	r20, 0x7F	; 127
    2536:	57 e4       	ldi	r21, 0x47	; 71
    2538:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    253c:	18 16       	cp	r1, r24
    253e:	4c f5       	brge	.+82     	; 0x2592 <LCD_sendCommand+0x4fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2540:	6d a9       	ldd	r22, Y+53	; 0x35
    2542:	7e a9       	ldd	r23, Y+54	; 0x36
    2544:	8f a9       	ldd	r24, Y+55	; 0x37
    2546:	98 ad       	ldd	r25, Y+56	; 0x38
    2548:	20 e0       	ldi	r18, 0x00	; 0
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	40 e2       	ldi	r20, 0x20	; 32
    254e:	51 e4       	ldi	r21, 0x41	; 65
    2550:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2554:	dc 01       	movw	r26, r24
    2556:	cb 01       	movw	r24, r22
    2558:	bc 01       	movw	r22, r24
    255a:	cd 01       	movw	r24, r26
    255c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2560:	dc 01       	movw	r26, r24
    2562:	cb 01       	movw	r24, r22
    2564:	98 ab       	std	Y+48, r25	; 0x30
    2566:	8f a7       	std	Y+47, r24	; 0x2f
    2568:	0f c0       	rjmp	.+30     	; 0x2588 <LCD_sendCommand+0x4f2>
    256a:	88 ec       	ldi	r24, 0xC8	; 200
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	9e a7       	std	Y+46, r25	; 0x2e
    2570:	8d a7       	std	Y+45, r24	; 0x2d
    2572:	8d a5       	ldd	r24, Y+45	; 0x2d
    2574:	9e a5       	ldd	r25, Y+46	; 0x2e
    2576:	01 97       	sbiw	r24, 0x01	; 1
    2578:	f1 f7       	brne	.-4      	; 0x2576 <LCD_sendCommand+0x4e0>
    257a:	9e a7       	std	Y+46, r25	; 0x2e
    257c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    257e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2580:	98 a9       	ldd	r25, Y+48	; 0x30
    2582:	01 97       	sbiw	r24, 0x01	; 1
    2584:	98 ab       	std	Y+48, r25	; 0x30
    2586:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2588:	8f a5       	ldd	r24, Y+47	; 0x2f
    258a:	98 a9       	ldd	r25, Y+48	; 0x30
    258c:	00 97       	sbiw	r24, 0x00	; 0
    258e:	69 f7       	brne	.-38     	; 0x256a <LCD_sendCommand+0x4d4>
    2590:	14 c0       	rjmp	.+40     	; 0x25ba <LCD_sendCommand+0x524>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2592:	69 a9       	ldd	r22, Y+49	; 0x31
    2594:	7a a9       	ldd	r23, Y+50	; 0x32
    2596:	8b a9       	ldd	r24, Y+51	; 0x33
    2598:	9c a9       	ldd	r25, Y+52	; 0x34
    259a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    259e:	dc 01       	movw	r26, r24
    25a0:	cb 01       	movw	r24, r22
    25a2:	98 ab       	std	Y+48, r25	; 0x30
    25a4:	8f a7       	std	Y+47, r24	; 0x2f
    25a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    25a8:	98 a9       	ldd	r25, Y+48	; 0x30
    25aa:	9c a7       	std	Y+44, r25	; 0x2c
    25ac:	8b a7       	std	Y+43, r24	; 0x2b
    25ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    25b0:	9c a5       	ldd	r25, Y+44	; 0x2c
    25b2:	01 97       	sbiw	r24, 0x01	; 1
    25b4:	f1 f7       	brne	.-4      	; 0x25b2 <LCD_sendCommand+0x51c>
    25b6:	9c a7       	std	Y+44, r25	; 0x2c
    25b8:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1); /* delay for processing Th = 13ns */
		SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    25ba:	a2 e3       	ldi	r26, 0x32	; 50
    25bc:	b0 e0       	ldi	r27, 0x00	; 0
    25be:	e2 e3       	ldi	r30, 0x32	; 50
    25c0:	f0 e0       	ldi	r31, 0x00	; 0
    25c2:	80 81       	ld	r24, Z
    25c4:	80 64       	ori	r24, 0x40	; 64
    25c6:	8c 93       	st	X, r24
    25c8:	80 e0       	ldi	r24, 0x00	; 0
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	a0 e8       	ldi	r26, 0x80	; 128
    25ce:	bf e3       	ldi	r27, 0x3F	; 63
    25d0:	8f a3       	std	Y+39, r24	; 0x27
    25d2:	98 a7       	std	Y+40, r25	; 0x28
    25d4:	a9 a7       	std	Y+41, r26	; 0x29
    25d6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25d8:	6f a1       	ldd	r22, Y+39	; 0x27
    25da:	78 a5       	ldd	r23, Y+40	; 0x28
    25dc:	89 a5       	ldd	r24, Y+41	; 0x29
    25de:	9a a5       	ldd	r25, Y+42	; 0x2a
    25e0:	20 e0       	ldi	r18, 0x00	; 0
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	4a ef       	ldi	r20, 0xFA	; 250
    25e6:	54 e4       	ldi	r21, 0x44	; 68
    25e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	8b a3       	std	Y+35, r24	; 0x23
    25f2:	9c a3       	std	Y+36, r25	; 0x24
    25f4:	ad a3       	std	Y+37, r26	; 0x25
    25f6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    25f8:	6b a1       	ldd	r22, Y+35	; 0x23
    25fa:	7c a1       	ldd	r23, Y+36	; 0x24
    25fc:	8d a1       	ldd	r24, Y+37	; 0x25
    25fe:	9e a1       	ldd	r25, Y+38	; 0x26
    2600:	20 e0       	ldi	r18, 0x00	; 0
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	40 e8       	ldi	r20, 0x80	; 128
    2606:	5f e3       	ldi	r21, 0x3F	; 63
    2608:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    260c:	88 23       	and	r24, r24
    260e:	2c f4       	brge	.+10     	; 0x261a <LCD_sendCommand+0x584>
		__ticks = 1;
    2610:	81 e0       	ldi	r24, 0x01	; 1
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	9a a3       	std	Y+34, r25	; 0x22
    2616:	89 a3       	std	Y+33, r24	; 0x21
    2618:	3f c0       	rjmp	.+126    	; 0x2698 <LCD_sendCommand+0x602>
	else if (__tmp > 65535)
    261a:	6b a1       	ldd	r22, Y+35	; 0x23
    261c:	7c a1       	ldd	r23, Y+36	; 0x24
    261e:	8d a1       	ldd	r24, Y+37	; 0x25
    2620:	9e a1       	ldd	r25, Y+38	; 0x26
    2622:	20 e0       	ldi	r18, 0x00	; 0
    2624:	3f ef       	ldi	r19, 0xFF	; 255
    2626:	4f e7       	ldi	r20, 0x7F	; 127
    2628:	57 e4       	ldi	r21, 0x47	; 71
    262a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    262e:	18 16       	cp	r1, r24
    2630:	4c f5       	brge	.+82     	; 0x2684 <LCD_sendCommand+0x5ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2632:	6f a1       	ldd	r22, Y+39	; 0x27
    2634:	78 a5       	ldd	r23, Y+40	; 0x28
    2636:	89 a5       	ldd	r24, Y+41	; 0x29
    2638:	9a a5       	ldd	r25, Y+42	; 0x2a
    263a:	20 e0       	ldi	r18, 0x00	; 0
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	40 e2       	ldi	r20, 0x20	; 32
    2640:	51 e4       	ldi	r21, 0x41	; 65
    2642:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2646:	dc 01       	movw	r26, r24
    2648:	cb 01       	movw	r24, r22
    264a:	bc 01       	movw	r22, r24
    264c:	cd 01       	movw	r24, r26
    264e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2652:	dc 01       	movw	r26, r24
    2654:	cb 01       	movw	r24, r22
    2656:	9a a3       	std	Y+34, r25	; 0x22
    2658:	89 a3       	std	Y+33, r24	; 0x21
    265a:	0f c0       	rjmp	.+30     	; 0x267a <LCD_sendCommand+0x5e4>
    265c:	88 ec       	ldi	r24, 0xC8	; 200
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	98 a3       	std	Y+32, r25	; 0x20
    2662:	8f 8f       	std	Y+31, r24	; 0x1f
    2664:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2666:	98 a1       	ldd	r25, Y+32	; 0x20
    2668:	01 97       	sbiw	r24, 0x01	; 1
    266a:	f1 f7       	brne	.-4      	; 0x2668 <LCD_sendCommand+0x5d2>
    266c:	98 a3       	std	Y+32, r25	; 0x20
    266e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2670:	89 a1       	ldd	r24, Y+33	; 0x21
    2672:	9a a1       	ldd	r25, Y+34	; 0x22
    2674:	01 97       	sbiw	r24, 0x01	; 1
    2676:	9a a3       	std	Y+34, r25	; 0x22
    2678:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    267a:	89 a1       	ldd	r24, Y+33	; 0x21
    267c:	9a a1       	ldd	r25, Y+34	; 0x22
    267e:	00 97       	sbiw	r24, 0x00	; 0
    2680:	69 f7       	brne	.-38     	; 0x265c <LCD_sendCommand+0x5c6>
    2682:	14 c0       	rjmp	.+40     	; 0x26ac <LCD_sendCommand+0x616>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2684:	6b a1       	ldd	r22, Y+35	; 0x23
    2686:	7c a1       	ldd	r23, Y+36	; 0x24
    2688:	8d a1       	ldd	r24, Y+37	; 0x25
    268a:	9e a1       	ldd	r25, Y+38	; 0x26
    268c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	9a a3       	std	Y+34, r25	; 0x22
    2696:	89 a3       	std	Y+33, r24	; 0x21
    2698:	89 a1       	ldd	r24, Y+33	; 0x21
    269a:	9a a1       	ldd	r25, Y+34	; 0x22
    269c:	9e 8f       	std	Y+30, r25	; 0x1e
    269e:	8d 8f       	std	Y+29, r24	; 0x1d
    26a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26a4:	01 97       	sbiw	r24, 0x01	; 1
    26a6:	f1 f7       	brne	.-4      	; 0x26a4 <LCD_sendCommand+0x60e>
    26a8:	9e 8f       	std	Y+30, r25	; 0x1e
    26aa:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
		
		/* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT = (command << 4) & 0xF0; 
    26ac:	a5 e3       	ldi	r26, 0x35	; 53
    26ae:	b0 e0       	ldi	r27, 0x00	; 0
    26b0:	fe 01       	movw	r30, r28
    26b2:	ed 59       	subi	r30, 0x9D	; 157
    26b4:	ff 4f       	sbci	r31, 0xFF	; 255
    26b6:	80 81       	ld	r24, Z
    26b8:	88 2f       	mov	r24, r24
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	82 95       	swap	r24
    26be:	92 95       	swap	r25
    26c0:	90 7f       	andi	r25, 0xF0	; 240
    26c2:	98 27       	eor	r25, r24
    26c4:	80 7f       	andi	r24, 0xF0	; 240
    26c6:	98 27       	eor	r25, r24
    26c8:	8c 93       	st	X, r24
    26ca:	80 e0       	ldi	r24, 0x00	; 0
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	a0 e8       	ldi	r26, 0x80	; 128
    26d0:	bf e3       	ldi	r27, 0x3F	; 63
    26d2:	89 8f       	std	Y+25, r24	; 0x19
    26d4:	9a 8f       	std	Y+26, r25	; 0x1a
    26d6:	ab 8f       	std	Y+27, r26	; 0x1b
    26d8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26da:	69 8d       	ldd	r22, Y+25	; 0x19
    26dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26e2:	20 e0       	ldi	r18, 0x00	; 0
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	4a ef       	ldi	r20, 0xFA	; 250
    26e8:	54 e4       	ldi	r21, 0x44	; 68
    26ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26ee:	dc 01       	movw	r26, r24
    26f0:	cb 01       	movw	r24, r22
    26f2:	8d 8b       	std	Y+21, r24	; 0x15
    26f4:	9e 8b       	std	Y+22, r25	; 0x16
    26f6:	af 8b       	std	Y+23, r26	; 0x17
    26f8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26fa:	6d 89       	ldd	r22, Y+21	; 0x15
    26fc:	7e 89       	ldd	r23, Y+22	; 0x16
    26fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2700:	98 8d       	ldd	r25, Y+24	; 0x18
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	40 e8       	ldi	r20, 0x80	; 128
    2708:	5f e3       	ldi	r21, 0x3F	; 63
    270a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    270e:	88 23       	and	r24, r24
    2710:	2c f4       	brge	.+10     	; 0x271c <LCD_sendCommand+0x686>
		__ticks = 1;
    2712:	81 e0       	ldi	r24, 0x01	; 1
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	9c 8b       	std	Y+20, r25	; 0x14
    2718:	8b 8b       	std	Y+19, r24	; 0x13
    271a:	3f c0       	rjmp	.+126    	; 0x279a <LCD_sendCommand+0x704>
	else if (__tmp > 65535)
    271c:	6d 89       	ldd	r22, Y+21	; 0x15
    271e:	7e 89       	ldd	r23, Y+22	; 0x16
    2720:	8f 89       	ldd	r24, Y+23	; 0x17
    2722:	98 8d       	ldd	r25, Y+24	; 0x18
    2724:	20 e0       	ldi	r18, 0x00	; 0
    2726:	3f ef       	ldi	r19, 0xFF	; 255
    2728:	4f e7       	ldi	r20, 0x7F	; 127
    272a:	57 e4       	ldi	r21, 0x47	; 71
    272c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2730:	18 16       	cp	r1, r24
    2732:	4c f5       	brge	.+82     	; 0x2786 <LCD_sendCommand+0x6f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2734:	69 8d       	ldd	r22, Y+25	; 0x19
    2736:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2738:	8b 8d       	ldd	r24, Y+27	; 0x1b
    273a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	40 e2       	ldi	r20, 0x20	; 32
    2742:	51 e4       	ldi	r21, 0x41	; 65
    2744:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2748:	dc 01       	movw	r26, r24
    274a:	cb 01       	movw	r24, r22
    274c:	bc 01       	movw	r22, r24
    274e:	cd 01       	movw	r24, r26
    2750:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2754:	dc 01       	movw	r26, r24
    2756:	cb 01       	movw	r24, r22
    2758:	9c 8b       	std	Y+20, r25	; 0x14
    275a:	8b 8b       	std	Y+19, r24	; 0x13
    275c:	0f c0       	rjmp	.+30     	; 0x277c <LCD_sendCommand+0x6e6>
    275e:	88 ec       	ldi	r24, 0xC8	; 200
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	9a 8b       	std	Y+18, r25	; 0x12
    2764:	89 8b       	std	Y+17, r24	; 0x11
    2766:	89 89       	ldd	r24, Y+17	; 0x11
    2768:	9a 89       	ldd	r25, Y+18	; 0x12
    276a:	01 97       	sbiw	r24, 0x01	; 1
    276c:	f1 f7       	brne	.-4      	; 0x276a <LCD_sendCommand+0x6d4>
    276e:	9a 8b       	std	Y+18, r25	; 0x12
    2770:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2772:	8b 89       	ldd	r24, Y+19	; 0x13
    2774:	9c 89       	ldd	r25, Y+20	; 0x14
    2776:	01 97       	sbiw	r24, 0x01	; 1
    2778:	9c 8b       	std	Y+20, r25	; 0x14
    277a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    277c:	8b 89       	ldd	r24, Y+19	; 0x13
    277e:	9c 89       	ldd	r25, Y+20	; 0x14
    2780:	00 97       	sbiw	r24, 0x00	; 0
    2782:	69 f7       	brne	.-38     	; 0x275e <LCD_sendCommand+0x6c8>
    2784:	14 c0       	rjmp	.+40     	; 0x27ae <LCD_sendCommand+0x718>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2786:	6d 89       	ldd	r22, Y+21	; 0x15
    2788:	7e 89       	ldd	r23, Y+22	; 0x16
    278a:	8f 89       	ldd	r24, Y+23	; 0x17
    278c:	98 8d       	ldd	r25, Y+24	; 0x18
    278e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2792:	dc 01       	movw	r26, r24
    2794:	cb 01       	movw	r24, r22
    2796:	9c 8b       	std	Y+20, r25	; 0x14
    2798:	8b 8b       	std	Y+19, r24	; 0x13
    279a:	8b 89       	ldd	r24, Y+19	; 0x13
    279c:	9c 89       	ldd	r25, Y+20	; 0x14
    279e:	98 8b       	std	Y+16, r25	; 0x10
    27a0:	8f 87       	std	Y+15, r24	; 0x0f
    27a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    27a4:	98 89       	ldd	r25, Y+16	; 0x10
    27a6:	01 97       	sbiw	r24, 0x01	; 1
    27a8:	f1 f7       	brne	.-4      	; 0x27a6 <LCD_sendCommand+0x710>
    27aa:	98 8b       	std	Y+16, r25	; 0x10
    27ac:	8f 87       	std	Y+15, r24	; 0x0f
		#else 
			LCD_DATA_PORT = (command & 0x0F);
		#endif
		
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    27ae:	a2 e3       	ldi	r26, 0x32	; 50
    27b0:	b0 e0       	ldi	r27, 0x00	; 0
    27b2:	e2 e3       	ldi	r30, 0x32	; 50
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	80 81       	ld	r24, Z
    27b8:	8f 7b       	andi	r24, 0xBF	; 191
    27ba:	8c 93       	st	X, r24
    27bc:	80 e0       	ldi	r24, 0x00	; 0
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	a0 e8       	ldi	r26, 0x80	; 128
    27c2:	bf e3       	ldi	r27, 0x3F	; 63
    27c4:	8b 87       	std	Y+11, r24	; 0x0b
    27c6:	9c 87       	std	Y+12, r25	; 0x0c
    27c8:	ad 87       	std	Y+13, r26	; 0x0d
    27ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    27ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    27d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    27d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    27d4:	20 e0       	ldi	r18, 0x00	; 0
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	4a ef       	ldi	r20, 0xFA	; 250
    27da:	54 e4       	ldi	r21, 0x44	; 68
    27dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27e0:	dc 01       	movw	r26, r24
    27e2:	cb 01       	movw	r24, r22
    27e4:	8f 83       	std	Y+7, r24	; 0x07
    27e6:	98 87       	std	Y+8, r25	; 0x08
    27e8:	a9 87       	std	Y+9, r26	; 0x09
    27ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27ec:	6f 81       	ldd	r22, Y+7	; 0x07
    27ee:	78 85       	ldd	r23, Y+8	; 0x08
    27f0:	89 85       	ldd	r24, Y+9	; 0x09
    27f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f4:	20 e0       	ldi	r18, 0x00	; 0
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	40 e8       	ldi	r20, 0x80	; 128
    27fa:	5f e3       	ldi	r21, 0x3F	; 63
    27fc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2800:	88 23       	and	r24, r24
    2802:	2c f4       	brge	.+10     	; 0x280e <LCD_sendCommand+0x778>
		__ticks = 1;
    2804:	81 e0       	ldi	r24, 0x01	; 1
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	9e 83       	std	Y+6, r25	; 0x06
    280a:	8d 83       	std	Y+5, r24	; 0x05
    280c:	3f c0       	rjmp	.+126    	; 0x288c <LCD_sendCommand+0x7f6>
	else if (__tmp > 65535)
    280e:	6f 81       	ldd	r22, Y+7	; 0x07
    2810:	78 85       	ldd	r23, Y+8	; 0x08
    2812:	89 85       	ldd	r24, Y+9	; 0x09
    2814:	9a 85       	ldd	r25, Y+10	; 0x0a
    2816:	20 e0       	ldi	r18, 0x00	; 0
    2818:	3f ef       	ldi	r19, 0xFF	; 255
    281a:	4f e7       	ldi	r20, 0x7F	; 127
    281c:	57 e4       	ldi	r21, 0x47	; 71
    281e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2822:	18 16       	cp	r1, r24
    2824:	4c f5       	brge	.+82     	; 0x2878 <LCD_sendCommand+0x7e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2826:	6b 85       	ldd	r22, Y+11	; 0x0b
    2828:	7c 85       	ldd	r23, Y+12	; 0x0c
    282a:	8d 85       	ldd	r24, Y+13	; 0x0d
    282c:	9e 85       	ldd	r25, Y+14	; 0x0e
    282e:	20 e0       	ldi	r18, 0x00	; 0
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	40 e2       	ldi	r20, 0x20	; 32
    2834:	51 e4       	ldi	r21, 0x41	; 65
    2836:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    283a:	dc 01       	movw	r26, r24
    283c:	cb 01       	movw	r24, r22
    283e:	bc 01       	movw	r22, r24
    2840:	cd 01       	movw	r24, r26
    2842:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2846:	dc 01       	movw	r26, r24
    2848:	cb 01       	movw	r24, r22
    284a:	9e 83       	std	Y+6, r25	; 0x06
    284c:	8d 83       	std	Y+5, r24	; 0x05
    284e:	0f c0       	rjmp	.+30     	; 0x286e <LCD_sendCommand+0x7d8>
    2850:	88 ec       	ldi	r24, 0xC8	; 200
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	9c 83       	std	Y+4, r25	; 0x04
    2856:	8b 83       	std	Y+3, r24	; 0x03
    2858:	8b 81       	ldd	r24, Y+3	; 0x03
    285a:	9c 81       	ldd	r25, Y+4	; 0x04
    285c:	01 97       	sbiw	r24, 0x01	; 1
    285e:	f1 f7       	brne	.-4      	; 0x285c <LCD_sendCommand+0x7c6>
    2860:	9c 83       	std	Y+4, r25	; 0x04
    2862:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2864:	8d 81       	ldd	r24, Y+5	; 0x05
    2866:	9e 81       	ldd	r25, Y+6	; 0x06
    2868:	01 97       	sbiw	r24, 0x01	; 1
    286a:	9e 83       	std	Y+6, r25	; 0x06
    286c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    286e:	8d 81       	ldd	r24, Y+5	; 0x05
    2870:	9e 81       	ldd	r25, Y+6	; 0x06
    2872:	00 97       	sbiw	r24, 0x00	; 0
    2874:	69 f7       	brne	.-38     	; 0x2850 <LCD_sendCommand+0x7ba>
    2876:	14 c0       	rjmp	.+40     	; 0x28a0 <LCD_sendCommand+0x80a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2878:	6f 81       	ldd	r22, Y+7	; 0x07
    287a:	78 85       	ldd	r23, Y+8	; 0x08
    287c:	89 85       	ldd	r24, Y+9	; 0x09
    287e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2880:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2884:	dc 01       	movw	r26, r24
    2886:	cb 01       	movw	r24, r22
    2888:	9e 83       	std	Y+6, r25	; 0x06
    288a:	8d 83       	std	Y+5, r24	; 0x05
    288c:	8d 81       	ldd	r24, Y+5	; 0x05
    288e:	9e 81       	ldd	r25, Y+6	; 0x06
    2890:	9a 83       	std	Y+2, r25	; 0x02
    2892:	89 83       	std	Y+1, r24	; 0x01
    2894:	89 81       	ldd	r24, Y+1	; 0x01
    2896:	9a 81       	ldd	r25, Y+2	; 0x02
    2898:	01 97       	sbiw	r24, 0x01	; 1
    289a:	f1 f7       	brne	.-4      	; 0x2898 <LCD_sendCommand+0x802>
    289c:	9a 83       	std	Y+2, r25	; 0x02
    289e:	89 83       	std	Y+1, r24	; 0x01
		LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */ 
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
		_delay_ms(1); /* delay for processing Th = 13ns */
	#endif	
}
    28a0:	cd 59       	subi	r28, 0x9D	; 157
    28a2:	df 4f       	sbci	r29, 0xFF	; 255
    28a4:	0f b6       	in	r0, 0x3f	; 63
    28a6:	f8 94       	cli
    28a8:	de bf       	out	0x3e, r29	; 62
    28aa:	0f be       	out	0x3f, r0	; 63
    28ac:	cd bf       	out	0x3d, r28	; 61
    28ae:	cf 91       	pop	r28
    28b0:	df 91       	pop	r29
    28b2:	1f 91       	pop	r17
    28b4:	0f 91       	pop	r16
    28b6:	08 95       	ret

000028b8 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    28b8:	0f 93       	push	r16
    28ba:	1f 93       	push	r17
    28bc:	df 93       	push	r29
    28be:	cf 93       	push	r28
    28c0:	cd b7       	in	r28, 0x3d	; 61
    28c2:	de b7       	in	r29, 0x3e	; 62
    28c4:	c3 56       	subi	r28, 0x63	; 99
    28c6:	d0 40       	sbci	r29, 0x00	; 0
    28c8:	0f b6       	in	r0, 0x3f	; 63
    28ca:	f8 94       	cli
    28cc:	de bf       	out	0x3e, r29	; 62
    28ce:	0f be       	out	0x3f, r0	; 63
    28d0:	cd bf       	out	0x3d, r28	; 61
    28d2:	fe 01       	movw	r30, r28
    28d4:	ed 59       	subi	r30, 0x9D	; 157
    28d6:	ff 4f       	sbci	r31, 0xFF	; 255
    28d8:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    28da:	a2 e3       	ldi	r26, 0x32	; 50
    28dc:	b0 e0       	ldi	r27, 0x00	; 0
    28de:	e2 e3       	ldi	r30, 0x32	; 50
    28e0:	f0 e0       	ldi	r31, 0x00	; 0
    28e2:	80 81       	ld	r24, Z
    28e4:	80 61       	ori	r24, 0x10	; 16
    28e6:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    28e8:	a2 e3       	ldi	r26, 0x32	; 50
    28ea:	b0 e0       	ldi	r27, 0x00	; 0
    28ec:	e2 e3       	ldi	r30, 0x32	; 50
    28ee:	f0 e0       	ldi	r31, 0x00	; 0
    28f0:	80 81       	ld	r24, Z
    28f2:	8f 7d       	andi	r24, 0xDF	; 223
    28f4:	8c 93       	st	X, r24
    28f6:	fe 01       	movw	r30, r28
    28f8:	e1 5a       	subi	r30, 0xA1	; 161
    28fa:	ff 4f       	sbci	r31, 0xFF	; 255
    28fc:	80 e0       	ldi	r24, 0x00	; 0
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	a0 e8       	ldi	r26, 0x80	; 128
    2902:	bf e3       	ldi	r27, 0x3F	; 63
    2904:	80 83       	st	Z, r24
    2906:	91 83       	std	Z+1, r25	; 0x01
    2908:	a2 83       	std	Z+2, r26	; 0x02
    290a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    290c:	8e 01       	movw	r16, r28
    290e:	05 5a       	subi	r16, 0xA5	; 165
    2910:	1f 4f       	sbci	r17, 0xFF	; 255
    2912:	fe 01       	movw	r30, r28
    2914:	e1 5a       	subi	r30, 0xA1	; 161
    2916:	ff 4f       	sbci	r31, 0xFF	; 255
    2918:	60 81       	ld	r22, Z
    291a:	71 81       	ldd	r23, Z+1	; 0x01
    291c:	82 81       	ldd	r24, Z+2	; 0x02
    291e:	93 81       	ldd	r25, Z+3	; 0x03
    2920:	20 e0       	ldi	r18, 0x00	; 0
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	4a ef       	ldi	r20, 0xFA	; 250
    2926:	54 e4       	ldi	r21, 0x44	; 68
    2928:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    292c:	dc 01       	movw	r26, r24
    292e:	cb 01       	movw	r24, r22
    2930:	f8 01       	movw	r30, r16
    2932:	80 83       	st	Z, r24
    2934:	91 83       	std	Z+1, r25	; 0x01
    2936:	a2 83       	std	Z+2, r26	; 0x02
    2938:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    293a:	fe 01       	movw	r30, r28
    293c:	e5 5a       	subi	r30, 0xA5	; 165
    293e:	ff 4f       	sbci	r31, 0xFF	; 255
    2940:	60 81       	ld	r22, Z
    2942:	71 81       	ldd	r23, Z+1	; 0x01
    2944:	82 81       	ldd	r24, Z+2	; 0x02
    2946:	93 81       	ldd	r25, Z+3	; 0x03
    2948:	20 e0       	ldi	r18, 0x00	; 0
    294a:	30 e0       	ldi	r19, 0x00	; 0
    294c:	40 e8       	ldi	r20, 0x80	; 128
    294e:	5f e3       	ldi	r21, 0x3F	; 63
    2950:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2954:	88 23       	and	r24, r24
    2956:	44 f4       	brge	.+16     	; 0x2968 <LCD_displayCharacter+0xb0>
		__ticks = 1;
    2958:	fe 01       	movw	r30, r28
    295a:	e7 5a       	subi	r30, 0xA7	; 167
    295c:	ff 4f       	sbci	r31, 0xFF	; 255
    295e:	81 e0       	ldi	r24, 0x01	; 1
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	91 83       	std	Z+1, r25	; 0x01
    2964:	80 83       	st	Z, r24
    2966:	64 c0       	rjmp	.+200    	; 0x2a30 <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    2968:	fe 01       	movw	r30, r28
    296a:	e5 5a       	subi	r30, 0xA5	; 165
    296c:	ff 4f       	sbci	r31, 0xFF	; 255
    296e:	60 81       	ld	r22, Z
    2970:	71 81       	ldd	r23, Z+1	; 0x01
    2972:	82 81       	ldd	r24, Z+2	; 0x02
    2974:	93 81       	ldd	r25, Z+3	; 0x03
    2976:	20 e0       	ldi	r18, 0x00	; 0
    2978:	3f ef       	ldi	r19, 0xFF	; 255
    297a:	4f e7       	ldi	r20, 0x7F	; 127
    297c:	57 e4       	ldi	r21, 0x47	; 71
    297e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2982:	18 16       	cp	r1, r24
    2984:	0c f0       	brlt	.+2      	; 0x2988 <LCD_displayCharacter+0xd0>
    2986:	43 c0       	rjmp	.+134    	; 0x2a0e <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2988:	fe 01       	movw	r30, r28
    298a:	e1 5a       	subi	r30, 0xA1	; 161
    298c:	ff 4f       	sbci	r31, 0xFF	; 255
    298e:	60 81       	ld	r22, Z
    2990:	71 81       	ldd	r23, Z+1	; 0x01
    2992:	82 81       	ldd	r24, Z+2	; 0x02
    2994:	93 81       	ldd	r25, Z+3	; 0x03
    2996:	20 e0       	ldi	r18, 0x00	; 0
    2998:	30 e0       	ldi	r19, 0x00	; 0
    299a:	40 e2       	ldi	r20, 0x20	; 32
    299c:	51 e4       	ldi	r21, 0x41	; 65
    299e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29a2:	dc 01       	movw	r26, r24
    29a4:	cb 01       	movw	r24, r22
    29a6:	8e 01       	movw	r16, r28
    29a8:	07 5a       	subi	r16, 0xA7	; 167
    29aa:	1f 4f       	sbci	r17, 0xFF	; 255
    29ac:	bc 01       	movw	r22, r24
    29ae:	cd 01       	movw	r24, r26
    29b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29b4:	dc 01       	movw	r26, r24
    29b6:	cb 01       	movw	r24, r22
    29b8:	f8 01       	movw	r30, r16
    29ba:	91 83       	std	Z+1, r25	; 0x01
    29bc:	80 83       	st	Z, r24
    29be:	1f c0       	rjmp	.+62     	; 0x29fe <LCD_displayCharacter+0x146>
    29c0:	fe 01       	movw	r30, r28
    29c2:	e9 5a       	subi	r30, 0xA9	; 169
    29c4:	ff 4f       	sbci	r31, 0xFF	; 255
    29c6:	88 ec       	ldi	r24, 0xC8	; 200
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	91 83       	std	Z+1, r25	; 0x01
    29cc:	80 83       	st	Z, r24
    29ce:	fe 01       	movw	r30, r28
    29d0:	e9 5a       	subi	r30, 0xA9	; 169
    29d2:	ff 4f       	sbci	r31, 0xFF	; 255
    29d4:	80 81       	ld	r24, Z
    29d6:	91 81       	ldd	r25, Z+1	; 0x01
    29d8:	01 97       	sbiw	r24, 0x01	; 1
    29da:	f1 f7       	brne	.-4      	; 0x29d8 <LCD_displayCharacter+0x120>
    29dc:	fe 01       	movw	r30, r28
    29de:	e9 5a       	subi	r30, 0xA9	; 169
    29e0:	ff 4f       	sbci	r31, 0xFF	; 255
    29e2:	91 83       	std	Z+1, r25	; 0x01
    29e4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29e6:	de 01       	movw	r26, r28
    29e8:	a7 5a       	subi	r26, 0xA7	; 167
    29ea:	bf 4f       	sbci	r27, 0xFF	; 255
    29ec:	fe 01       	movw	r30, r28
    29ee:	e7 5a       	subi	r30, 0xA7	; 167
    29f0:	ff 4f       	sbci	r31, 0xFF	; 255
    29f2:	80 81       	ld	r24, Z
    29f4:	91 81       	ldd	r25, Z+1	; 0x01
    29f6:	01 97       	sbiw	r24, 0x01	; 1
    29f8:	11 96       	adiw	r26, 0x01	; 1
    29fa:	9c 93       	st	X, r25
    29fc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29fe:	fe 01       	movw	r30, r28
    2a00:	e7 5a       	subi	r30, 0xA7	; 167
    2a02:	ff 4f       	sbci	r31, 0xFF	; 255
    2a04:	80 81       	ld	r24, Z
    2a06:	91 81       	ldd	r25, Z+1	; 0x01
    2a08:	00 97       	sbiw	r24, 0x00	; 0
    2a0a:	d1 f6       	brne	.-76     	; 0x29c0 <LCD_displayCharacter+0x108>
    2a0c:	27 c0       	rjmp	.+78     	; 0x2a5c <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a0e:	8e 01       	movw	r16, r28
    2a10:	07 5a       	subi	r16, 0xA7	; 167
    2a12:	1f 4f       	sbci	r17, 0xFF	; 255
    2a14:	fe 01       	movw	r30, r28
    2a16:	e5 5a       	subi	r30, 0xA5	; 165
    2a18:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1a:	60 81       	ld	r22, Z
    2a1c:	71 81       	ldd	r23, Z+1	; 0x01
    2a1e:	82 81       	ldd	r24, Z+2	; 0x02
    2a20:	93 81       	ldd	r25, Z+3	; 0x03
    2a22:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a26:	dc 01       	movw	r26, r24
    2a28:	cb 01       	movw	r24, r22
    2a2a:	f8 01       	movw	r30, r16
    2a2c:	91 83       	std	Z+1, r25	; 0x01
    2a2e:	80 83       	st	Z, r24
    2a30:	de 01       	movw	r26, r28
    2a32:	ab 5a       	subi	r26, 0xAB	; 171
    2a34:	bf 4f       	sbci	r27, 0xFF	; 255
    2a36:	fe 01       	movw	r30, r28
    2a38:	e7 5a       	subi	r30, 0xA7	; 167
    2a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3c:	80 81       	ld	r24, Z
    2a3e:	91 81       	ldd	r25, Z+1	; 0x01
    2a40:	8d 93       	st	X+, r24
    2a42:	9c 93       	st	X, r25
    2a44:	fe 01       	movw	r30, r28
    2a46:	eb 5a       	subi	r30, 0xAB	; 171
    2a48:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4a:	80 81       	ld	r24, Z
    2a4c:	91 81       	ldd	r25, Z+1	; 0x01
    2a4e:	01 97       	sbiw	r24, 0x01	; 1
    2a50:	f1 f7       	brne	.-4      	; 0x2a4e <LCD_displayCharacter+0x196>
    2a52:	fe 01       	movw	r30, r28
    2a54:	eb 5a       	subi	r30, 0xAB	; 171
    2a56:	ff 4f       	sbci	r31, 0xFF	; 255
    2a58:	91 83       	std	Z+1, r25	; 0x01
    2a5a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2a5c:	a2 e3       	ldi	r26, 0x32	; 50
    2a5e:	b0 e0       	ldi	r27, 0x00	; 0
    2a60:	e2 e3       	ldi	r30, 0x32	; 50
    2a62:	f0 e0       	ldi	r31, 0x00	; 0
    2a64:	80 81       	ld	r24, Z
    2a66:	80 64       	ori	r24, 0x40	; 64
    2a68:	8c 93       	st	X, r24
    2a6a:	fe 01       	movw	r30, r28
    2a6c:	ef 5a       	subi	r30, 0xAF	; 175
    2a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a70:	80 e0       	ldi	r24, 0x00	; 0
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	a0 e8       	ldi	r26, 0x80	; 128
    2a76:	bf e3       	ldi	r27, 0x3F	; 63
    2a78:	80 83       	st	Z, r24
    2a7a:	91 83       	std	Z+1, r25	; 0x01
    2a7c:	a2 83       	std	Z+2, r26	; 0x02
    2a7e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a80:	8e 01       	movw	r16, r28
    2a82:	03 5b       	subi	r16, 0xB3	; 179
    2a84:	1f 4f       	sbci	r17, 0xFF	; 255
    2a86:	fe 01       	movw	r30, r28
    2a88:	ef 5a       	subi	r30, 0xAF	; 175
    2a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8c:	60 81       	ld	r22, Z
    2a8e:	71 81       	ldd	r23, Z+1	; 0x01
    2a90:	82 81       	ldd	r24, Z+2	; 0x02
    2a92:	93 81       	ldd	r25, Z+3	; 0x03
    2a94:	20 e0       	ldi	r18, 0x00	; 0
    2a96:	30 e0       	ldi	r19, 0x00	; 0
    2a98:	4a ef       	ldi	r20, 0xFA	; 250
    2a9a:	54 e4       	ldi	r21, 0x44	; 68
    2a9c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2aa0:	dc 01       	movw	r26, r24
    2aa2:	cb 01       	movw	r24, r22
    2aa4:	f8 01       	movw	r30, r16
    2aa6:	80 83       	st	Z, r24
    2aa8:	91 83       	std	Z+1, r25	; 0x01
    2aaa:	a2 83       	std	Z+2, r26	; 0x02
    2aac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2aae:	fe 01       	movw	r30, r28
    2ab0:	e3 5b       	subi	r30, 0xB3	; 179
    2ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab4:	60 81       	ld	r22, Z
    2ab6:	71 81       	ldd	r23, Z+1	; 0x01
    2ab8:	82 81       	ldd	r24, Z+2	; 0x02
    2aba:	93 81       	ldd	r25, Z+3	; 0x03
    2abc:	20 e0       	ldi	r18, 0x00	; 0
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	40 e8       	ldi	r20, 0x80	; 128
    2ac2:	5f e3       	ldi	r21, 0x3F	; 63
    2ac4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2ac8:	88 23       	and	r24, r24
    2aca:	44 f4       	brge	.+16     	; 0x2adc <LCD_displayCharacter+0x224>
		__ticks = 1;
    2acc:	fe 01       	movw	r30, r28
    2ace:	e5 5b       	subi	r30, 0xB5	; 181
    2ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad2:	81 e0       	ldi	r24, 0x01	; 1
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	91 83       	std	Z+1, r25	; 0x01
    2ad8:	80 83       	st	Z, r24
    2ada:	64 c0       	rjmp	.+200    	; 0x2ba4 <LCD_displayCharacter+0x2ec>
	else if (__tmp > 65535)
    2adc:	fe 01       	movw	r30, r28
    2ade:	e3 5b       	subi	r30, 0xB3	; 179
    2ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae2:	60 81       	ld	r22, Z
    2ae4:	71 81       	ldd	r23, Z+1	; 0x01
    2ae6:	82 81       	ldd	r24, Z+2	; 0x02
    2ae8:	93 81       	ldd	r25, Z+3	; 0x03
    2aea:	20 e0       	ldi	r18, 0x00	; 0
    2aec:	3f ef       	ldi	r19, 0xFF	; 255
    2aee:	4f e7       	ldi	r20, 0x7F	; 127
    2af0:	57 e4       	ldi	r21, 0x47	; 71
    2af2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2af6:	18 16       	cp	r1, r24
    2af8:	0c f0       	brlt	.+2      	; 0x2afc <LCD_displayCharacter+0x244>
    2afa:	43 c0       	rjmp	.+134    	; 0x2b82 <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2afc:	fe 01       	movw	r30, r28
    2afe:	ef 5a       	subi	r30, 0xAF	; 175
    2b00:	ff 4f       	sbci	r31, 0xFF	; 255
    2b02:	60 81       	ld	r22, Z
    2b04:	71 81       	ldd	r23, Z+1	; 0x01
    2b06:	82 81       	ldd	r24, Z+2	; 0x02
    2b08:	93 81       	ldd	r25, Z+3	; 0x03
    2b0a:	20 e0       	ldi	r18, 0x00	; 0
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	40 e2       	ldi	r20, 0x20	; 32
    2b10:	51 e4       	ldi	r21, 0x41	; 65
    2b12:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	8e 01       	movw	r16, r28
    2b1c:	05 5b       	subi	r16, 0xB5	; 181
    2b1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b20:	bc 01       	movw	r22, r24
    2b22:	cd 01       	movw	r24, r26
    2b24:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b28:	dc 01       	movw	r26, r24
    2b2a:	cb 01       	movw	r24, r22
    2b2c:	f8 01       	movw	r30, r16
    2b2e:	91 83       	std	Z+1, r25	; 0x01
    2b30:	80 83       	st	Z, r24
    2b32:	1f c0       	rjmp	.+62     	; 0x2b72 <LCD_displayCharacter+0x2ba>
    2b34:	fe 01       	movw	r30, r28
    2b36:	e7 5b       	subi	r30, 0xB7	; 183
    2b38:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3a:	88 ec       	ldi	r24, 0xC8	; 200
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	91 83       	std	Z+1, r25	; 0x01
    2b40:	80 83       	st	Z, r24
    2b42:	fe 01       	movw	r30, r28
    2b44:	e7 5b       	subi	r30, 0xB7	; 183
    2b46:	ff 4f       	sbci	r31, 0xFF	; 255
    2b48:	80 81       	ld	r24, Z
    2b4a:	91 81       	ldd	r25, Z+1	; 0x01
    2b4c:	01 97       	sbiw	r24, 0x01	; 1
    2b4e:	f1 f7       	brne	.-4      	; 0x2b4c <LCD_displayCharacter+0x294>
    2b50:	fe 01       	movw	r30, r28
    2b52:	e7 5b       	subi	r30, 0xB7	; 183
    2b54:	ff 4f       	sbci	r31, 0xFF	; 255
    2b56:	91 83       	std	Z+1, r25	; 0x01
    2b58:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b5a:	de 01       	movw	r26, r28
    2b5c:	a5 5b       	subi	r26, 0xB5	; 181
    2b5e:	bf 4f       	sbci	r27, 0xFF	; 255
    2b60:	fe 01       	movw	r30, r28
    2b62:	e5 5b       	subi	r30, 0xB5	; 181
    2b64:	ff 4f       	sbci	r31, 0xFF	; 255
    2b66:	80 81       	ld	r24, Z
    2b68:	91 81       	ldd	r25, Z+1	; 0x01
    2b6a:	01 97       	sbiw	r24, 0x01	; 1
    2b6c:	11 96       	adiw	r26, 0x01	; 1
    2b6e:	9c 93       	st	X, r25
    2b70:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b72:	fe 01       	movw	r30, r28
    2b74:	e5 5b       	subi	r30, 0xB5	; 181
    2b76:	ff 4f       	sbci	r31, 0xFF	; 255
    2b78:	80 81       	ld	r24, Z
    2b7a:	91 81       	ldd	r25, Z+1	; 0x01
    2b7c:	00 97       	sbiw	r24, 0x00	; 0
    2b7e:	d1 f6       	brne	.-76     	; 0x2b34 <LCD_displayCharacter+0x27c>
    2b80:	27 c0       	rjmp	.+78     	; 0x2bd0 <LCD_displayCharacter+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b82:	8e 01       	movw	r16, r28
    2b84:	05 5b       	subi	r16, 0xB5	; 181
    2b86:	1f 4f       	sbci	r17, 0xFF	; 255
    2b88:	fe 01       	movw	r30, r28
    2b8a:	e3 5b       	subi	r30, 0xB3	; 179
    2b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8e:	60 81       	ld	r22, Z
    2b90:	71 81       	ldd	r23, Z+1	; 0x01
    2b92:	82 81       	ldd	r24, Z+2	; 0x02
    2b94:	93 81       	ldd	r25, Z+3	; 0x03
    2b96:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b9a:	dc 01       	movw	r26, r24
    2b9c:	cb 01       	movw	r24, r22
    2b9e:	f8 01       	movw	r30, r16
    2ba0:	91 83       	std	Z+1, r25	; 0x01
    2ba2:	80 83       	st	Z, r24
    2ba4:	de 01       	movw	r26, r28
    2ba6:	a9 5b       	subi	r26, 0xB9	; 185
    2ba8:	bf 4f       	sbci	r27, 0xFF	; 255
    2baa:	fe 01       	movw	r30, r28
    2bac:	e5 5b       	subi	r30, 0xB5	; 181
    2bae:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb0:	80 81       	ld	r24, Z
    2bb2:	91 81       	ldd	r25, Z+1	; 0x01
    2bb4:	8d 93       	st	X+, r24
    2bb6:	9c 93       	st	X, r25
    2bb8:	fe 01       	movw	r30, r28
    2bba:	e9 5b       	subi	r30, 0xB9	; 185
    2bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bbe:	80 81       	ld	r24, Z
    2bc0:	91 81       	ldd	r25, Z+1	; 0x01
    2bc2:	01 97       	sbiw	r24, 0x01	; 1
    2bc4:	f1 f7       	brne	.-4      	; 0x2bc2 <LCD_displayCharacter+0x30a>
    2bc6:	fe 01       	movw	r30, r28
    2bc8:	e9 5b       	subi	r30, 0xB9	; 185
    2bca:	ff 4f       	sbci	r31, 0xFF	; 255
    2bcc:	91 83       	std	Z+1, r25	; 0x01
    2bce:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	#if (DATA_BITS_MODE == 4)
		/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT = (data & 0xF0); 
    2bd0:	a5 e3       	ldi	r26, 0x35	; 53
    2bd2:	b0 e0       	ldi	r27, 0x00	; 0
    2bd4:	fe 01       	movw	r30, r28
    2bd6:	ed 59       	subi	r30, 0x9D	; 157
    2bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bda:	80 81       	ld	r24, Z
    2bdc:	80 7f       	andi	r24, 0xF0	; 240
    2bde:	8c 93       	st	X, r24
    2be0:	fe 01       	movw	r30, r28
    2be2:	ed 5b       	subi	r30, 0xBD	; 189
    2be4:	ff 4f       	sbci	r31, 0xFF	; 255
    2be6:	80 e0       	ldi	r24, 0x00	; 0
    2be8:	90 e0       	ldi	r25, 0x00	; 0
    2bea:	a0 e8       	ldi	r26, 0x80	; 128
    2bec:	bf e3       	ldi	r27, 0x3F	; 63
    2bee:	80 83       	st	Z, r24
    2bf0:	91 83       	std	Z+1, r25	; 0x01
    2bf2:	a2 83       	std	Z+2, r26	; 0x02
    2bf4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bf6:	8e 01       	movw	r16, r28
    2bf8:	01 5c       	subi	r16, 0xC1	; 193
    2bfa:	1f 4f       	sbci	r17, 0xFF	; 255
    2bfc:	fe 01       	movw	r30, r28
    2bfe:	ed 5b       	subi	r30, 0xBD	; 189
    2c00:	ff 4f       	sbci	r31, 0xFF	; 255
    2c02:	60 81       	ld	r22, Z
    2c04:	71 81       	ldd	r23, Z+1	; 0x01
    2c06:	82 81       	ldd	r24, Z+2	; 0x02
    2c08:	93 81       	ldd	r25, Z+3	; 0x03
    2c0a:	20 e0       	ldi	r18, 0x00	; 0
    2c0c:	30 e0       	ldi	r19, 0x00	; 0
    2c0e:	4a ef       	ldi	r20, 0xFA	; 250
    2c10:	54 e4       	ldi	r21, 0x44	; 68
    2c12:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c16:	dc 01       	movw	r26, r24
    2c18:	cb 01       	movw	r24, r22
    2c1a:	f8 01       	movw	r30, r16
    2c1c:	80 83       	st	Z, r24
    2c1e:	91 83       	std	Z+1, r25	; 0x01
    2c20:	a2 83       	std	Z+2, r26	; 0x02
    2c22:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c24:	fe 01       	movw	r30, r28
    2c26:	ff 96       	adiw	r30, 0x3f	; 63
    2c28:	60 81       	ld	r22, Z
    2c2a:	71 81       	ldd	r23, Z+1	; 0x01
    2c2c:	82 81       	ldd	r24, Z+2	; 0x02
    2c2e:	93 81       	ldd	r25, Z+3	; 0x03
    2c30:	20 e0       	ldi	r18, 0x00	; 0
    2c32:	30 e0       	ldi	r19, 0x00	; 0
    2c34:	40 e8       	ldi	r20, 0x80	; 128
    2c36:	5f e3       	ldi	r21, 0x3F	; 63
    2c38:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2c3c:	88 23       	and	r24, r24
    2c3e:	2c f4       	brge	.+10     	; 0x2c4a <LCD_displayCharacter+0x392>
		__ticks = 1;
    2c40:	81 e0       	ldi	r24, 0x01	; 1
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	9e af       	std	Y+62, r25	; 0x3e
    2c46:	8d af       	std	Y+61, r24	; 0x3d
    2c48:	46 c0       	rjmp	.+140    	; 0x2cd6 <LCD_displayCharacter+0x41e>
	else if (__tmp > 65535)
    2c4a:	fe 01       	movw	r30, r28
    2c4c:	ff 96       	adiw	r30, 0x3f	; 63
    2c4e:	60 81       	ld	r22, Z
    2c50:	71 81       	ldd	r23, Z+1	; 0x01
    2c52:	82 81       	ldd	r24, Z+2	; 0x02
    2c54:	93 81       	ldd	r25, Z+3	; 0x03
    2c56:	20 e0       	ldi	r18, 0x00	; 0
    2c58:	3f ef       	ldi	r19, 0xFF	; 255
    2c5a:	4f e7       	ldi	r20, 0x7F	; 127
    2c5c:	57 e4       	ldi	r21, 0x47	; 71
    2c5e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2c62:	18 16       	cp	r1, r24
    2c64:	64 f5       	brge	.+88     	; 0x2cbe <LCD_displayCharacter+0x406>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c66:	fe 01       	movw	r30, r28
    2c68:	ed 5b       	subi	r30, 0xBD	; 189
    2c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6c:	60 81       	ld	r22, Z
    2c6e:	71 81       	ldd	r23, Z+1	; 0x01
    2c70:	82 81       	ldd	r24, Z+2	; 0x02
    2c72:	93 81       	ldd	r25, Z+3	; 0x03
    2c74:	20 e0       	ldi	r18, 0x00	; 0
    2c76:	30 e0       	ldi	r19, 0x00	; 0
    2c78:	40 e2       	ldi	r20, 0x20	; 32
    2c7a:	51 e4       	ldi	r21, 0x41	; 65
    2c7c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c80:	dc 01       	movw	r26, r24
    2c82:	cb 01       	movw	r24, r22
    2c84:	bc 01       	movw	r22, r24
    2c86:	cd 01       	movw	r24, r26
    2c88:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c8c:	dc 01       	movw	r26, r24
    2c8e:	cb 01       	movw	r24, r22
    2c90:	9e af       	std	Y+62, r25	; 0x3e
    2c92:	8d af       	std	Y+61, r24	; 0x3d
    2c94:	0f c0       	rjmp	.+30     	; 0x2cb4 <LCD_displayCharacter+0x3fc>
    2c96:	88 ec       	ldi	r24, 0xC8	; 200
    2c98:	90 e0       	ldi	r25, 0x00	; 0
    2c9a:	9c af       	std	Y+60, r25	; 0x3c
    2c9c:	8b af       	std	Y+59, r24	; 0x3b
    2c9e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2ca0:	9c ad       	ldd	r25, Y+60	; 0x3c
    2ca2:	01 97       	sbiw	r24, 0x01	; 1
    2ca4:	f1 f7       	brne	.-4      	; 0x2ca2 <LCD_displayCharacter+0x3ea>
    2ca6:	9c af       	std	Y+60, r25	; 0x3c
    2ca8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2caa:	8d ad       	ldd	r24, Y+61	; 0x3d
    2cac:	9e ad       	ldd	r25, Y+62	; 0x3e
    2cae:	01 97       	sbiw	r24, 0x01	; 1
    2cb0:	9e af       	std	Y+62, r25	; 0x3e
    2cb2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cb4:	8d ad       	ldd	r24, Y+61	; 0x3d
    2cb6:	9e ad       	ldd	r25, Y+62	; 0x3e
    2cb8:	00 97       	sbiw	r24, 0x00	; 0
    2cba:	69 f7       	brne	.-38     	; 0x2c96 <LCD_displayCharacter+0x3de>
    2cbc:	16 c0       	rjmp	.+44     	; 0x2cea <LCD_displayCharacter+0x432>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cbe:	fe 01       	movw	r30, r28
    2cc0:	ff 96       	adiw	r30, 0x3f	; 63
    2cc2:	60 81       	ld	r22, Z
    2cc4:	71 81       	ldd	r23, Z+1	; 0x01
    2cc6:	82 81       	ldd	r24, Z+2	; 0x02
    2cc8:	93 81       	ldd	r25, Z+3	; 0x03
    2cca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cce:	dc 01       	movw	r26, r24
    2cd0:	cb 01       	movw	r24, r22
    2cd2:	9e af       	std	Y+62, r25	; 0x3e
    2cd4:	8d af       	std	Y+61, r24	; 0x3d
    2cd6:	8d ad       	ldd	r24, Y+61	; 0x3d
    2cd8:	9e ad       	ldd	r25, Y+62	; 0x3e
    2cda:	9a af       	std	Y+58, r25	; 0x3a
    2cdc:	89 af       	std	Y+57, r24	; 0x39
    2cde:	89 ad       	ldd	r24, Y+57	; 0x39
    2ce0:	9a ad       	ldd	r25, Y+58	; 0x3a
    2ce2:	01 97       	sbiw	r24, 0x01	; 1
    2ce4:	f1 f7       	brne	.-4      	; 0x2ce2 <LCD_displayCharacter+0x42a>
    2ce6:	9a af       	std	Y+58, r25	; 0x3a
    2ce8:	89 af       	std	Y+57, r24	; 0x39
		#else 
			LCD_DATA_PORT = ((data >> 4) & 0x0F);
		#endif
		
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2cea:	a2 e3       	ldi	r26, 0x32	; 50
    2cec:	b0 e0       	ldi	r27, 0x00	; 0
    2cee:	e2 e3       	ldi	r30, 0x32	; 50
    2cf0:	f0 e0       	ldi	r31, 0x00	; 0
    2cf2:	80 81       	ld	r24, Z
    2cf4:	8f 7b       	andi	r24, 0xBF	; 191
    2cf6:	8c 93       	st	X, r24
    2cf8:	80 e0       	ldi	r24, 0x00	; 0
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	a0 e8       	ldi	r26, 0x80	; 128
    2cfe:	bf e3       	ldi	r27, 0x3F	; 63
    2d00:	8d ab       	std	Y+53, r24	; 0x35
    2d02:	9e ab       	std	Y+54, r25	; 0x36
    2d04:	af ab       	std	Y+55, r26	; 0x37
    2d06:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d08:	6d a9       	ldd	r22, Y+53	; 0x35
    2d0a:	7e a9       	ldd	r23, Y+54	; 0x36
    2d0c:	8f a9       	ldd	r24, Y+55	; 0x37
    2d0e:	98 ad       	ldd	r25, Y+56	; 0x38
    2d10:	20 e0       	ldi	r18, 0x00	; 0
    2d12:	30 e0       	ldi	r19, 0x00	; 0
    2d14:	4a ef       	ldi	r20, 0xFA	; 250
    2d16:	54 e4       	ldi	r21, 0x44	; 68
    2d18:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d1c:	dc 01       	movw	r26, r24
    2d1e:	cb 01       	movw	r24, r22
    2d20:	89 ab       	std	Y+49, r24	; 0x31
    2d22:	9a ab       	std	Y+50, r25	; 0x32
    2d24:	ab ab       	std	Y+51, r26	; 0x33
    2d26:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2d28:	69 a9       	ldd	r22, Y+49	; 0x31
    2d2a:	7a a9       	ldd	r23, Y+50	; 0x32
    2d2c:	8b a9       	ldd	r24, Y+51	; 0x33
    2d2e:	9c a9       	ldd	r25, Y+52	; 0x34
    2d30:	20 e0       	ldi	r18, 0x00	; 0
    2d32:	30 e0       	ldi	r19, 0x00	; 0
    2d34:	40 e8       	ldi	r20, 0x80	; 128
    2d36:	5f e3       	ldi	r21, 0x3F	; 63
    2d38:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2d3c:	88 23       	and	r24, r24
    2d3e:	2c f4       	brge	.+10     	; 0x2d4a <LCD_displayCharacter+0x492>
		__ticks = 1;
    2d40:	81 e0       	ldi	r24, 0x01	; 1
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	98 ab       	std	Y+48, r25	; 0x30
    2d46:	8f a7       	std	Y+47, r24	; 0x2f
    2d48:	3f c0       	rjmp	.+126    	; 0x2dc8 <LCD_displayCharacter+0x510>
	else if (__tmp > 65535)
    2d4a:	69 a9       	ldd	r22, Y+49	; 0x31
    2d4c:	7a a9       	ldd	r23, Y+50	; 0x32
    2d4e:	8b a9       	ldd	r24, Y+51	; 0x33
    2d50:	9c a9       	ldd	r25, Y+52	; 0x34
    2d52:	20 e0       	ldi	r18, 0x00	; 0
    2d54:	3f ef       	ldi	r19, 0xFF	; 255
    2d56:	4f e7       	ldi	r20, 0x7F	; 127
    2d58:	57 e4       	ldi	r21, 0x47	; 71
    2d5a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2d5e:	18 16       	cp	r1, r24
    2d60:	4c f5       	brge	.+82     	; 0x2db4 <LCD_displayCharacter+0x4fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d62:	6d a9       	ldd	r22, Y+53	; 0x35
    2d64:	7e a9       	ldd	r23, Y+54	; 0x36
    2d66:	8f a9       	ldd	r24, Y+55	; 0x37
    2d68:	98 ad       	ldd	r25, Y+56	; 0x38
    2d6a:	20 e0       	ldi	r18, 0x00	; 0
    2d6c:	30 e0       	ldi	r19, 0x00	; 0
    2d6e:	40 e2       	ldi	r20, 0x20	; 32
    2d70:	51 e4       	ldi	r21, 0x41	; 65
    2d72:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d76:	dc 01       	movw	r26, r24
    2d78:	cb 01       	movw	r24, r22
    2d7a:	bc 01       	movw	r22, r24
    2d7c:	cd 01       	movw	r24, r26
    2d7e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d82:	dc 01       	movw	r26, r24
    2d84:	cb 01       	movw	r24, r22
    2d86:	98 ab       	std	Y+48, r25	; 0x30
    2d88:	8f a7       	std	Y+47, r24	; 0x2f
    2d8a:	0f c0       	rjmp	.+30     	; 0x2daa <LCD_displayCharacter+0x4f2>
    2d8c:	88 ec       	ldi	r24, 0xC8	; 200
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	9e a7       	std	Y+46, r25	; 0x2e
    2d92:	8d a7       	std	Y+45, r24	; 0x2d
    2d94:	8d a5       	ldd	r24, Y+45	; 0x2d
    2d96:	9e a5       	ldd	r25, Y+46	; 0x2e
    2d98:	01 97       	sbiw	r24, 0x01	; 1
    2d9a:	f1 f7       	brne	.-4      	; 0x2d98 <LCD_displayCharacter+0x4e0>
    2d9c:	9e a7       	std	Y+46, r25	; 0x2e
    2d9e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2da0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2da2:	98 a9       	ldd	r25, Y+48	; 0x30
    2da4:	01 97       	sbiw	r24, 0x01	; 1
    2da6:	98 ab       	std	Y+48, r25	; 0x30
    2da8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2daa:	8f a5       	ldd	r24, Y+47	; 0x2f
    2dac:	98 a9       	ldd	r25, Y+48	; 0x30
    2dae:	00 97       	sbiw	r24, 0x00	; 0
    2db0:	69 f7       	brne	.-38     	; 0x2d8c <LCD_displayCharacter+0x4d4>
    2db2:	14 c0       	rjmp	.+40     	; 0x2ddc <LCD_displayCharacter+0x524>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2db4:	69 a9       	ldd	r22, Y+49	; 0x31
    2db6:	7a a9       	ldd	r23, Y+50	; 0x32
    2db8:	8b a9       	ldd	r24, Y+51	; 0x33
    2dba:	9c a9       	ldd	r25, Y+52	; 0x34
    2dbc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2dc0:	dc 01       	movw	r26, r24
    2dc2:	cb 01       	movw	r24, r22
    2dc4:	98 ab       	std	Y+48, r25	; 0x30
    2dc6:	8f a7       	std	Y+47, r24	; 0x2f
    2dc8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2dca:	98 a9       	ldd	r25, Y+48	; 0x30
    2dcc:	9c a7       	std	Y+44, r25	; 0x2c
    2dce:	8b a7       	std	Y+43, r24	; 0x2b
    2dd0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2dd2:	9c a5       	ldd	r25, Y+44	; 0x2c
    2dd4:	01 97       	sbiw	r24, 0x01	; 1
    2dd6:	f1 f7       	brne	.-4      	; 0x2dd4 <LCD_displayCharacter+0x51c>
    2dd8:	9c a7       	std	Y+44, r25	; 0x2c
    2dda:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1); /* delay for processing Th = 13ns */
		SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2ddc:	a2 e3       	ldi	r26, 0x32	; 50
    2dde:	b0 e0       	ldi	r27, 0x00	; 0
    2de0:	e2 e3       	ldi	r30, 0x32	; 50
    2de2:	f0 e0       	ldi	r31, 0x00	; 0
    2de4:	80 81       	ld	r24, Z
    2de6:	80 64       	ori	r24, 0x40	; 64
    2de8:	8c 93       	st	X, r24
    2dea:	80 e0       	ldi	r24, 0x00	; 0
    2dec:	90 e0       	ldi	r25, 0x00	; 0
    2dee:	a0 e8       	ldi	r26, 0x80	; 128
    2df0:	bf e3       	ldi	r27, 0x3F	; 63
    2df2:	8f a3       	std	Y+39, r24	; 0x27
    2df4:	98 a7       	std	Y+40, r25	; 0x28
    2df6:	a9 a7       	std	Y+41, r26	; 0x29
    2df8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dfa:	6f a1       	ldd	r22, Y+39	; 0x27
    2dfc:	78 a5       	ldd	r23, Y+40	; 0x28
    2dfe:	89 a5       	ldd	r24, Y+41	; 0x29
    2e00:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e02:	20 e0       	ldi	r18, 0x00	; 0
    2e04:	30 e0       	ldi	r19, 0x00	; 0
    2e06:	4a ef       	ldi	r20, 0xFA	; 250
    2e08:	54 e4       	ldi	r21, 0x44	; 68
    2e0a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e0e:	dc 01       	movw	r26, r24
    2e10:	cb 01       	movw	r24, r22
    2e12:	8b a3       	std	Y+35, r24	; 0x23
    2e14:	9c a3       	std	Y+36, r25	; 0x24
    2e16:	ad a3       	std	Y+37, r26	; 0x25
    2e18:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e1a:	6b a1       	ldd	r22, Y+35	; 0x23
    2e1c:	7c a1       	ldd	r23, Y+36	; 0x24
    2e1e:	8d a1       	ldd	r24, Y+37	; 0x25
    2e20:	9e a1       	ldd	r25, Y+38	; 0x26
    2e22:	20 e0       	ldi	r18, 0x00	; 0
    2e24:	30 e0       	ldi	r19, 0x00	; 0
    2e26:	40 e8       	ldi	r20, 0x80	; 128
    2e28:	5f e3       	ldi	r21, 0x3F	; 63
    2e2a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2e2e:	88 23       	and	r24, r24
    2e30:	2c f4       	brge	.+10     	; 0x2e3c <LCD_displayCharacter+0x584>
		__ticks = 1;
    2e32:	81 e0       	ldi	r24, 0x01	; 1
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	9a a3       	std	Y+34, r25	; 0x22
    2e38:	89 a3       	std	Y+33, r24	; 0x21
    2e3a:	3f c0       	rjmp	.+126    	; 0x2eba <LCD_displayCharacter+0x602>
	else if (__tmp > 65535)
    2e3c:	6b a1       	ldd	r22, Y+35	; 0x23
    2e3e:	7c a1       	ldd	r23, Y+36	; 0x24
    2e40:	8d a1       	ldd	r24, Y+37	; 0x25
    2e42:	9e a1       	ldd	r25, Y+38	; 0x26
    2e44:	20 e0       	ldi	r18, 0x00	; 0
    2e46:	3f ef       	ldi	r19, 0xFF	; 255
    2e48:	4f e7       	ldi	r20, 0x7F	; 127
    2e4a:	57 e4       	ldi	r21, 0x47	; 71
    2e4c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2e50:	18 16       	cp	r1, r24
    2e52:	4c f5       	brge	.+82     	; 0x2ea6 <LCD_displayCharacter+0x5ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e54:	6f a1       	ldd	r22, Y+39	; 0x27
    2e56:	78 a5       	ldd	r23, Y+40	; 0x28
    2e58:	89 a5       	ldd	r24, Y+41	; 0x29
    2e5a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e5c:	20 e0       	ldi	r18, 0x00	; 0
    2e5e:	30 e0       	ldi	r19, 0x00	; 0
    2e60:	40 e2       	ldi	r20, 0x20	; 32
    2e62:	51 e4       	ldi	r21, 0x41	; 65
    2e64:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e68:	dc 01       	movw	r26, r24
    2e6a:	cb 01       	movw	r24, r22
    2e6c:	bc 01       	movw	r22, r24
    2e6e:	cd 01       	movw	r24, r26
    2e70:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e74:	dc 01       	movw	r26, r24
    2e76:	cb 01       	movw	r24, r22
    2e78:	9a a3       	std	Y+34, r25	; 0x22
    2e7a:	89 a3       	std	Y+33, r24	; 0x21
    2e7c:	0f c0       	rjmp	.+30     	; 0x2e9c <LCD_displayCharacter+0x5e4>
    2e7e:	88 ec       	ldi	r24, 0xC8	; 200
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	98 a3       	std	Y+32, r25	; 0x20
    2e84:	8f 8f       	std	Y+31, r24	; 0x1f
    2e86:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e88:	98 a1       	ldd	r25, Y+32	; 0x20
    2e8a:	01 97       	sbiw	r24, 0x01	; 1
    2e8c:	f1 f7       	brne	.-4      	; 0x2e8a <LCD_displayCharacter+0x5d2>
    2e8e:	98 a3       	std	Y+32, r25	; 0x20
    2e90:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e92:	89 a1       	ldd	r24, Y+33	; 0x21
    2e94:	9a a1       	ldd	r25, Y+34	; 0x22
    2e96:	01 97       	sbiw	r24, 0x01	; 1
    2e98:	9a a3       	std	Y+34, r25	; 0x22
    2e9a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e9c:	89 a1       	ldd	r24, Y+33	; 0x21
    2e9e:	9a a1       	ldd	r25, Y+34	; 0x22
    2ea0:	00 97       	sbiw	r24, 0x00	; 0
    2ea2:	69 f7       	brne	.-38     	; 0x2e7e <LCD_displayCharacter+0x5c6>
    2ea4:	14 c0       	rjmp	.+40     	; 0x2ece <LCD_displayCharacter+0x616>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ea6:	6b a1       	ldd	r22, Y+35	; 0x23
    2ea8:	7c a1       	ldd	r23, Y+36	; 0x24
    2eaa:	8d a1       	ldd	r24, Y+37	; 0x25
    2eac:	9e a1       	ldd	r25, Y+38	; 0x26
    2eae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2eb2:	dc 01       	movw	r26, r24
    2eb4:	cb 01       	movw	r24, r22
    2eb6:	9a a3       	std	Y+34, r25	; 0x22
    2eb8:	89 a3       	std	Y+33, r24	; 0x21
    2eba:	89 a1       	ldd	r24, Y+33	; 0x21
    2ebc:	9a a1       	ldd	r25, Y+34	; 0x22
    2ebe:	9e 8f       	std	Y+30, r25	; 0x1e
    2ec0:	8d 8f       	std	Y+29, r24	; 0x1d
    2ec2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ec4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ec6:	01 97       	sbiw	r24, 0x01	; 1
    2ec8:	f1 f7       	brne	.-4      	; 0x2ec6 <LCD_displayCharacter+0x60e>
    2eca:	9e 8f       	std	Y+30, r25	; 0x1e
    2ecc:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
		
		/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT = (data << 4) & 0xF0; 
    2ece:	a5 e3       	ldi	r26, 0x35	; 53
    2ed0:	b0 e0       	ldi	r27, 0x00	; 0
    2ed2:	fe 01       	movw	r30, r28
    2ed4:	ed 59       	subi	r30, 0x9D	; 157
    2ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed8:	80 81       	ld	r24, Z
    2eda:	88 2f       	mov	r24, r24
    2edc:	90 e0       	ldi	r25, 0x00	; 0
    2ede:	82 95       	swap	r24
    2ee0:	92 95       	swap	r25
    2ee2:	90 7f       	andi	r25, 0xF0	; 240
    2ee4:	98 27       	eor	r25, r24
    2ee6:	80 7f       	andi	r24, 0xF0	; 240
    2ee8:	98 27       	eor	r25, r24
    2eea:	8c 93       	st	X, r24
    2eec:	80 e0       	ldi	r24, 0x00	; 0
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	a0 e8       	ldi	r26, 0x80	; 128
    2ef2:	bf e3       	ldi	r27, 0x3F	; 63
    2ef4:	89 8f       	std	Y+25, r24	; 0x19
    2ef6:	9a 8f       	std	Y+26, r25	; 0x1a
    2ef8:	ab 8f       	std	Y+27, r26	; 0x1b
    2efa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2efc:	69 8d       	ldd	r22, Y+25	; 0x19
    2efe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f04:	20 e0       	ldi	r18, 0x00	; 0
    2f06:	30 e0       	ldi	r19, 0x00	; 0
    2f08:	4a ef       	ldi	r20, 0xFA	; 250
    2f0a:	54 e4       	ldi	r21, 0x44	; 68
    2f0c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f10:	dc 01       	movw	r26, r24
    2f12:	cb 01       	movw	r24, r22
    2f14:	8d 8b       	std	Y+21, r24	; 0x15
    2f16:	9e 8b       	std	Y+22, r25	; 0x16
    2f18:	af 8b       	std	Y+23, r26	; 0x17
    2f1a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f1c:	6d 89       	ldd	r22, Y+21	; 0x15
    2f1e:	7e 89       	ldd	r23, Y+22	; 0x16
    2f20:	8f 89       	ldd	r24, Y+23	; 0x17
    2f22:	98 8d       	ldd	r25, Y+24	; 0x18
    2f24:	20 e0       	ldi	r18, 0x00	; 0
    2f26:	30 e0       	ldi	r19, 0x00	; 0
    2f28:	40 e8       	ldi	r20, 0x80	; 128
    2f2a:	5f e3       	ldi	r21, 0x3F	; 63
    2f2c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2f30:	88 23       	and	r24, r24
    2f32:	2c f4       	brge	.+10     	; 0x2f3e <LCD_displayCharacter+0x686>
		__ticks = 1;
    2f34:	81 e0       	ldi	r24, 0x01	; 1
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	9c 8b       	std	Y+20, r25	; 0x14
    2f3a:	8b 8b       	std	Y+19, r24	; 0x13
    2f3c:	3f c0       	rjmp	.+126    	; 0x2fbc <LCD_displayCharacter+0x704>
	else if (__tmp > 65535)
    2f3e:	6d 89       	ldd	r22, Y+21	; 0x15
    2f40:	7e 89       	ldd	r23, Y+22	; 0x16
    2f42:	8f 89       	ldd	r24, Y+23	; 0x17
    2f44:	98 8d       	ldd	r25, Y+24	; 0x18
    2f46:	20 e0       	ldi	r18, 0x00	; 0
    2f48:	3f ef       	ldi	r19, 0xFF	; 255
    2f4a:	4f e7       	ldi	r20, 0x7F	; 127
    2f4c:	57 e4       	ldi	r21, 0x47	; 71
    2f4e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2f52:	18 16       	cp	r1, r24
    2f54:	4c f5       	brge	.+82     	; 0x2fa8 <LCD_displayCharacter+0x6f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f56:	69 8d       	ldd	r22, Y+25	; 0x19
    2f58:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f5e:	20 e0       	ldi	r18, 0x00	; 0
    2f60:	30 e0       	ldi	r19, 0x00	; 0
    2f62:	40 e2       	ldi	r20, 0x20	; 32
    2f64:	51 e4       	ldi	r21, 0x41	; 65
    2f66:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f6a:	dc 01       	movw	r26, r24
    2f6c:	cb 01       	movw	r24, r22
    2f6e:	bc 01       	movw	r22, r24
    2f70:	cd 01       	movw	r24, r26
    2f72:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f76:	dc 01       	movw	r26, r24
    2f78:	cb 01       	movw	r24, r22
    2f7a:	9c 8b       	std	Y+20, r25	; 0x14
    2f7c:	8b 8b       	std	Y+19, r24	; 0x13
    2f7e:	0f c0       	rjmp	.+30     	; 0x2f9e <LCD_displayCharacter+0x6e6>
    2f80:	88 ec       	ldi	r24, 0xC8	; 200
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	9a 8b       	std	Y+18, r25	; 0x12
    2f86:	89 8b       	std	Y+17, r24	; 0x11
    2f88:	89 89       	ldd	r24, Y+17	; 0x11
    2f8a:	9a 89       	ldd	r25, Y+18	; 0x12
    2f8c:	01 97       	sbiw	r24, 0x01	; 1
    2f8e:	f1 f7       	brne	.-4      	; 0x2f8c <LCD_displayCharacter+0x6d4>
    2f90:	9a 8b       	std	Y+18, r25	; 0x12
    2f92:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f94:	8b 89       	ldd	r24, Y+19	; 0x13
    2f96:	9c 89       	ldd	r25, Y+20	; 0x14
    2f98:	01 97       	sbiw	r24, 0x01	; 1
    2f9a:	9c 8b       	std	Y+20, r25	; 0x14
    2f9c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f9e:	8b 89       	ldd	r24, Y+19	; 0x13
    2fa0:	9c 89       	ldd	r25, Y+20	; 0x14
    2fa2:	00 97       	sbiw	r24, 0x00	; 0
    2fa4:	69 f7       	brne	.-38     	; 0x2f80 <LCD_displayCharacter+0x6c8>
    2fa6:	14 c0       	rjmp	.+40     	; 0x2fd0 <LCD_displayCharacter+0x718>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fa8:	6d 89       	ldd	r22, Y+21	; 0x15
    2faa:	7e 89       	ldd	r23, Y+22	; 0x16
    2fac:	8f 89       	ldd	r24, Y+23	; 0x17
    2fae:	98 8d       	ldd	r25, Y+24	; 0x18
    2fb0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2fb4:	dc 01       	movw	r26, r24
    2fb6:	cb 01       	movw	r24, r22
    2fb8:	9c 8b       	std	Y+20, r25	; 0x14
    2fba:	8b 8b       	std	Y+19, r24	; 0x13
    2fbc:	8b 89       	ldd	r24, Y+19	; 0x13
    2fbe:	9c 89       	ldd	r25, Y+20	; 0x14
    2fc0:	98 8b       	std	Y+16, r25	; 0x10
    2fc2:	8f 87       	std	Y+15, r24	; 0x0f
    2fc4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fc6:	98 89       	ldd	r25, Y+16	; 0x10
    2fc8:	01 97       	sbiw	r24, 0x01	; 1
    2fca:	f1 f7       	brne	.-4      	; 0x2fc8 <LCD_displayCharacter+0x710>
    2fcc:	98 8b       	std	Y+16, r25	; 0x10
    2fce:	8f 87       	std	Y+15, r24	; 0x0f
		#else 
			LCD_DATA_PORT = (data & 0x0F);
		#endif
		
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2fd0:	a2 e3       	ldi	r26, 0x32	; 50
    2fd2:	b0 e0       	ldi	r27, 0x00	; 0
    2fd4:	e2 e3       	ldi	r30, 0x32	; 50
    2fd6:	f0 e0       	ldi	r31, 0x00	; 0
    2fd8:	80 81       	ld	r24, Z
    2fda:	8f 7b       	andi	r24, 0xBF	; 191
    2fdc:	8c 93       	st	X, r24
    2fde:	80 e0       	ldi	r24, 0x00	; 0
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	a0 e8       	ldi	r26, 0x80	; 128
    2fe4:	bf e3       	ldi	r27, 0x3F	; 63
    2fe6:	8b 87       	std	Y+11, r24	; 0x0b
    2fe8:	9c 87       	std	Y+12, r25	; 0x0c
    2fea:	ad 87       	std	Y+13, r26	; 0x0d
    2fec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fee:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ff0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ff2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ff4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ff6:	20 e0       	ldi	r18, 0x00	; 0
    2ff8:	30 e0       	ldi	r19, 0x00	; 0
    2ffa:	4a ef       	ldi	r20, 0xFA	; 250
    2ffc:	54 e4       	ldi	r21, 0x44	; 68
    2ffe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3002:	dc 01       	movw	r26, r24
    3004:	cb 01       	movw	r24, r22
    3006:	8f 83       	std	Y+7, r24	; 0x07
    3008:	98 87       	std	Y+8, r25	; 0x08
    300a:	a9 87       	std	Y+9, r26	; 0x09
    300c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    300e:	6f 81       	ldd	r22, Y+7	; 0x07
    3010:	78 85       	ldd	r23, Y+8	; 0x08
    3012:	89 85       	ldd	r24, Y+9	; 0x09
    3014:	9a 85       	ldd	r25, Y+10	; 0x0a
    3016:	20 e0       	ldi	r18, 0x00	; 0
    3018:	30 e0       	ldi	r19, 0x00	; 0
    301a:	40 e8       	ldi	r20, 0x80	; 128
    301c:	5f e3       	ldi	r21, 0x3F	; 63
    301e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3022:	88 23       	and	r24, r24
    3024:	2c f4       	brge	.+10     	; 0x3030 <LCD_displayCharacter+0x778>
		__ticks = 1;
    3026:	81 e0       	ldi	r24, 0x01	; 1
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	9e 83       	std	Y+6, r25	; 0x06
    302c:	8d 83       	std	Y+5, r24	; 0x05
    302e:	3f c0       	rjmp	.+126    	; 0x30ae <LCD_displayCharacter+0x7f6>
	else if (__tmp > 65535)
    3030:	6f 81       	ldd	r22, Y+7	; 0x07
    3032:	78 85       	ldd	r23, Y+8	; 0x08
    3034:	89 85       	ldd	r24, Y+9	; 0x09
    3036:	9a 85       	ldd	r25, Y+10	; 0x0a
    3038:	20 e0       	ldi	r18, 0x00	; 0
    303a:	3f ef       	ldi	r19, 0xFF	; 255
    303c:	4f e7       	ldi	r20, 0x7F	; 127
    303e:	57 e4       	ldi	r21, 0x47	; 71
    3040:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3044:	18 16       	cp	r1, r24
    3046:	4c f5       	brge	.+82     	; 0x309a <LCD_displayCharacter+0x7e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3048:	6b 85       	ldd	r22, Y+11	; 0x0b
    304a:	7c 85       	ldd	r23, Y+12	; 0x0c
    304c:	8d 85       	ldd	r24, Y+13	; 0x0d
    304e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3050:	20 e0       	ldi	r18, 0x00	; 0
    3052:	30 e0       	ldi	r19, 0x00	; 0
    3054:	40 e2       	ldi	r20, 0x20	; 32
    3056:	51 e4       	ldi	r21, 0x41	; 65
    3058:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    305c:	dc 01       	movw	r26, r24
    305e:	cb 01       	movw	r24, r22
    3060:	bc 01       	movw	r22, r24
    3062:	cd 01       	movw	r24, r26
    3064:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3068:	dc 01       	movw	r26, r24
    306a:	cb 01       	movw	r24, r22
    306c:	9e 83       	std	Y+6, r25	; 0x06
    306e:	8d 83       	std	Y+5, r24	; 0x05
    3070:	0f c0       	rjmp	.+30     	; 0x3090 <LCD_displayCharacter+0x7d8>
    3072:	88 ec       	ldi	r24, 0xC8	; 200
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	9c 83       	std	Y+4, r25	; 0x04
    3078:	8b 83       	std	Y+3, r24	; 0x03
    307a:	8b 81       	ldd	r24, Y+3	; 0x03
    307c:	9c 81       	ldd	r25, Y+4	; 0x04
    307e:	01 97       	sbiw	r24, 0x01	; 1
    3080:	f1 f7       	brne	.-4      	; 0x307e <LCD_displayCharacter+0x7c6>
    3082:	9c 83       	std	Y+4, r25	; 0x04
    3084:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3086:	8d 81       	ldd	r24, Y+5	; 0x05
    3088:	9e 81       	ldd	r25, Y+6	; 0x06
    308a:	01 97       	sbiw	r24, 0x01	; 1
    308c:	9e 83       	std	Y+6, r25	; 0x06
    308e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3090:	8d 81       	ldd	r24, Y+5	; 0x05
    3092:	9e 81       	ldd	r25, Y+6	; 0x06
    3094:	00 97       	sbiw	r24, 0x00	; 0
    3096:	69 f7       	brne	.-38     	; 0x3072 <LCD_displayCharacter+0x7ba>
    3098:	14 c0       	rjmp	.+40     	; 0x30c2 <LCD_displayCharacter+0x80a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    309a:	6f 81       	ldd	r22, Y+7	; 0x07
    309c:	78 85       	ldd	r23, Y+8	; 0x08
    309e:	89 85       	ldd	r24, Y+9	; 0x09
    30a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    30a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30a6:	dc 01       	movw	r26, r24
    30a8:	cb 01       	movw	r24, r22
    30aa:	9e 83       	std	Y+6, r25	; 0x06
    30ac:	8d 83       	std	Y+5, r24	; 0x05
    30ae:	8d 81       	ldd	r24, Y+5	; 0x05
    30b0:	9e 81       	ldd	r25, Y+6	; 0x06
    30b2:	9a 83       	std	Y+2, r25	; 0x02
    30b4:	89 83       	std	Y+1, r24	; 0x01
    30b6:	89 81       	ldd	r24, Y+1	; 0x01
    30b8:	9a 81       	ldd	r25, Y+2	; 0x02
    30ba:	01 97       	sbiw	r24, 0x01	; 1
    30bc:	f1 f7       	brne	.-4      	; 0x30ba <LCD_displayCharacter+0x802>
    30be:	9a 83       	std	Y+2, r25	; 0x02
    30c0:	89 83       	std	Y+1, r24	; 0x01
		LCD_DATA_PORT = data; /* out the required data to the data bus D0 --> D7 */
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
		_delay_ms(1); /* delay for processing Th = 13ns */
	#endif	
}
    30c2:	cd 59       	subi	r28, 0x9D	; 157
    30c4:	df 4f       	sbci	r29, 0xFF	; 255
    30c6:	0f b6       	in	r0, 0x3f	; 63
    30c8:	f8 94       	cli
    30ca:	de bf       	out	0x3e, r29	; 62
    30cc:	0f be       	out	0x3f, r0	; 63
    30ce:	cd bf       	out	0x3d, r28	; 61
    30d0:	cf 91       	pop	r28
    30d2:	df 91       	pop	r29
    30d4:	1f 91       	pop	r17
    30d6:	0f 91       	pop	r16
    30d8:	08 95       	ret

000030da <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    30da:	df 93       	push	r29
    30dc:	cf 93       	push	r28
    30de:	00 d0       	rcall	.+0      	; 0x30e0 <LCD_displayString+0x6>
    30e0:	0f 92       	push	r0
    30e2:	cd b7       	in	r28, 0x3d	; 61
    30e4:	de b7       	in	r29, 0x3e	; 62
    30e6:	9b 83       	std	Y+3, r25	; 0x03
    30e8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    30ea:	19 82       	std	Y+1, r1	; 0x01
    30ec:	0e c0       	rjmp	.+28     	; 0x310a <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    30ee:	89 81       	ldd	r24, Y+1	; 0x01
    30f0:	28 2f       	mov	r18, r24
    30f2:	30 e0       	ldi	r19, 0x00	; 0
    30f4:	8a 81       	ldd	r24, Y+2	; 0x02
    30f6:	9b 81       	ldd	r25, Y+3	; 0x03
    30f8:	fc 01       	movw	r30, r24
    30fa:	e2 0f       	add	r30, r18
    30fc:	f3 1f       	adc	r31, r19
    30fe:	80 81       	ld	r24, Z
    3100:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <LCD_displayCharacter>
		i++;
    3104:	89 81       	ldd	r24, Y+1	; 0x01
    3106:	8f 5f       	subi	r24, 0xFF	; 255
    3108:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    310a:	89 81       	ldd	r24, Y+1	; 0x01
    310c:	28 2f       	mov	r18, r24
    310e:	30 e0       	ldi	r19, 0x00	; 0
    3110:	8a 81       	ldd	r24, Y+2	; 0x02
    3112:	9b 81       	ldd	r25, Y+3	; 0x03
    3114:	fc 01       	movw	r30, r24
    3116:	e2 0f       	add	r30, r18
    3118:	f3 1f       	adc	r31, r19
    311a:	80 81       	ld	r24, Z
    311c:	88 23       	and	r24, r24
    311e:	39 f7       	brne	.-50     	; 0x30ee <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    3120:	0f 90       	pop	r0
    3122:	0f 90       	pop	r0
    3124:	0f 90       	pop	r0
    3126:	cf 91       	pop	r28
    3128:	df 91       	pop	r29
    312a:	08 95       	ret

0000312c <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    312c:	df 93       	push	r29
    312e:	cf 93       	push	r28
    3130:	00 d0       	rcall	.+0      	; 0x3132 <LCD_goToRowColumn+0x6>
    3132:	00 d0       	rcall	.+0      	; 0x3134 <LCD_goToRowColumn+0x8>
    3134:	0f 92       	push	r0
    3136:	cd b7       	in	r28, 0x3d	; 61
    3138:	de b7       	in	r29, 0x3e	; 62
    313a:	8a 83       	std	Y+2, r24	; 0x02
    313c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    313e:	8a 81       	ldd	r24, Y+2	; 0x02
    3140:	28 2f       	mov	r18, r24
    3142:	30 e0       	ldi	r19, 0x00	; 0
    3144:	3d 83       	std	Y+5, r19	; 0x05
    3146:	2c 83       	std	Y+4, r18	; 0x04
    3148:	8c 81       	ldd	r24, Y+4	; 0x04
    314a:	9d 81       	ldd	r25, Y+5	; 0x05
    314c:	81 30       	cpi	r24, 0x01	; 1
    314e:	91 05       	cpc	r25, r1
    3150:	c1 f0       	breq	.+48     	; 0x3182 <LCD_goToRowColumn+0x56>
    3152:	2c 81       	ldd	r18, Y+4	; 0x04
    3154:	3d 81       	ldd	r19, Y+5	; 0x05
    3156:	22 30       	cpi	r18, 0x02	; 2
    3158:	31 05       	cpc	r19, r1
    315a:	2c f4       	brge	.+10     	; 0x3166 <LCD_goToRowColumn+0x3a>
    315c:	8c 81       	ldd	r24, Y+4	; 0x04
    315e:	9d 81       	ldd	r25, Y+5	; 0x05
    3160:	00 97       	sbiw	r24, 0x00	; 0
    3162:	61 f0       	breq	.+24     	; 0x317c <LCD_goToRowColumn+0x50>
    3164:	19 c0       	rjmp	.+50     	; 0x3198 <LCD_goToRowColumn+0x6c>
    3166:	2c 81       	ldd	r18, Y+4	; 0x04
    3168:	3d 81       	ldd	r19, Y+5	; 0x05
    316a:	22 30       	cpi	r18, 0x02	; 2
    316c:	31 05       	cpc	r19, r1
    316e:	69 f0       	breq	.+26     	; 0x318a <LCD_goToRowColumn+0x5e>
    3170:	8c 81       	ldd	r24, Y+4	; 0x04
    3172:	9d 81       	ldd	r25, Y+5	; 0x05
    3174:	83 30       	cpi	r24, 0x03	; 3
    3176:	91 05       	cpc	r25, r1
    3178:	61 f0       	breq	.+24     	; 0x3192 <LCD_goToRowColumn+0x66>
    317a:	0e c0       	rjmp	.+28     	; 0x3198 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    317c:	8b 81       	ldd	r24, Y+3	; 0x03
    317e:	89 83       	std	Y+1, r24	; 0x01
    3180:	0b c0       	rjmp	.+22     	; 0x3198 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    3182:	8b 81       	ldd	r24, Y+3	; 0x03
    3184:	80 5c       	subi	r24, 0xC0	; 192
    3186:	89 83       	std	Y+1, r24	; 0x01
    3188:	07 c0       	rjmp	.+14     	; 0x3198 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    318a:	8b 81       	ldd	r24, Y+3	; 0x03
    318c:	80 5f       	subi	r24, 0xF0	; 240
    318e:	89 83       	std	Y+1, r24	; 0x01
    3190:	03 c0       	rjmp	.+6      	; 0x3198 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    3192:	8b 81       	ldd	r24, Y+3	; 0x03
    3194:	80 5b       	subi	r24, 0xB0	; 176
    3196:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    3198:	89 81       	ldd	r24, Y+1	; 0x01
    319a:	80 68       	ori	r24, 0x80	; 128
    319c:	0e 94 4b 10 	call	0x2096	; 0x2096 <LCD_sendCommand>
}
    31a0:	0f 90       	pop	r0
    31a2:	0f 90       	pop	r0
    31a4:	0f 90       	pop	r0
    31a6:	0f 90       	pop	r0
    31a8:	0f 90       	pop	r0
    31aa:	cf 91       	pop	r28
    31ac:	df 91       	pop	r29
    31ae:	08 95       	ret

000031b0 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    31b0:	df 93       	push	r29
    31b2:	cf 93       	push	r28
    31b4:	00 d0       	rcall	.+0      	; 0x31b6 <LCD_displayStringRowColumn+0x6>
    31b6:	00 d0       	rcall	.+0      	; 0x31b8 <LCD_displayStringRowColumn+0x8>
    31b8:	cd b7       	in	r28, 0x3d	; 61
    31ba:	de b7       	in	r29, 0x3e	; 62
    31bc:	89 83       	std	Y+1, r24	; 0x01
    31be:	6a 83       	std	Y+2, r22	; 0x02
    31c0:	5c 83       	std	Y+4, r21	; 0x04
    31c2:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    31c4:	89 81       	ldd	r24, Y+1	; 0x01
    31c6:	6a 81       	ldd	r22, Y+2	; 0x02
    31c8:	0e 94 96 18 	call	0x312c	; 0x312c <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    31cc:	8b 81       	ldd	r24, Y+3	; 0x03
    31ce:	9c 81       	ldd	r25, Y+4	; 0x04
    31d0:	0e 94 6d 18 	call	0x30da	; 0x30da <LCD_displayString>
}
    31d4:	0f 90       	pop	r0
    31d6:	0f 90       	pop	r0
    31d8:	0f 90       	pop	r0
    31da:	0f 90       	pop	r0
    31dc:	cf 91       	pop	r28
    31de:	df 91       	pop	r29
    31e0:	08 95       	ret

000031e2 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    31e2:	df 93       	push	r29
    31e4:	cf 93       	push	r28
    31e6:	cd b7       	in	r28, 0x3d	; 61
    31e8:	de b7       	in	r29, 0x3e	; 62
    31ea:	62 97       	sbiw	r28, 0x12	; 18
    31ec:	0f b6       	in	r0, 0x3f	; 63
    31ee:	f8 94       	cli
    31f0:	de bf       	out	0x3e, r29	; 62
    31f2:	0f be       	out	0x3f, r0	; 63
    31f4:	cd bf       	out	0x3d, r28	; 61
    31f6:	9a 8b       	std	Y+18, r25	; 0x12
    31f8:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    31fa:	89 89       	ldd	r24, Y+17	; 0x11
    31fc:	9a 89       	ldd	r25, Y+18	; 0x12
    31fe:	9e 01       	movw	r18, r28
    3200:	2f 5f       	subi	r18, 0xFF	; 255
    3202:	3f 4f       	sbci	r19, 0xFF	; 255
    3204:	b9 01       	movw	r22, r18
    3206:	4a e0       	ldi	r20, 0x0A	; 10
    3208:	50 e0       	ldi	r21, 0x00	; 0
    320a:	0e 94 a9 1c 	call	0x3952	; 0x3952 <itoa>
   LCD_displayString(buff);
    320e:	ce 01       	movw	r24, r28
    3210:	01 96       	adiw	r24, 0x01	; 1
    3212:	0e 94 6d 18 	call	0x30da	; 0x30da <LCD_displayString>
}
    3216:	62 96       	adiw	r28, 0x12	; 18
    3218:	0f b6       	in	r0, 0x3f	; 63
    321a:	f8 94       	cli
    321c:	de bf       	out	0x3e, r29	; 62
    321e:	0f be       	out	0x3f, r0	; 63
    3220:	cd bf       	out	0x3d, r28	; 61
    3222:	cf 91       	pop	r28
    3224:	df 91       	pop	r29
    3226:	08 95       	ret

00003228 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    3228:	df 93       	push	r29
    322a:	cf 93       	push	r28
    322c:	cd b7       	in	r28, 0x3d	; 61
    322e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    3230:	81 e0       	ldi	r24, 0x01	; 1
    3232:	0e 94 4b 10 	call	0x2096	; 0x2096 <LCD_sendCommand>
    3236:	cf 91       	pop	r28
    3238:	df 91       	pop	r29
    323a:	08 95       	ret

0000323c <main>:
#include "Keypad.h"
#define M1_READY 0x10

#include "app.h"

int main(void) {
    323c:	0f 93       	push	r16
    323e:	1f 93       	push	r17
    3240:	df 93       	push	r29
    3242:	cf 93       	push	r28
    3244:	cd b7       	in	r28, 0x3d	; 61
    3246:	de b7       	in	r29, 0x3e	; 62
    3248:	cb 55       	subi	r28, 0x5B	; 91
    324a:	d0 40       	sbci	r29, 0x00	; 0
    324c:	0f b6       	in	r0, 0x3f	; 63
    324e:	f8 94       	cli
    3250:	de bf       	out	0x3e, r29	; 62
    3252:	0f be       	out	0x3f, r0	; 63
    3254:	cd bf       	out	0x3d, r28	; 61
	/**
	 * Initialization
	 */
	uint8 selection;
	uint8 Str[20];
	UART_init(); // initialize UART driver
    3256:	0e 94 bb 1b 	call	0x3776	; 0x3776 <UART_init>
	LCD_init(); // initialize LCD driver
    325a:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_init>
	LCD_clearScreen();
    325e:	0e 94 14 19 	call	0x3228	; 0x3228 <LCD_clearScreen>
	LCD_displayString("Welcome");
    3262:	8e e9       	ldi	r24, 0x9E	; 158
    3264:	91 e0       	ldi	r25, 0x01	; 1
    3266:	0e 94 6d 18 	call	0x30da	; 0x30da <LCD_displayString>

	/**
	 * Sync with MCU1
	 */
	UART_sendByte(M1_READY); // MC1 is ready
    326a:	80 e1       	ldi	r24, 0x10	; 16
    326c:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <UART_sendByte>
	UART_receiveString(Str); // receive the string
    3270:	ce 01       	movw	r24, r28
    3272:	88 5b       	subi	r24, 0xB8	; 184
    3274:	9f 4f       	sbci	r25, 0xFF	; 255
    3276:	0e 94 2f 1c 	call	0x385e	; 0x385e <UART_receiveString>
	LCD_clearScreen();
    327a:	0e 94 14 19 	call	0x3228	; 0x3228 <LCD_clearScreen>
	LCD_displayString(Str);
    327e:	ce 01       	movw	r24, r28
    3280:	88 5b       	subi	r24, 0xB8	; 184
    3282:	9f 4f       	sbci	r25, 0xFF	; 255
    3284:	0e 94 6d 18 	call	0x30da	; 0x30da <LCD_displayString>
    3288:	fe 01       	movw	r30, r28
    328a:	ed 5b       	subi	r30, 0xBD	; 189
    328c:	ff 4f       	sbci	r31, 0xFF	; 255
    328e:	80 e0       	ldi	r24, 0x00	; 0
    3290:	90 e0       	ldi	r25, 0x00	; 0
    3292:	aa ef       	ldi	r26, 0xFA	; 250
    3294:	b3 e4       	ldi	r27, 0x43	; 67
    3296:	80 83       	st	Z, r24
    3298:	91 83       	std	Z+1, r25	; 0x01
    329a:	a2 83       	std	Z+2, r26	; 0x02
    329c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    329e:	8e 01       	movw	r16, r28
    32a0:	01 5c       	subi	r16, 0xC1	; 193
    32a2:	1f 4f       	sbci	r17, 0xFF	; 255
    32a4:	fe 01       	movw	r30, r28
    32a6:	ed 5b       	subi	r30, 0xBD	; 189
    32a8:	ff 4f       	sbci	r31, 0xFF	; 255
    32aa:	60 81       	ld	r22, Z
    32ac:	71 81       	ldd	r23, Z+1	; 0x01
    32ae:	82 81       	ldd	r24, Z+2	; 0x02
    32b0:	93 81       	ldd	r25, Z+3	; 0x03
    32b2:	20 e0       	ldi	r18, 0x00	; 0
    32b4:	30 e0       	ldi	r19, 0x00	; 0
    32b6:	4a ef       	ldi	r20, 0xFA	; 250
    32b8:	54 e4       	ldi	r21, 0x44	; 68
    32ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    32be:	dc 01       	movw	r26, r24
    32c0:	cb 01       	movw	r24, r22
    32c2:	f8 01       	movw	r30, r16
    32c4:	80 83       	st	Z, r24
    32c6:	91 83       	std	Z+1, r25	; 0x01
    32c8:	a2 83       	std	Z+2, r26	; 0x02
    32ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    32cc:	fe 01       	movw	r30, r28
    32ce:	ff 96       	adiw	r30, 0x3f	; 63
    32d0:	60 81       	ld	r22, Z
    32d2:	71 81       	ldd	r23, Z+1	; 0x01
    32d4:	82 81       	ldd	r24, Z+2	; 0x02
    32d6:	93 81       	ldd	r25, Z+3	; 0x03
    32d8:	20 e0       	ldi	r18, 0x00	; 0
    32da:	30 e0       	ldi	r19, 0x00	; 0
    32dc:	40 e8       	ldi	r20, 0x80	; 128
    32de:	5f e3       	ldi	r21, 0x3F	; 63
    32e0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    32e4:	88 23       	and	r24, r24
    32e6:	2c f4       	brge	.+10     	; 0x32f2 <main+0xb6>
		__ticks = 1;
    32e8:	81 e0       	ldi	r24, 0x01	; 1
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	9e af       	std	Y+62, r25	; 0x3e
    32ee:	8d af       	std	Y+61, r24	; 0x3d
    32f0:	46 c0       	rjmp	.+140    	; 0x337e <main+0x142>
	else if (__tmp > 65535)
    32f2:	fe 01       	movw	r30, r28
    32f4:	ff 96       	adiw	r30, 0x3f	; 63
    32f6:	60 81       	ld	r22, Z
    32f8:	71 81       	ldd	r23, Z+1	; 0x01
    32fa:	82 81       	ldd	r24, Z+2	; 0x02
    32fc:	93 81       	ldd	r25, Z+3	; 0x03
    32fe:	20 e0       	ldi	r18, 0x00	; 0
    3300:	3f ef       	ldi	r19, 0xFF	; 255
    3302:	4f e7       	ldi	r20, 0x7F	; 127
    3304:	57 e4       	ldi	r21, 0x47	; 71
    3306:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    330a:	18 16       	cp	r1, r24
    330c:	64 f5       	brge	.+88     	; 0x3366 <main+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    330e:	fe 01       	movw	r30, r28
    3310:	ed 5b       	subi	r30, 0xBD	; 189
    3312:	ff 4f       	sbci	r31, 0xFF	; 255
    3314:	60 81       	ld	r22, Z
    3316:	71 81       	ldd	r23, Z+1	; 0x01
    3318:	82 81       	ldd	r24, Z+2	; 0x02
    331a:	93 81       	ldd	r25, Z+3	; 0x03
    331c:	20 e0       	ldi	r18, 0x00	; 0
    331e:	30 e0       	ldi	r19, 0x00	; 0
    3320:	40 e2       	ldi	r20, 0x20	; 32
    3322:	51 e4       	ldi	r21, 0x41	; 65
    3324:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3328:	dc 01       	movw	r26, r24
    332a:	cb 01       	movw	r24, r22
    332c:	bc 01       	movw	r22, r24
    332e:	cd 01       	movw	r24, r26
    3330:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3334:	dc 01       	movw	r26, r24
    3336:	cb 01       	movw	r24, r22
    3338:	9e af       	std	Y+62, r25	; 0x3e
    333a:	8d af       	std	Y+61, r24	; 0x3d
    333c:	0f c0       	rjmp	.+30     	; 0x335c <main+0x120>
    333e:	88 ec       	ldi	r24, 0xC8	; 200
    3340:	90 e0       	ldi	r25, 0x00	; 0
    3342:	9c af       	std	Y+60, r25	; 0x3c
    3344:	8b af       	std	Y+59, r24	; 0x3b
    3346:	8b ad       	ldd	r24, Y+59	; 0x3b
    3348:	9c ad       	ldd	r25, Y+60	; 0x3c
    334a:	01 97       	sbiw	r24, 0x01	; 1
    334c:	f1 f7       	brne	.-4      	; 0x334a <main+0x10e>
    334e:	9c af       	std	Y+60, r25	; 0x3c
    3350:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3352:	8d ad       	ldd	r24, Y+61	; 0x3d
    3354:	9e ad       	ldd	r25, Y+62	; 0x3e
    3356:	01 97       	sbiw	r24, 0x01	; 1
    3358:	9e af       	std	Y+62, r25	; 0x3e
    335a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    335c:	8d ad       	ldd	r24, Y+61	; 0x3d
    335e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3360:	00 97       	sbiw	r24, 0x00	; 0
    3362:	69 f7       	brne	.-38     	; 0x333e <main+0x102>
    3364:	16 c0       	rjmp	.+44     	; 0x3392 <main+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3366:	fe 01       	movw	r30, r28
    3368:	ff 96       	adiw	r30, 0x3f	; 63
    336a:	60 81       	ld	r22, Z
    336c:	71 81       	ldd	r23, Z+1	; 0x01
    336e:	82 81       	ldd	r24, Z+2	; 0x02
    3370:	93 81       	ldd	r25, Z+3	; 0x03
    3372:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3376:	dc 01       	movw	r26, r24
    3378:	cb 01       	movw	r24, r22
    337a:	9e af       	std	Y+62, r25	; 0x3e
    337c:	8d af       	std	Y+61, r24	; 0x3d
    337e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3380:	9e ad       	ldd	r25, Y+62	; 0x3e
    3382:	9a af       	std	Y+58, r25	; 0x3a
    3384:	89 af       	std	Y+57, r24	; 0x39
    3386:	89 ad       	ldd	r24, Y+57	; 0x39
    3388:	9a ad       	ldd	r25, Y+58	; 0x3a
    338a:	01 97       	sbiw	r24, 0x01	; 1
    338c:	f1 f7       	brne	.-4      	; 0x338a <main+0x14e>
    338e:	9a af       	std	Y+58, r25	; 0x3a
    3390:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(500);
	LCD_clearScreen();
    3392:	0e 94 14 19 	call	0x3228	; 0x3228 <LCD_clearScreen>
	LCD_displayString("System Ready #");
    3396:	86 ea       	ldi	r24, 0xA6	; 166
    3398:	91 e0       	ldi	r25, 0x01	; 1
    339a:	0e 94 6d 18 	call	0x30da	; 0x30da <LCD_displayString>
    339e:	80 e0       	ldi	r24, 0x00	; 0
    33a0:	90 e0       	ldi	r25, 0x00	; 0
    33a2:	aa ef       	ldi	r26, 0xFA	; 250
    33a4:	b3 e4       	ldi	r27, 0x43	; 67
    33a6:	8d ab       	std	Y+53, r24	; 0x35
    33a8:	9e ab       	std	Y+54, r25	; 0x36
    33aa:	af ab       	std	Y+55, r26	; 0x37
    33ac:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33ae:	6d a9       	ldd	r22, Y+53	; 0x35
    33b0:	7e a9       	ldd	r23, Y+54	; 0x36
    33b2:	8f a9       	ldd	r24, Y+55	; 0x37
    33b4:	98 ad       	ldd	r25, Y+56	; 0x38
    33b6:	20 e0       	ldi	r18, 0x00	; 0
    33b8:	30 e0       	ldi	r19, 0x00	; 0
    33ba:	4a ef       	ldi	r20, 0xFA	; 250
    33bc:	54 e4       	ldi	r21, 0x44	; 68
    33be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    33c2:	dc 01       	movw	r26, r24
    33c4:	cb 01       	movw	r24, r22
    33c6:	89 ab       	std	Y+49, r24	; 0x31
    33c8:	9a ab       	std	Y+50, r25	; 0x32
    33ca:	ab ab       	std	Y+51, r26	; 0x33
    33cc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    33ce:	69 a9       	ldd	r22, Y+49	; 0x31
    33d0:	7a a9       	ldd	r23, Y+50	; 0x32
    33d2:	8b a9       	ldd	r24, Y+51	; 0x33
    33d4:	9c a9       	ldd	r25, Y+52	; 0x34
    33d6:	20 e0       	ldi	r18, 0x00	; 0
    33d8:	30 e0       	ldi	r19, 0x00	; 0
    33da:	40 e8       	ldi	r20, 0x80	; 128
    33dc:	5f e3       	ldi	r21, 0x3F	; 63
    33de:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    33e2:	88 23       	and	r24, r24
    33e4:	2c f4       	brge	.+10     	; 0x33f0 <main+0x1b4>
		__ticks = 1;
    33e6:	81 e0       	ldi	r24, 0x01	; 1
    33e8:	90 e0       	ldi	r25, 0x00	; 0
    33ea:	98 ab       	std	Y+48, r25	; 0x30
    33ec:	8f a7       	std	Y+47, r24	; 0x2f
    33ee:	3f c0       	rjmp	.+126    	; 0x346e <main+0x232>
	else if (__tmp > 65535)
    33f0:	69 a9       	ldd	r22, Y+49	; 0x31
    33f2:	7a a9       	ldd	r23, Y+50	; 0x32
    33f4:	8b a9       	ldd	r24, Y+51	; 0x33
    33f6:	9c a9       	ldd	r25, Y+52	; 0x34
    33f8:	20 e0       	ldi	r18, 0x00	; 0
    33fa:	3f ef       	ldi	r19, 0xFF	; 255
    33fc:	4f e7       	ldi	r20, 0x7F	; 127
    33fe:	57 e4       	ldi	r21, 0x47	; 71
    3400:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3404:	18 16       	cp	r1, r24
    3406:	4c f5       	brge	.+82     	; 0x345a <main+0x21e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3408:	6d a9       	ldd	r22, Y+53	; 0x35
    340a:	7e a9       	ldd	r23, Y+54	; 0x36
    340c:	8f a9       	ldd	r24, Y+55	; 0x37
    340e:	98 ad       	ldd	r25, Y+56	; 0x38
    3410:	20 e0       	ldi	r18, 0x00	; 0
    3412:	30 e0       	ldi	r19, 0x00	; 0
    3414:	40 e2       	ldi	r20, 0x20	; 32
    3416:	51 e4       	ldi	r21, 0x41	; 65
    3418:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    341c:	dc 01       	movw	r26, r24
    341e:	cb 01       	movw	r24, r22
    3420:	bc 01       	movw	r22, r24
    3422:	cd 01       	movw	r24, r26
    3424:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3428:	dc 01       	movw	r26, r24
    342a:	cb 01       	movw	r24, r22
    342c:	98 ab       	std	Y+48, r25	; 0x30
    342e:	8f a7       	std	Y+47, r24	; 0x2f
    3430:	0f c0       	rjmp	.+30     	; 0x3450 <main+0x214>
    3432:	88 ec       	ldi	r24, 0xC8	; 200
    3434:	90 e0       	ldi	r25, 0x00	; 0
    3436:	9e a7       	std	Y+46, r25	; 0x2e
    3438:	8d a7       	std	Y+45, r24	; 0x2d
    343a:	8d a5       	ldd	r24, Y+45	; 0x2d
    343c:	9e a5       	ldd	r25, Y+46	; 0x2e
    343e:	01 97       	sbiw	r24, 0x01	; 1
    3440:	f1 f7       	brne	.-4      	; 0x343e <main+0x202>
    3442:	9e a7       	std	Y+46, r25	; 0x2e
    3444:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3446:	8f a5       	ldd	r24, Y+47	; 0x2f
    3448:	98 a9       	ldd	r25, Y+48	; 0x30
    344a:	01 97       	sbiw	r24, 0x01	; 1
    344c:	98 ab       	std	Y+48, r25	; 0x30
    344e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3450:	8f a5       	ldd	r24, Y+47	; 0x2f
    3452:	98 a9       	ldd	r25, Y+48	; 0x30
    3454:	00 97       	sbiw	r24, 0x00	; 0
    3456:	69 f7       	brne	.-38     	; 0x3432 <main+0x1f6>
    3458:	14 c0       	rjmp	.+40     	; 0x3482 <main+0x246>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    345a:	69 a9       	ldd	r22, Y+49	; 0x31
    345c:	7a a9       	ldd	r23, Y+50	; 0x32
    345e:	8b a9       	ldd	r24, Y+51	; 0x33
    3460:	9c a9       	ldd	r25, Y+52	; 0x34
    3462:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3466:	dc 01       	movw	r26, r24
    3468:	cb 01       	movw	r24, r22
    346a:	98 ab       	std	Y+48, r25	; 0x30
    346c:	8f a7       	std	Y+47, r24	; 0x2f
    346e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3470:	98 a9       	ldd	r25, Y+48	; 0x30
    3472:	9c a7       	std	Y+44, r25	; 0x2c
    3474:	8b a7       	std	Y+43, r24	; 0x2b
    3476:	8b a5       	ldd	r24, Y+43	; 0x2b
    3478:	9c a5       	ldd	r25, Y+44	; 0x2c
    347a:	01 97       	sbiw	r24, 0x01	; 1
    347c:	f1 f7       	brne	.-4      	; 0x347a <main+0x23e>
    347e:	9c a7       	std	Y+44, r25	; 0x2c
    3480:	8b a7       	std	Y+43, r24	; 0x2b





	APP_setPassword();
    3482:	0e 94 77 06 	call	0xcee	; 0xcee <APP_setPassword>


	for (;;) {

		selection = APP_showOptionMenuGetAnswer();
    3486:	0e 94 16 0a 	call	0x142c	; 0x142c <APP_showOptionMenuGetAnswer>
    348a:	fe 01       	movw	r30, r28
    348c:	e9 5b       	subi	r30, 0xB9	; 185
    348e:	ff 4f       	sbci	r31, 0xFF	; 255
    3490:	80 83       	st	Z, r24
    3492:	80 e0       	ldi	r24, 0x00	; 0
    3494:	90 e0       	ldi	r25, 0x00	; 0
    3496:	aa ef       	ldi	r26, 0xFA	; 250
    3498:	b3 e4       	ldi	r27, 0x43	; 67
    349a:	8f a3       	std	Y+39, r24	; 0x27
    349c:	98 a7       	std	Y+40, r25	; 0x28
    349e:	a9 a7       	std	Y+41, r26	; 0x29
    34a0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34a2:	6f a1       	ldd	r22, Y+39	; 0x27
    34a4:	78 a5       	ldd	r23, Y+40	; 0x28
    34a6:	89 a5       	ldd	r24, Y+41	; 0x29
    34a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    34aa:	20 e0       	ldi	r18, 0x00	; 0
    34ac:	30 e0       	ldi	r19, 0x00	; 0
    34ae:	4a ef       	ldi	r20, 0xFA	; 250
    34b0:	54 e4       	ldi	r21, 0x44	; 68
    34b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    34b6:	dc 01       	movw	r26, r24
    34b8:	cb 01       	movw	r24, r22
    34ba:	8b a3       	std	Y+35, r24	; 0x23
    34bc:	9c a3       	std	Y+36, r25	; 0x24
    34be:	ad a3       	std	Y+37, r26	; 0x25
    34c0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    34c2:	6b a1       	ldd	r22, Y+35	; 0x23
    34c4:	7c a1       	ldd	r23, Y+36	; 0x24
    34c6:	8d a1       	ldd	r24, Y+37	; 0x25
    34c8:	9e a1       	ldd	r25, Y+38	; 0x26
    34ca:	20 e0       	ldi	r18, 0x00	; 0
    34cc:	30 e0       	ldi	r19, 0x00	; 0
    34ce:	40 e8       	ldi	r20, 0x80	; 128
    34d0:	5f e3       	ldi	r21, 0x3F	; 63
    34d2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    34d6:	88 23       	and	r24, r24
    34d8:	2c f4       	brge	.+10     	; 0x34e4 <main+0x2a8>
		__ticks = 1;
    34da:	81 e0       	ldi	r24, 0x01	; 1
    34dc:	90 e0       	ldi	r25, 0x00	; 0
    34de:	9a a3       	std	Y+34, r25	; 0x22
    34e0:	89 a3       	std	Y+33, r24	; 0x21
    34e2:	3f c0       	rjmp	.+126    	; 0x3562 <main+0x326>
	else if (__tmp > 65535)
    34e4:	6b a1       	ldd	r22, Y+35	; 0x23
    34e6:	7c a1       	ldd	r23, Y+36	; 0x24
    34e8:	8d a1       	ldd	r24, Y+37	; 0x25
    34ea:	9e a1       	ldd	r25, Y+38	; 0x26
    34ec:	20 e0       	ldi	r18, 0x00	; 0
    34ee:	3f ef       	ldi	r19, 0xFF	; 255
    34f0:	4f e7       	ldi	r20, 0x7F	; 127
    34f2:	57 e4       	ldi	r21, 0x47	; 71
    34f4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    34f8:	18 16       	cp	r1, r24
    34fa:	4c f5       	brge	.+82     	; 0x354e <main+0x312>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34fc:	6f a1       	ldd	r22, Y+39	; 0x27
    34fe:	78 a5       	ldd	r23, Y+40	; 0x28
    3500:	89 a5       	ldd	r24, Y+41	; 0x29
    3502:	9a a5       	ldd	r25, Y+42	; 0x2a
    3504:	20 e0       	ldi	r18, 0x00	; 0
    3506:	30 e0       	ldi	r19, 0x00	; 0
    3508:	40 e2       	ldi	r20, 0x20	; 32
    350a:	51 e4       	ldi	r21, 0x41	; 65
    350c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3510:	dc 01       	movw	r26, r24
    3512:	cb 01       	movw	r24, r22
    3514:	bc 01       	movw	r22, r24
    3516:	cd 01       	movw	r24, r26
    3518:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    351c:	dc 01       	movw	r26, r24
    351e:	cb 01       	movw	r24, r22
    3520:	9a a3       	std	Y+34, r25	; 0x22
    3522:	89 a3       	std	Y+33, r24	; 0x21
    3524:	0f c0       	rjmp	.+30     	; 0x3544 <main+0x308>
    3526:	88 ec       	ldi	r24, 0xC8	; 200
    3528:	90 e0       	ldi	r25, 0x00	; 0
    352a:	98 a3       	std	Y+32, r25	; 0x20
    352c:	8f 8f       	std	Y+31, r24	; 0x1f
    352e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3530:	98 a1       	ldd	r25, Y+32	; 0x20
    3532:	01 97       	sbiw	r24, 0x01	; 1
    3534:	f1 f7       	brne	.-4      	; 0x3532 <main+0x2f6>
    3536:	98 a3       	std	Y+32, r25	; 0x20
    3538:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    353a:	89 a1       	ldd	r24, Y+33	; 0x21
    353c:	9a a1       	ldd	r25, Y+34	; 0x22
    353e:	01 97       	sbiw	r24, 0x01	; 1
    3540:	9a a3       	std	Y+34, r25	; 0x22
    3542:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3544:	89 a1       	ldd	r24, Y+33	; 0x21
    3546:	9a a1       	ldd	r25, Y+34	; 0x22
    3548:	00 97       	sbiw	r24, 0x00	; 0
    354a:	69 f7       	brne	.-38     	; 0x3526 <main+0x2ea>
    354c:	14 c0       	rjmp	.+40     	; 0x3576 <main+0x33a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    354e:	6b a1       	ldd	r22, Y+35	; 0x23
    3550:	7c a1       	ldd	r23, Y+36	; 0x24
    3552:	8d a1       	ldd	r24, Y+37	; 0x25
    3554:	9e a1       	ldd	r25, Y+38	; 0x26
    3556:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    355a:	dc 01       	movw	r26, r24
    355c:	cb 01       	movw	r24, r22
    355e:	9a a3       	std	Y+34, r25	; 0x22
    3560:	89 a3       	std	Y+33, r24	; 0x21
    3562:	89 a1       	ldd	r24, Y+33	; 0x21
    3564:	9a a1       	ldd	r25, Y+34	; 0x22
    3566:	9e 8f       	std	Y+30, r25	; 0x1e
    3568:	8d 8f       	std	Y+29, r24	; 0x1d
    356a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    356c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    356e:	01 97       	sbiw	r24, 0x01	; 1
    3570:	f1 f7       	brne	.-4      	; 0x356e <main+0x332>
    3572:	9e 8f       	std	Y+30, r25	; 0x1e
    3574:	8d 8f       	std	Y+29, r24	; 0x1d

		_delay_ms(500);
		if (APP_doesTheUserHaveThePassword()) {
    3576:	0e 94 b8 08 	call	0x1170	; 0x1170 <APP_doesTheUserHaveThePassword>
    357a:	00 97       	sbiw	r24, 0x00	; 0
    357c:	09 f4       	brne	.+2      	; 0x3580 <main+0x344>
    357e:	f8 c0       	rjmp	.+496    	; 0x3770 <main+0x534>
			/**
			 * the user have the password
			 * Look at his selection
			 */

			if (selection == 1) {
    3580:	fe 01       	movw	r30, r28
    3582:	e9 5b       	subi	r30, 0xB9	; 185
    3584:	ff 4f       	sbci	r31, 0xFF	; 255
    3586:	80 81       	ld	r24, Z
    3588:	81 30       	cpi	r24, 0x01	; 1
    358a:	11 f4       	brne	.+4      	; 0x3590 <main+0x354>
				/**Change password */

				APP_setPassword();
    358c:	0e 94 77 06 	call	0xcee	; 0xcee <APP_setPassword>

			}
			if (selection == 2) {
    3590:	fe 01       	movw	r30, r28
    3592:	e9 5b       	subi	r30, 0xB9	; 185
    3594:	ff 4f       	sbci	r31, 0xFF	; 255
    3596:	80 81       	ld	r24, Z
    3598:	82 30       	cpi	r24, 0x02	; 2
    359a:	09 f0       	breq	.+2      	; 0x359e <main+0x362>
    359c:	74 cf       	rjmp	.-280    	; 0x3486 <main+0x24a>
				/** Open the door */
				APP_openTheDoor();
    359e:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <APP_openTheDoor>
    35a2:	80 e0       	ldi	r24, 0x00	; 0
    35a4:	90 e0       	ldi	r25, 0x00	; 0
    35a6:	aa ef       	ldi	r26, 0xFA	; 250
    35a8:	b4 e4       	ldi	r27, 0x44	; 68
    35aa:	89 8f       	std	Y+25, r24	; 0x19
    35ac:	9a 8f       	std	Y+26, r25	; 0x1a
    35ae:	ab 8f       	std	Y+27, r26	; 0x1b
    35b0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35b2:	69 8d       	ldd	r22, Y+25	; 0x19
    35b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35ba:	20 e0       	ldi	r18, 0x00	; 0
    35bc:	30 e0       	ldi	r19, 0x00	; 0
    35be:	4a ef       	ldi	r20, 0xFA	; 250
    35c0:	54 e4       	ldi	r21, 0x44	; 68
    35c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    35c6:	dc 01       	movw	r26, r24
    35c8:	cb 01       	movw	r24, r22
    35ca:	8d 8b       	std	Y+21, r24	; 0x15
    35cc:	9e 8b       	std	Y+22, r25	; 0x16
    35ce:	af 8b       	std	Y+23, r26	; 0x17
    35d0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    35d2:	6d 89       	ldd	r22, Y+21	; 0x15
    35d4:	7e 89       	ldd	r23, Y+22	; 0x16
    35d6:	8f 89       	ldd	r24, Y+23	; 0x17
    35d8:	98 8d       	ldd	r25, Y+24	; 0x18
    35da:	20 e0       	ldi	r18, 0x00	; 0
    35dc:	30 e0       	ldi	r19, 0x00	; 0
    35de:	40 e8       	ldi	r20, 0x80	; 128
    35e0:	5f e3       	ldi	r21, 0x3F	; 63
    35e2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    35e6:	88 23       	and	r24, r24
    35e8:	2c f4       	brge	.+10     	; 0x35f4 <main+0x3b8>
		__ticks = 1;
    35ea:	81 e0       	ldi	r24, 0x01	; 1
    35ec:	90 e0       	ldi	r25, 0x00	; 0
    35ee:	9c 8b       	std	Y+20, r25	; 0x14
    35f0:	8b 8b       	std	Y+19, r24	; 0x13
    35f2:	3f c0       	rjmp	.+126    	; 0x3672 <main+0x436>
	else if (__tmp > 65535)
    35f4:	6d 89       	ldd	r22, Y+21	; 0x15
    35f6:	7e 89       	ldd	r23, Y+22	; 0x16
    35f8:	8f 89       	ldd	r24, Y+23	; 0x17
    35fa:	98 8d       	ldd	r25, Y+24	; 0x18
    35fc:	20 e0       	ldi	r18, 0x00	; 0
    35fe:	3f ef       	ldi	r19, 0xFF	; 255
    3600:	4f e7       	ldi	r20, 0x7F	; 127
    3602:	57 e4       	ldi	r21, 0x47	; 71
    3604:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3608:	18 16       	cp	r1, r24
    360a:	4c f5       	brge	.+82     	; 0x365e <main+0x422>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    360c:	69 8d       	ldd	r22, Y+25	; 0x19
    360e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3610:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3612:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3614:	20 e0       	ldi	r18, 0x00	; 0
    3616:	30 e0       	ldi	r19, 0x00	; 0
    3618:	40 e2       	ldi	r20, 0x20	; 32
    361a:	51 e4       	ldi	r21, 0x41	; 65
    361c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3620:	dc 01       	movw	r26, r24
    3622:	cb 01       	movw	r24, r22
    3624:	bc 01       	movw	r22, r24
    3626:	cd 01       	movw	r24, r26
    3628:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    362c:	dc 01       	movw	r26, r24
    362e:	cb 01       	movw	r24, r22
    3630:	9c 8b       	std	Y+20, r25	; 0x14
    3632:	8b 8b       	std	Y+19, r24	; 0x13
    3634:	0f c0       	rjmp	.+30     	; 0x3654 <main+0x418>
    3636:	88 ec       	ldi	r24, 0xC8	; 200
    3638:	90 e0       	ldi	r25, 0x00	; 0
    363a:	9a 8b       	std	Y+18, r25	; 0x12
    363c:	89 8b       	std	Y+17, r24	; 0x11
    363e:	89 89       	ldd	r24, Y+17	; 0x11
    3640:	9a 89       	ldd	r25, Y+18	; 0x12
    3642:	01 97       	sbiw	r24, 0x01	; 1
    3644:	f1 f7       	brne	.-4      	; 0x3642 <main+0x406>
    3646:	9a 8b       	std	Y+18, r25	; 0x12
    3648:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    364a:	8b 89       	ldd	r24, Y+19	; 0x13
    364c:	9c 89       	ldd	r25, Y+20	; 0x14
    364e:	01 97       	sbiw	r24, 0x01	; 1
    3650:	9c 8b       	std	Y+20, r25	; 0x14
    3652:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3654:	8b 89       	ldd	r24, Y+19	; 0x13
    3656:	9c 89       	ldd	r25, Y+20	; 0x14
    3658:	00 97       	sbiw	r24, 0x00	; 0
    365a:	69 f7       	brne	.-38     	; 0x3636 <main+0x3fa>
    365c:	14 c0       	rjmp	.+40     	; 0x3686 <main+0x44a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    365e:	6d 89       	ldd	r22, Y+21	; 0x15
    3660:	7e 89       	ldd	r23, Y+22	; 0x16
    3662:	8f 89       	ldd	r24, Y+23	; 0x17
    3664:	98 8d       	ldd	r25, Y+24	; 0x18
    3666:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    366a:	dc 01       	movw	r26, r24
    366c:	cb 01       	movw	r24, r22
    366e:	9c 8b       	std	Y+20, r25	; 0x14
    3670:	8b 8b       	std	Y+19, r24	; 0x13
    3672:	8b 89       	ldd	r24, Y+19	; 0x13
    3674:	9c 89       	ldd	r25, Y+20	; 0x14
    3676:	98 8b       	std	Y+16, r25	; 0x10
    3678:	8f 87       	std	Y+15, r24	; 0x0f
    367a:	8f 85       	ldd	r24, Y+15	; 0x0f
    367c:	98 89       	ldd	r25, Y+16	; 0x10
    367e:	01 97       	sbiw	r24, 0x01	; 1
    3680:	f1 f7       	brne	.-4      	; 0x367e <main+0x442>
    3682:	98 8b       	std	Y+16, r25	; 0x10
    3684:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(2000);
				APP_closeTheDoor();
    3686:	0e 94 87 0c 	call	0x190e	; 0x190e <APP_closeTheDoor>
    368a:	80 e0       	ldi	r24, 0x00	; 0
    368c:	90 e0       	ldi	r25, 0x00	; 0
    368e:	aa ef       	ldi	r26, 0xFA	; 250
    3690:	b4 e4       	ldi	r27, 0x44	; 68
    3692:	8b 87       	std	Y+11, r24	; 0x0b
    3694:	9c 87       	std	Y+12, r25	; 0x0c
    3696:	ad 87       	std	Y+13, r26	; 0x0d
    3698:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    369a:	6b 85       	ldd	r22, Y+11	; 0x0b
    369c:	7c 85       	ldd	r23, Y+12	; 0x0c
    369e:	8d 85       	ldd	r24, Y+13	; 0x0d
    36a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    36a2:	20 e0       	ldi	r18, 0x00	; 0
    36a4:	30 e0       	ldi	r19, 0x00	; 0
    36a6:	4a ef       	ldi	r20, 0xFA	; 250
    36a8:	54 e4       	ldi	r21, 0x44	; 68
    36aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    36ae:	dc 01       	movw	r26, r24
    36b0:	cb 01       	movw	r24, r22
    36b2:	8f 83       	std	Y+7, r24	; 0x07
    36b4:	98 87       	std	Y+8, r25	; 0x08
    36b6:	a9 87       	std	Y+9, r26	; 0x09
    36b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    36ba:	6f 81       	ldd	r22, Y+7	; 0x07
    36bc:	78 85       	ldd	r23, Y+8	; 0x08
    36be:	89 85       	ldd	r24, Y+9	; 0x09
    36c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    36c2:	20 e0       	ldi	r18, 0x00	; 0
    36c4:	30 e0       	ldi	r19, 0x00	; 0
    36c6:	40 e8       	ldi	r20, 0x80	; 128
    36c8:	5f e3       	ldi	r21, 0x3F	; 63
    36ca:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    36ce:	88 23       	and	r24, r24
    36d0:	2c f4       	brge	.+10     	; 0x36dc <main+0x4a0>
		__ticks = 1;
    36d2:	81 e0       	ldi	r24, 0x01	; 1
    36d4:	90 e0       	ldi	r25, 0x00	; 0
    36d6:	9e 83       	std	Y+6, r25	; 0x06
    36d8:	8d 83       	std	Y+5, r24	; 0x05
    36da:	3f c0       	rjmp	.+126    	; 0x375a <main+0x51e>
	else if (__tmp > 65535)
    36dc:	6f 81       	ldd	r22, Y+7	; 0x07
    36de:	78 85       	ldd	r23, Y+8	; 0x08
    36e0:	89 85       	ldd	r24, Y+9	; 0x09
    36e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    36e4:	20 e0       	ldi	r18, 0x00	; 0
    36e6:	3f ef       	ldi	r19, 0xFF	; 255
    36e8:	4f e7       	ldi	r20, 0x7F	; 127
    36ea:	57 e4       	ldi	r21, 0x47	; 71
    36ec:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    36f0:	18 16       	cp	r1, r24
    36f2:	4c f5       	brge	.+82     	; 0x3746 <main+0x50a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    36f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    36f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    36fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    36fc:	20 e0       	ldi	r18, 0x00	; 0
    36fe:	30 e0       	ldi	r19, 0x00	; 0
    3700:	40 e2       	ldi	r20, 0x20	; 32
    3702:	51 e4       	ldi	r21, 0x41	; 65
    3704:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3708:	dc 01       	movw	r26, r24
    370a:	cb 01       	movw	r24, r22
    370c:	bc 01       	movw	r22, r24
    370e:	cd 01       	movw	r24, r26
    3710:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3714:	dc 01       	movw	r26, r24
    3716:	cb 01       	movw	r24, r22
    3718:	9e 83       	std	Y+6, r25	; 0x06
    371a:	8d 83       	std	Y+5, r24	; 0x05
    371c:	0f c0       	rjmp	.+30     	; 0x373c <main+0x500>
    371e:	88 ec       	ldi	r24, 0xC8	; 200
    3720:	90 e0       	ldi	r25, 0x00	; 0
    3722:	9c 83       	std	Y+4, r25	; 0x04
    3724:	8b 83       	std	Y+3, r24	; 0x03
    3726:	8b 81       	ldd	r24, Y+3	; 0x03
    3728:	9c 81       	ldd	r25, Y+4	; 0x04
    372a:	01 97       	sbiw	r24, 0x01	; 1
    372c:	f1 f7       	brne	.-4      	; 0x372a <main+0x4ee>
    372e:	9c 83       	std	Y+4, r25	; 0x04
    3730:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3732:	8d 81       	ldd	r24, Y+5	; 0x05
    3734:	9e 81       	ldd	r25, Y+6	; 0x06
    3736:	01 97       	sbiw	r24, 0x01	; 1
    3738:	9e 83       	std	Y+6, r25	; 0x06
    373a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    373c:	8d 81       	ldd	r24, Y+5	; 0x05
    373e:	9e 81       	ldd	r25, Y+6	; 0x06
    3740:	00 97       	sbiw	r24, 0x00	; 0
    3742:	69 f7       	brne	.-38     	; 0x371e <main+0x4e2>
    3744:	a0 ce       	rjmp	.-704    	; 0x3486 <main+0x24a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3746:	6f 81       	ldd	r22, Y+7	; 0x07
    3748:	78 85       	ldd	r23, Y+8	; 0x08
    374a:	89 85       	ldd	r24, Y+9	; 0x09
    374c:	9a 85       	ldd	r25, Y+10	; 0x0a
    374e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3752:	dc 01       	movw	r26, r24
    3754:	cb 01       	movw	r24, r22
    3756:	9e 83       	std	Y+6, r25	; 0x06
    3758:	8d 83       	std	Y+5, r24	; 0x05
    375a:	8d 81       	ldd	r24, Y+5	; 0x05
    375c:	9e 81       	ldd	r25, Y+6	; 0x06
    375e:	9a 83       	std	Y+2, r25	; 0x02
    3760:	89 83       	std	Y+1, r24	; 0x01
    3762:	89 81       	ldd	r24, Y+1	; 0x01
    3764:	9a 81       	ldd	r25, Y+2	; 0x02
    3766:	01 97       	sbiw	r24, 0x01	; 1
    3768:	f1 f7       	brne	.-4      	; 0x3766 <main+0x52a>
    376a:	9a 83       	std	Y+2, r25	; 0x02
    376c:	89 83       	std	Y+1, r24	; 0x01
    376e:	8b ce       	rjmp	.-746    	; 0x3486 <main+0x24a>

			}
		} else {
			/**The user doesn't have the password*/

			APP_alarmTurnOn();
    3770:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <APP_alarmTurnOn>
    3774:	88 ce       	rjmp	.-752    	; 0x3486 <main+0x24a>

00003776 <UART_init>:
 */

#include "uart.h"
 
void UART_init(void)
{
    3776:	df 93       	push	r29
    3778:	cf 93       	push	r28
    377a:	cd b7       	in	r28, 0x3d	; 61
    377c:	de b7       	in	r29, 0x3e	; 62
	UCSRA = (1<<U2X); /* U2X = 1 for double transmission speed */
    377e:	eb e2       	ldi	r30, 0x2B	; 43
    3780:	f0 e0       	ldi	r31, 0x00	; 0
    3782:	82 e0       	ldi	r24, 0x02	; 2
    3784:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3786:	ea e2       	ldi	r30, 0x2A	; 42
    3788:	f0 e0       	ldi	r31, 0x00	; 0
    378a:	88 e1       	ldi	r24, 0x18	; 24
    378c:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    378e:	e0 e4       	ldi	r30, 0x40	; 64
    3790:	f0 e0       	ldi	r31, 0x00	; 0
    3792:	86 e8       	ldi	r24, 0x86	; 134
    3794:	80 83       	st	Z, r24
	
	/* baud rate=9600 & Fosc=1MHz -->  UBBR=( Fosc / (8 * baud rate) ) - 1 = 12 */  
	UBRRH = 0;
    3796:	e0 e4       	ldi	r30, 0x40	; 64
    3798:	f0 e0       	ldi	r31, 0x00	; 0
    379a:	10 82       	st	Z, r1
	UBRRL = 103;
    379c:	e9 e2       	ldi	r30, 0x29	; 41
    379e:	f0 e0       	ldi	r31, 0x00	; 0
    37a0:	87 e6       	ldi	r24, 0x67	; 103
    37a2:	80 83       	st	Z, r24
}
    37a4:	cf 91       	pop	r28
    37a6:	df 91       	pop	r29
    37a8:	08 95       	ret

000037aa <UART_sendByte>:
	
void UART_sendByte(const uint8 data)
{
    37aa:	df 93       	push	r29
    37ac:	cf 93       	push	r28
    37ae:	0f 92       	push	r0
    37b0:	cd b7       	in	r28, 0x3d	; 61
    37b2:	de b7       	in	r29, 0x3e	; 62
    37b4:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    37b6:	eb e2       	ldi	r30, 0x2B	; 43
    37b8:	f0 e0       	ldi	r31, 0x00	; 0
    37ba:	80 81       	ld	r24, Z
    37bc:	88 2f       	mov	r24, r24
    37be:	90 e0       	ldi	r25, 0x00	; 0
    37c0:	80 72       	andi	r24, 0x20	; 32
    37c2:	90 70       	andi	r25, 0x00	; 0
    37c4:	00 97       	sbiw	r24, 0x00	; 0
    37c6:	b9 f3       	breq	.-18     	; 0x37b6 <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
    37c8:	ec e2       	ldi	r30, 0x2C	; 44
    37ca:	f0 e0       	ldi	r31, 0x00	; 0
    37cc:	89 81       	ldd	r24, Y+1	; 0x01
    37ce:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
    37d0:	0f 90       	pop	r0
    37d2:	cf 91       	pop	r28
    37d4:	df 91       	pop	r29
    37d6:	08 95       	ret

000037d8 <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    37d8:	df 93       	push	r29
    37da:	cf 93       	push	r28
    37dc:	cd b7       	in	r28, 0x3d	; 61
    37de:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    37e0:	eb e2       	ldi	r30, 0x2B	; 43
    37e2:	f0 e0       	ldi	r31, 0x00	; 0
    37e4:	80 81       	ld	r24, Z
    37e6:	88 23       	and	r24, r24
    37e8:	dc f7       	brge	.-10     	; 0x37e0 <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    37ea:	ec e2       	ldi	r30, 0x2C	; 44
    37ec:	f0 e0       	ldi	r31, 0x00	; 0
    37ee:	80 81       	ld	r24, Z
}
    37f0:	cf 91       	pop	r28
    37f2:	df 91       	pop	r29
    37f4:	08 95       	ret

000037f6 <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    37f6:	df 93       	push	r29
    37f8:	cf 93       	push	r28
    37fa:	00 d0       	rcall	.+0      	; 0x37fc <UART_sendString+0x6>
    37fc:	0f 92       	push	r0
    37fe:	cd b7       	in	r28, 0x3d	; 61
    3800:	de b7       	in	r29, 0x3e	; 62
    3802:	9b 83       	std	Y+3, r25	; 0x03
    3804:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3806:	19 82       	std	Y+1, r1	; 0x01
    3808:	0e c0       	rjmp	.+28     	; 0x3826 <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    380a:	89 81       	ldd	r24, Y+1	; 0x01
    380c:	28 2f       	mov	r18, r24
    380e:	30 e0       	ldi	r19, 0x00	; 0
    3810:	8a 81       	ldd	r24, Y+2	; 0x02
    3812:	9b 81       	ldd	r25, Y+3	; 0x03
    3814:	fc 01       	movw	r30, r24
    3816:	e2 0f       	add	r30, r18
    3818:	f3 1f       	adc	r31, r19
    381a:	80 81       	ld	r24, Z
    381c:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <UART_sendByte>
		i++;
    3820:	89 81       	ldd	r24, Y+1	; 0x01
    3822:	8f 5f       	subi	r24, 0xFF	; 255
    3824:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3826:	89 81       	ldd	r24, Y+1	; 0x01
    3828:	28 2f       	mov	r18, r24
    382a:	30 e0       	ldi	r19, 0x00	; 0
    382c:	8a 81       	ldd	r24, Y+2	; 0x02
    382e:	9b 81       	ldd	r25, Y+3	; 0x03
    3830:	fc 01       	movw	r30, r24
    3832:	e2 0f       	add	r30, r18
    3834:	f3 1f       	adc	r31, r19
    3836:	80 81       	ld	r24, Z
    3838:	88 23       	and	r24, r24
    383a:	39 f7       	brne	.-50     	; 0x380a <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
	UART_sendByte(Str[i]);
    383c:	89 81       	ldd	r24, Y+1	; 0x01
    383e:	28 2f       	mov	r18, r24
    3840:	30 e0       	ldi	r19, 0x00	; 0
    3842:	8a 81       	ldd	r24, Y+2	; 0x02
    3844:	9b 81       	ldd	r25, Y+3	; 0x03
    3846:	fc 01       	movw	r30, r24
    3848:	e2 0f       	add	r30, r18
    384a:	f3 1f       	adc	r31, r19
    384c:	80 81       	ld	r24, Z
    384e:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <UART_sendByte>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    3852:	0f 90       	pop	r0
    3854:	0f 90       	pop	r0
    3856:	0f 90       	pop	r0
    3858:	cf 91       	pop	r28
    385a:	df 91       	pop	r29
    385c:	08 95       	ret

0000385e <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    385e:	0f 93       	push	r16
    3860:	1f 93       	push	r17
    3862:	df 93       	push	r29
    3864:	cf 93       	push	r28
    3866:	00 d0       	rcall	.+0      	; 0x3868 <UART_receiveString+0xa>
    3868:	0f 92       	push	r0
    386a:	cd b7       	in	r28, 0x3d	; 61
    386c:	de b7       	in	r29, 0x3e	; 62
    386e:	9b 83       	std	Y+3, r25	; 0x03
    3870:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3872:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    3874:	89 81       	ldd	r24, Y+1	; 0x01
    3876:	28 2f       	mov	r18, r24
    3878:	30 e0       	ldi	r19, 0x00	; 0
    387a:	8a 81       	ldd	r24, Y+2	; 0x02
    387c:	9b 81       	ldd	r25, Y+3	; 0x03
    387e:	8c 01       	movw	r16, r24
    3880:	02 0f       	add	r16, r18
    3882:	13 1f       	adc	r17, r19
    3884:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <UART_recieveByte>
    3888:	f8 01       	movw	r30, r16
    388a:	80 83       	st	Z, r24
    388c:	0f c0       	rjmp	.+30     	; 0x38ac <UART_receiveString+0x4e>
	while(Str[i] != '\0')
	{
		i++;
    388e:	89 81       	ldd	r24, Y+1	; 0x01
    3890:	8f 5f       	subi	r24, 0xFF	; 255
    3892:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3894:	89 81       	ldd	r24, Y+1	; 0x01
    3896:	28 2f       	mov	r18, r24
    3898:	30 e0       	ldi	r19, 0x00	; 0
    389a:	8a 81       	ldd	r24, Y+2	; 0x02
    389c:	9b 81       	ldd	r25, Y+3	; 0x03
    389e:	8c 01       	movw	r16, r24
    38a0:	02 0f       	add	r16, r18
    38a2:	13 1f       	adc	r17, r19
    38a4:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <UART_recieveByte>
    38a8:	f8 01       	movw	r30, r16
    38aa:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '\0')
    38ac:	89 81       	ldd	r24, Y+1	; 0x01
    38ae:	28 2f       	mov	r18, r24
    38b0:	30 e0       	ldi	r19, 0x00	; 0
    38b2:	8a 81       	ldd	r24, Y+2	; 0x02
    38b4:	9b 81       	ldd	r25, Y+3	; 0x03
    38b6:	fc 01       	movw	r30, r24
    38b8:	e2 0f       	add	r30, r18
    38ba:	f3 1f       	adc	r31, r19
    38bc:	80 81       	ld	r24, Z
    38be:	88 23       	and	r24, r24
    38c0:	31 f7       	brne	.-52     	; 0x388e <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    38c2:	89 81       	ldd	r24, Y+1	; 0x01
    38c4:	28 2f       	mov	r18, r24
    38c6:	30 e0       	ldi	r19, 0x00	; 0
    38c8:	8a 81       	ldd	r24, Y+2	; 0x02
    38ca:	9b 81       	ldd	r25, Y+3	; 0x03
    38cc:	fc 01       	movw	r30, r24
    38ce:	e2 0f       	add	r30, r18
    38d0:	f3 1f       	adc	r31, r19
    38d2:	10 82       	st	Z, r1
}
    38d4:	0f 90       	pop	r0
    38d6:	0f 90       	pop	r0
    38d8:	0f 90       	pop	r0
    38da:	cf 91       	pop	r28
    38dc:	df 91       	pop	r29
    38de:	1f 91       	pop	r17
    38e0:	0f 91       	pop	r16
    38e2:	08 95       	ret

000038e4 <__prologue_saves__>:
    38e4:	2f 92       	push	r2
    38e6:	3f 92       	push	r3
    38e8:	4f 92       	push	r4
    38ea:	5f 92       	push	r5
    38ec:	6f 92       	push	r6
    38ee:	7f 92       	push	r7
    38f0:	8f 92       	push	r8
    38f2:	9f 92       	push	r9
    38f4:	af 92       	push	r10
    38f6:	bf 92       	push	r11
    38f8:	cf 92       	push	r12
    38fa:	df 92       	push	r13
    38fc:	ef 92       	push	r14
    38fe:	ff 92       	push	r15
    3900:	0f 93       	push	r16
    3902:	1f 93       	push	r17
    3904:	cf 93       	push	r28
    3906:	df 93       	push	r29
    3908:	cd b7       	in	r28, 0x3d	; 61
    390a:	de b7       	in	r29, 0x3e	; 62
    390c:	ca 1b       	sub	r28, r26
    390e:	db 0b       	sbc	r29, r27
    3910:	0f b6       	in	r0, 0x3f	; 63
    3912:	f8 94       	cli
    3914:	de bf       	out	0x3e, r29	; 62
    3916:	0f be       	out	0x3f, r0	; 63
    3918:	cd bf       	out	0x3d, r28	; 61
    391a:	09 94       	ijmp

0000391c <__epilogue_restores__>:
    391c:	2a 88       	ldd	r2, Y+18	; 0x12
    391e:	39 88       	ldd	r3, Y+17	; 0x11
    3920:	48 88       	ldd	r4, Y+16	; 0x10
    3922:	5f 84       	ldd	r5, Y+15	; 0x0f
    3924:	6e 84       	ldd	r6, Y+14	; 0x0e
    3926:	7d 84       	ldd	r7, Y+13	; 0x0d
    3928:	8c 84       	ldd	r8, Y+12	; 0x0c
    392a:	9b 84       	ldd	r9, Y+11	; 0x0b
    392c:	aa 84       	ldd	r10, Y+10	; 0x0a
    392e:	b9 84       	ldd	r11, Y+9	; 0x09
    3930:	c8 84       	ldd	r12, Y+8	; 0x08
    3932:	df 80       	ldd	r13, Y+7	; 0x07
    3934:	ee 80       	ldd	r14, Y+6	; 0x06
    3936:	fd 80       	ldd	r15, Y+5	; 0x05
    3938:	0c 81       	ldd	r16, Y+4	; 0x04
    393a:	1b 81       	ldd	r17, Y+3	; 0x03
    393c:	aa 81       	ldd	r26, Y+2	; 0x02
    393e:	b9 81       	ldd	r27, Y+1	; 0x01
    3940:	ce 0f       	add	r28, r30
    3942:	d1 1d       	adc	r29, r1
    3944:	0f b6       	in	r0, 0x3f	; 63
    3946:	f8 94       	cli
    3948:	de bf       	out	0x3e, r29	; 62
    394a:	0f be       	out	0x3f, r0	; 63
    394c:	cd bf       	out	0x3d, r28	; 61
    394e:	ed 01       	movw	r28, r26
    3950:	08 95       	ret

00003952 <itoa>:
    3952:	fb 01       	movw	r30, r22
    3954:	9f 01       	movw	r18, r30
    3956:	e8 94       	clt
    3958:	42 30       	cpi	r20, 0x02	; 2
    395a:	c4 f0       	brlt	.+48     	; 0x398c <itoa+0x3a>
    395c:	45 32       	cpi	r20, 0x25	; 37
    395e:	b4 f4       	brge	.+44     	; 0x398c <itoa+0x3a>
    3960:	4a 30       	cpi	r20, 0x0A	; 10
    3962:	29 f4       	brne	.+10     	; 0x396e <itoa+0x1c>
    3964:	97 fb       	bst	r25, 7
    3966:	1e f4       	brtc	.+6      	; 0x396e <itoa+0x1c>
    3968:	90 95       	com	r25
    396a:	81 95       	neg	r24
    396c:	9f 4f       	sbci	r25, 0xFF	; 255
    396e:	64 2f       	mov	r22, r20
    3970:	77 27       	eor	r23, r23
    3972:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <__udivmodhi4>
    3976:	80 5d       	subi	r24, 0xD0	; 208
    3978:	8a 33       	cpi	r24, 0x3A	; 58
    397a:	0c f0       	brlt	.+2      	; 0x397e <itoa+0x2c>
    397c:	89 5d       	subi	r24, 0xD9	; 217
    397e:	81 93       	st	Z+, r24
    3980:	cb 01       	movw	r24, r22
    3982:	00 97       	sbiw	r24, 0x00	; 0
    3984:	a1 f7       	brne	.-24     	; 0x396e <itoa+0x1c>
    3986:	16 f4       	brtc	.+4      	; 0x398c <itoa+0x3a>
    3988:	5d e2       	ldi	r21, 0x2D	; 45
    398a:	51 93       	st	Z+, r21
    398c:	10 82       	st	Z, r1
    398e:	c9 01       	movw	r24, r18
    3990:	0c 94 ca 1c 	jmp	0x3994	; 0x3994 <strrev>

00003994 <strrev>:
    3994:	dc 01       	movw	r26, r24
    3996:	fc 01       	movw	r30, r24
    3998:	67 2f       	mov	r22, r23
    399a:	71 91       	ld	r23, Z+
    399c:	77 23       	and	r23, r23
    399e:	e1 f7       	brne	.-8      	; 0x3998 <strrev+0x4>
    39a0:	32 97       	sbiw	r30, 0x02	; 2
    39a2:	04 c0       	rjmp	.+8      	; 0x39ac <strrev+0x18>
    39a4:	7c 91       	ld	r23, X
    39a6:	6d 93       	st	X+, r22
    39a8:	70 83       	st	Z, r23
    39aa:	62 91       	ld	r22, -Z
    39ac:	ae 17       	cp	r26, r30
    39ae:	bf 07       	cpc	r27, r31
    39b0:	c8 f3       	brcs	.-14     	; 0x39a4 <strrev+0x10>
    39b2:	08 95       	ret

000039b4 <__udivmodhi4>:
    39b4:	aa 1b       	sub	r26, r26
    39b6:	bb 1b       	sub	r27, r27
    39b8:	51 e1       	ldi	r21, 0x11	; 17
    39ba:	07 c0       	rjmp	.+14     	; 0x39ca <__udivmodhi4_ep>

000039bc <__udivmodhi4_loop>:
    39bc:	aa 1f       	adc	r26, r26
    39be:	bb 1f       	adc	r27, r27
    39c0:	a6 17       	cp	r26, r22
    39c2:	b7 07       	cpc	r27, r23
    39c4:	10 f0       	brcs	.+4      	; 0x39ca <__udivmodhi4_ep>
    39c6:	a6 1b       	sub	r26, r22
    39c8:	b7 0b       	sbc	r27, r23

000039ca <__udivmodhi4_ep>:
    39ca:	88 1f       	adc	r24, r24
    39cc:	99 1f       	adc	r25, r25
    39ce:	5a 95       	dec	r21
    39d0:	a9 f7       	brne	.-22     	; 0x39bc <__udivmodhi4_loop>
    39d2:	80 95       	com	r24
    39d4:	90 95       	com	r25
    39d6:	bc 01       	movw	r22, r24
    39d8:	cd 01       	movw	r24, r26
    39da:	08 95       	ret

000039dc <_exit>:
    39dc:	f8 94       	cli

000039de <__stop_program>:
    39de:	ff cf       	rjmp	.-2      	; 0x39de <__stop_program>
