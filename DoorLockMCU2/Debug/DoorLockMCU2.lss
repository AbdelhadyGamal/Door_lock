
DoorLockMCU2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f16  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000014c  00800060  00002f16  00002f8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002da8  00000000  00000000  000030d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d9d  00000000  00000000  00005e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00006c1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00006d5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00006ecd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00008b16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00009a01  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000a7b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000a910  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000ab9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b36b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e1       	ldi	r30, 0x16	; 22
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3a       	cpi	r26, 0xAC	; 172
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <main>
      7a:	0c 94 89 17 	jmp	0x2f12	; 0x2f12 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 0d 17 	jmp	0x2e1a	; 0x2e1a <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a3 ea       	ldi	r26, 0xA3	; 163
     118:	b1 e0       	ldi	r27, 0x01	; 1
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 29 17 	jmp	0x2e52	; 0x2e52 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 19 17 	jmp	0x2e32	; 0x2e32 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 35 17 	jmp	0x2e6a	; 0x2e6a <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 19 17 	jmp	0x2e32	; 0x2e32 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 35 17 	jmp	0x2e6a	; 0x2e6a <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 0d 17 	jmp	0x2e1a	; 0x2e1a <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	83 ea       	ldi	r24, 0xA3	; 163
     486:	91 e0       	ldi	r25, 0x01	; 1
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 29 17 	jmp	0x2e52	; 0x2e52 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 19 17 	jmp	0x2e32	; 0x2e32 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 35 17 	jmp	0x2e6a	; 0x2e6a <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 19 17 	jmp	0x2e32	; 0x2e32 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 35 17 	jmp	0x2e6a	; 0x2e6a <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 19 17 	jmp	0x2e32	; 0x2e32 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 35 17 	jmp	0x2e6a	; 0x2e6a <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 1d 17 	jmp	0x2e3a	; 0x2e3a <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 39 17 	jmp	0x2e72	; 0x2e72 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__pack_f+0x178>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__pack_f+0x172>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__pack_f+0x17c>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__pack_f+0x114>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__pack_f+0x76>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__pack_f+0xca>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__pack_f+0x86>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__pack_f+0x7e>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__pack_f+0x9c>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__pack_f+0x94>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__pack_f+0xbe>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__pack_f+0xee>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__pack_f+0xf6>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__pack_f+0xf6>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__pack_f+0x10e>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__pack_f+0x162>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__pack_f+0x172>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__pack_f+0x144>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__pack_f+0x154>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__pack_f+0x14c>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__pack_f+0x162>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__pack_f+0x164>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__pack_f+0x17c>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <KeyPad_getPressedKey>:
 *  Author: Mohamed Tarek
 */

#include "keypad.h"

uint8 KeyPad_getPressedKey(void){
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <KeyPad_getPressedKey+0x6>
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;

	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
     b40:	1a 82       	std	Y+2, r1	; 0x02
     b42:	4d c0       	rjmp	.+154    	; 0xbde <KeyPad_getPressedKey+0xa8>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
     b44:	ea e3       	ldi	r30, 0x3A	; 58
     b46:	f0 e0       	ldi	r31, 0x00	; 0
     b48:	8a 81       	ldd	r24, Y+2	; 0x02
     b4a:	28 2f       	mov	r18, r24
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	80 e1       	ldi	r24, 0x10	; 16
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	02 c0       	rjmp	.+4      	; 0xb58 <KeyPad_getPressedKey+0x22>
     b54:	88 0f       	add	r24, r24
     b56:	99 1f       	adc	r25, r25
     b58:	2a 95       	dec	r18
     b5a:	e2 f7       	brpl	.-8      	; 0xb54 <KeyPad_getPressedKey+0x1e>
     b5c:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
     b5e:	eb e3       	ldi	r30, 0x3B	; 59
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	8a 81       	ldd	r24, Y+2	; 0x02
     b64:	28 2f       	mov	r18, r24
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	80 e1       	ldi	r24, 0x10	; 16
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	02 2e       	mov	r0, r18
     b6e:	02 c0       	rjmp	.+4      	; 0xb74 <KeyPad_getPressedKey+0x3e>
     b70:	88 0f       	add	r24, r24
     b72:	99 1f       	adc	r25, r25
     b74:	0a 94       	dec	r0
     b76:	e2 f7       	brpl	.-8      	; 0xb70 <KeyPad_getPressedKey+0x3a>
     b78:	80 95       	com	r24
     b7a:	80 83       	st	Z, r24
			for(row=0;row<N_row;row++) /* loop for rows */
     b7c:	19 82       	std	Y+1, r1	; 0x01
     b7e:	29 c0       	rjmp	.+82     	; 0xbd2 <KeyPad_getPressedKey+0x9c>
			{
				if(!(KEYPAD_PORT_IN & (1<<row))) /* if the switch is press in this row */ 
     b80:	e9 e3       	ldi	r30, 0x39	; 57
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	80 81       	ld	r24, Z
     b86:	28 2f       	mov	r18, r24
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	89 81       	ldd	r24, Y+1	; 0x01
     b8c:	88 2f       	mov	r24, r24
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	a9 01       	movw	r20, r18
     b92:	02 c0       	rjmp	.+4      	; 0xb98 <KeyPad_getPressedKey+0x62>
     b94:	55 95       	asr	r21
     b96:	47 95       	ror	r20
     b98:	8a 95       	dec	r24
     b9a:	e2 f7       	brpl	.-8      	; 0xb94 <KeyPad_getPressedKey+0x5e>
     b9c:	ca 01       	movw	r24, r20
     b9e:	81 70       	andi	r24, 0x01	; 1
     ba0:	90 70       	andi	r25, 0x00	; 0
     ba2:	00 97       	sbiw	r24, 0x00	; 0
     ba4:	99 f4       	brne	.+38     	; 0xbcc <KeyPad_getPressedKey+0x96>
				{
					#if (N_col == 3)  
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1); 
     ba6:	89 81       	ldd	r24, Y+1	; 0x01
     ba8:	28 2f       	mov	r18, r24
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	c9 01       	movw	r24, r18
     bae:	88 0f       	add	r24, r24
     bb0:	99 1f       	adc	r25, r25
     bb2:	82 0f       	add	r24, r18
     bb4:	93 1f       	adc	r25, r19
     bb6:	98 2f       	mov	r25, r24
     bb8:	8a 81       	ldd	r24, Y+2	; 0x02
     bba:	89 0f       	add	r24, r25
     bbc:	8f 5f       	subi	r24, 0xFF	; 255
     bbe:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <KeyPad_4x3_adjustKeyNumber>
					#endif				
				}
			}
		}
	}	
}
     bc2:	0f 90       	pop	r0
     bc4:	0f 90       	pop	r0
     bc6:	cf 91       	pop	r28
     bc8:	df 91       	pop	r29
     bca:	08 95       	ret
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
			for(row=0;row<N_row;row++) /* loop for rows */
     bcc:	89 81       	ldd	r24, Y+1	; 0x01
     bce:	8f 5f       	subi	r24, 0xFF	; 255
     bd0:	89 83       	std	Y+1, r24	; 0x01
     bd2:	89 81       	ldd	r24, Y+1	; 0x01
     bd4:	84 30       	cpi	r24, 0x04	; 4
     bd6:	a0 f2       	brcs	.-88     	; 0xb80 <KeyPad_getPressedKey+0x4a>
uint8 KeyPad_getPressedKey(void){
	uint8 col,row;

	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
     bd8:	8a 81       	ldd	r24, Y+2	; 0x02
     bda:	8f 5f       	subi	r24, 0xFF	; 255
     bdc:	8a 83       	std	Y+2, r24	; 0x02
     bde:	8a 81       	ldd	r24, Y+2	; 0x02
     be0:	83 30       	cpi	r24, 0x03	; 3
     be2:	08 f4       	brcc	.+2      	; 0xbe6 <KeyPad_getPressedKey+0xb0>
     be4:	af cf       	rjmp	.-162    	; 0xb44 <KeyPad_getPressedKey+0xe>
     be6:	ac cf       	rjmp	.-168    	; 0xb40 <KeyPad_getPressedKey+0xa>

00000be8 <KeyPad_4x3_adjustKeyNumber>:
}

#if (N_col == 3) 

uint8 KeyPad_4x3_adjustKeyNumber(uint8 button_number)
{
     be8:	df 93       	push	r29
     bea:	cf 93       	push	r28
     bec:	00 d0       	rcall	.+0      	; 0xbee <KeyPad_4x3_adjustKeyNumber+0x6>
     bee:	00 d0       	rcall	.+0      	; 0xbf0 <KeyPad_4x3_adjustKeyNumber+0x8>
     bf0:	cd b7       	in	r28, 0x3d	; 61
     bf2:	de b7       	in	r29, 0x3e	; 62
     bf4:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
     bf6:	89 81       	ldd	r24, Y+1	; 0x01
     bf8:	28 2f       	mov	r18, r24
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	3c 83       	std	Y+4, r19	; 0x04
     bfe:	2b 83       	std	Y+3, r18	; 0x03
     c00:	8b 81       	ldd	r24, Y+3	; 0x03
     c02:	9c 81       	ldd	r25, Y+4	; 0x04
     c04:	8a 30       	cpi	r24, 0x0A	; 10
     c06:	91 05       	cpc	r25, r1
     c08:	81 f0       	breq	.+32     	; 0xc2a <KeyPad_4x3_adjustKeyNumber+0x42>
     c0a:	2b 81       	ldd	r18, Y+3	; 0x03
     c0c:	3c 81       	ldd	r19, Y+4	; 0x04
     c0e:	2a 30       	cpi	r18, 0x0A	; 10
     c10:	31 05       	cpc	r19, r1
     c12:	9c f0       	brlt	.+38     	; 0xc3a <KeyPad_4x3_adjustKeyNumber+0x52>
     c14:	8b 81       	ldd	r24, Y+3	; 0x03
     c16:	9c 81       	ldd	r25, Y+4	; 0x04
     c18:	8b 30       	cpi	r24, 0x0B	; 11
     c1a:	91 05       	cpc	r25, r1
     c1c:	49 f0       	breq	.+18     	; 0xc30 <KeyPad_4x3_adjustKeyNumber+0x48>
     c1e:	2b 81       	ldd	r18, Y+3	; 0x03
     c20:	3c 81       	ldd	r19, Y+4	; 0x04
     c22:	2c 30       	cpi	r18, 0x0C	; 12
     c24:	31 05       	cpc	r19, r1
     c26:	31 f0       	breq	.+12     	; 0xc34 <KeyPad_4x3_adjustKeyNumber+0x4c>
     c28:	08 c0       	rjmp	.+16     	; 0xc3a <KeyPad_4x3_adjustKeyNumber+0x52>
	{
		case 10: return '*'; // ASCII Code of =
     c2a:	3a e2       	ldi	r19, 0x2A	; 42
     c2c:	3a 83       	std	Y+2, r19	; 0x02
     c2e:	07 c0       	rjmp	.+14     	; 0xc3e <KeyPad_4x3_adjustKeyNumber+0x56>
				 break;
		case 11: return 0;
     c30:	1a 82       	std	Y+2, r1	; 0x02
     c32:	05 c0       	rjmp	.+10     	; 0xc3e <KeyPad_4x3_adjustKeyNumber+0x56>
				 break;		
		case 12: return '#'; // ASCII Code of +
     c34:	83 e2       	ldi	r24, 0x23	; 35
     c36:	8a 83       	std	Y+2, r24	; 0x02
     c38:	02 c0       	rjmp	.+4      	; 0xc3e <KeyPad_4x3_adjustKeyNumber+0x56>
				 break;
		default: return button_number;								 						
     c3a:	99 81       	ldd	r25, Y+1	; 0x01
     c3c:	9a 83       	std	Y+2, r25	; 0x02
     c3e:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
     c40:	0f 90       	pop	r0
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0
     c46:	0f 90       	pop	r0
     c48:	cf 91       	pop	r28
     c4a:	df 91       	pop	r29
     c4c:	08 95       	ret

00000c4e <APP_pwmTimer0Init>:
 [Description] :This function is responsible of setting the password for the first time and
 storing it in the memory by asking the user to Enter New password Of 8 bit and confirm it

 [Returns] :void
 ---------------------------------------------------------------------------------------------------------------*/
void APP_pwmTimer0Init(unsigned char set_duty_cycle) {
     c4e:	df 93       	push	r29
     c50:	cf 93       	push	r28
     c52:	0f 92       	push	r0
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
     c58:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0; //initial timer value
     c5a:	e2 e5       	ldi	r30, 0x52	; 82
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	10 82       	st	Z, r1

	OCR0 = set_duty_cycle;
     c60:	ec e5       	ldi	r30, 0x5C	; 92
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	89 81       	ldd	r24, Y+1	; 0x01
     c66:	80 83       	st	Z, r24

	DDRB = DDRB | (1 << PB3); //set OC0 as output pin --> pin where the PWM signal is generated from MC.
     c68:	a7 e3       	ldi	r26, 0x37	; 55
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
     c6c:	e7 e3       	ldi	r30, 0x37	; 55
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	88 60       	ori	r24, 0x08	; 8
     c74:	8c 93       	st	X, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1 << WGM00) | (1 << WGM01) | (1 << COM01) | (1 << CS01);
     c76:	e3 e5       	ldi	r30, 0x53	; 83
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	8a e6       	ldi	r24, 0x6A	; 106
     c7c:	80 83       	st	Z, r24
	SET_BIT(DDRB, PB1);
     c7e:	a7 e3       	ldi	r26, 0x37	; 55
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	e7 e3       	ldi	r30, 0x37	; 55
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
     c88:	82 60       	ori	r24, 0x02	; 2
     c8a:	8c 93       	st	X, r24
	SET_BIT(DDRB, PB2);
     c8c:	a7 e3       	ldi	r26, 0x37	; 55
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e7 e3       	ldi	r30, 0x37	; 55
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	84 60       	ori	r24, 0x04	; 4
     c98:	8c 93       	st	X, r24
}
     c9a:	0f 90       	pop	r0
     c9c:	cf 91       	pop	r28
     c9e:	df 91       	pop	r29
     ca0:	08 95       	ret

00000ca2 <APP_twoArrayMatch>:
 As an output Arg, this Argshall indicate a_functionArgDescription4
 [Returns] :void

 ---------------------------------------------------------------------------------------------------------------*/

uint8 APP_twoArrayMatch(uint8 *pass1, uint8 *pass2) {
     ca2:	df 93       	push	r29
     ca4:	cf 93       	push	r28
     ca6:	00 d0       	rcall	.+0      	; 0xca8 <APP_twoArrayMatch+0x6>
     ca8:	00 d0       	rcall	.+0      	; 0xcaa <APP_twoArrayMatch+0x8>
     caa:	00 d0       	rcall	.+0      	; 0xcac <APP_twoArrayMatch+0xa>
     cac:	cd b7       	in	r28, 0x3d	; 61
     cae:	de b7       	in	r29, 0x3e	; 62
     cb0:	9c 83       	std	Y+4, r25	; 0x04
     cb2:	8b 83       	std	Y+3, r24	; 0x03
     cb4:	7e 83       	std	Y+6, r23	; 0x06
     cb6:	6d 83       	std	Y+5, r22	; 0x05
	uint8 result = 1;
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	8a 83       	std	Y+2, r24	; 0x02
	for (uint8 Loop_counter = 0; Loop_counter < 8; Loop_counter++) {
     cbc:	19 82       	std	Y+1, r1	; 0x01
     cbe:	18 c0       	rjmp	.+48     	; 0xcf0 <APP_twoArrayMatch+0x4e>
		if (*(pass1 + Loop_counter) != *(pass2 + Loop_counter)) {
     cc0:	89 81       	ldd	r24, Y+1	; 0x01
     cc2:	28 2f       	mov	r18, r24
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	8b 81       	ldd	r24, Y+3	; 0x03
     cc8:	9c 81       	ldd	r25, Y+4	; 0x04
     cca:	fc 01       	movw	r30, r24
     ccc:	e2 0f       	add	r30, r18
     cce:	f3 1f       	adc	r31, r19
     cd0:	40 81       	ld	r20, Z
     cd2:	89 81       	ldd	r24, Y+1	; 0x01
     cd4:	28 2f       	mov	r18, r24
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	8d 81       	ldd	r24, Y+5	; 0x05
     cda:	9e 81       	ldd	r25, Y+6	; 0x06
     cdc:	fc 01       	movw	r30, r24
     cde:	e2 0f       	add	r30, r18
     ce0:	f3 1f       	adc	r31, r19
     ce2:	80 81       	ld	r24, Z
     ce4:	48 17       	cp	r20, r24
     ce6:	09 f0       	breq	.+2      	; 0xcea <APP_twoArrayMatch+0x48>

			result = 0;
     ce8:	1a 82       	std	Y+2, r1	; 0x02

 ---------------------------------------------------------------------------------------------------------------*/

uint8 APP_twoArrayMatch(uint8 *pass1, uint8 *pass2) {
	uint8 result = 1;
	for (uint8 Loop_counter = 0; Loop_counter < 8; Loop_counter++) {
     cea:	89 81       	ldd	r24, Y+1	; 0x01
     cec:	8f 5f       	subi	r24, 0xFF	; 255
     cee:	89 83       	std	Y+1, r24	; 0x01
     cf0:	89 81       	ldd	r24, Y+1	; 0x01
     cf2:	88 30       	cpi	r24, 0x08	; 8
     cf4:	28 f3       	brcs	.-54     	; 0xcc0 <APP_twoArrayMatch+0x1e>

			result = 0;
		}

	}
	return result;
     cf6:	8a 81       	ldd	r24, Y+2	; 0x02
}
     cf8:	26 96       	adiw	r28, 0x06	; 6
     cfa:	0f b6       	in	r0, 0x3f	; 63
     cfc:	f8 94       	cli
     cfe:	de bf       	out	0x3e, r29	; 62
     d00:	0f be       	out	0x3f, r0	; 63
     d02:	cd bf       	out	0x3d, r28	; 61
     d04:	cf 91       	pop	r28
     d06:	df 91       	pop	r29
     d08:	08 95       	ret

00000d0a <APP_storePassword>:

void APP_storePassword() {
     d0a:	df 93       	push	r29
     d0c:	cf 93       	push	r28
     d0e:	cd b7       	in	r28, 0x3d	; 61
     d10:	de b7       	in	r29, 0x3e	; 62
     d12:	a4 97       	sbiw	r28, 0x24	; 36
     d14:	0f b6       	in	r0, 0x3f	; 63
     d16:	f8 94       	cli
     d18:	de bf       	out	0x3e, r29	; 62
     d1a:	0f be       	out	0x3f, r0	; 63
     d1c:	cd bf       	out	0x3d, r28	; 61
	/**
	 * this for loop is to loop the 8 char of the password to be stored in the
	 */

	uint8 ArrPtr[20];
	UART_sendByte(1);
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <UART_sendByte>
	UART_receiveString(ArrPtr);
     d24:	ce 01       	movw	r24, r28
     d26:	41 96       	adiw	r24, 0x11	; 17
     d28:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <UART_receiveString>
	uint8 Loop_counter = 0;
     d2c:	18 8a       	std	Y+16, r1	; 0x10

	for (uint8 Loop_counter = 0; Loop_counter < 8; Loop_counter++) {
     d2e:	1f 86       	std	Y+15, r1	; 0x0f
     d30:	8d c0       	rjmp	.+282    	; 0xe4c <APP_storePassword+0x142>

		EEPROM_Write_Byte(PASSWORD_LOCATION + Loop_counter,
     d32:	8f 85       	ldd	r24, Y+15	; 0x0f
     d34:	88 2f       	mov	r24, r24
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	8f 5e       	subi	r24, 0xEF	; 239
     d3a:	9c 4f       	sbci	r25, 0xFC	; 252
     d3c:	ac 01       	movw	r20, r24
     d3e:	8f 85       	ldd	r24, Y+15	; 0x0f
     d40:	88 2f       	mov	r24, r24
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	fe 01       	movw	r30, r28
     d46:	71 96       	adiw	r30, 0x11	; 17
     d48:	e8 0f       	add	r30, r24
     d4a:	f9 1f       	adc	r31, r25
     d4c:	20 81       	ld	r18, Z
     d4e:	ca 01       	movw	r24, r20
     d50:	62 2f       	mov	r22, r18
     d52:	0e 94 89 0b 	call	0x1712	; 0x1712 <EEPROM_Write_Byte>
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	a0 e2       	ldi	r26, 0x20	; 32
     d5c:	b1 e4       	ldi	r27, 0x41	; 65
     d5e:	8b 87       	std	Y+11, r24	; 0x0b
     d60:	9c 87       	std	Y+12, r25	; 0x0c
     d62:	ad 87       	std	Y+13, r26	; 0x0d
     d64:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d66:	6b 85       	ldd	r22, Y+11	; 0x0b
     d68:	7c 85       	ldd	r23, Y+12	; 0x0c
     d6a:	8d 85       	ldd	r24, Y+13	; 0x0d
     d6c:	9e 85       	ldd	r25, Y+14	; 0x0e
     d6e:	20 e0       	ldi	r18, 0x00	; 0
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	4a ef       	ldi	r20, 0xFA	; 250
     d74:	54 e4       	ldi	r21, 0x44	; 68
     d76:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d7a:	dc 01       	movw	r26, r24
     d7c:	cb 01       	movw	r24, r22
     d7e:	8f 83       	std	Y+7, r24	; 0x07
     d80:	98 87       	std	Y+8, r25	; 0x08
     d82:	a9 87       	std	Y+9, r26	; 0x09
     d84:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d86:	6f 81       	ldd	r22, Y+7	; 0x07
     d88:	78 85       	ldd	r23, Y+8	; 0x08
     d8a:	89 85       	ldd	r24, Y+9	; 0x09
     d8c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d8e:	20 e0       	ldi	r18, 0x00	; 0
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	40 e8       	ldi	r20, 0x80	; 128
     d94:	5f e3       	ldi	r21, 0x3F	; 63
     d96:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     d9a:	88 23       	and	r24, r24
     d9c:	2c f4       	brge	.+10     	; 0xda8 <APP_storePassword+0x9e>
		__ticks = 1;
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	9e 83       	std	Y+6, r25	; 0x06
     da4:	8d 83       	std	Y+5, r24	; 0x05
     da6:	3f c0       	rjmp	.+126    	; 0xe26 <APP_storePassword+0x11c>
	else if (__tmp > 65535)
     da8:	6f 81       	ldd	r22, Y+7	; 0x07
     daa:	78 85       	ldd	r23, Y+8	; 0x08
     dac:	89 85       	ldd	r24, Y+9	; 0x09
     dae:	9a 85       	ldd	r25, Y+10	; 0x0a
     db0:	20 e0       	ldi	r18, 0x00	; 0
     db2:	3f ef       	ldi	r19, 0xFF	; 255
     db4:	4f e7       	ldi	r20, 0x7F	; 127
     db6:	57 e4       	ldi	r21, 0x47	; 71
     db8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     dbc:	18 16       	cp	r1, r24
     dbe:	4c f5       	brge	.+82     	; 0xe12 <APP_storePassword+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dc0:	6b 85       	ldd	r22, Y+11	; 0x0b
     dc2:	7c 85       	ldd	r23, Y+12	; 0x0c
     dc4:	8d 85       	ldd	r24, Y+13	; 0x0d
     dc6:	9e 85       	ldd	r25, Y+14	; 0x0e
     dc8:	20 e0       	ldi	r18, 0x00	; 0
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	40 e2       	ldi	r20, 0x20	; 32
     dce:	51 e4       	ldi	r21, 0x41	; 65
     dd0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     dd4:	dc 01       	movw	r26, r24
     dd6:	cb 01       	movw	r24, r22
     dd8:	bc 01       	movw	r22, r24
     dda:	cd 01       	movw	r24, r26
     ddc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     de0:	dc 01       	movw	r26, r24
     de2:	cb 01       	movw	r24, r22
     de4:	9e 83       	std	Y+6, r25	; 0x06
     de6:	8d 83       	std	Y+5, r24	; 0x05
     de8:	0f c0       	rjmp	.+30     	; 0xe08 <APP_storePassword+0xfe>
     dea:	88 ec       	ldi	r24, 0xC8	; 200
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	9c 83       	std	Y+4, r25	; 0x04
     df0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     df2:	8b 81       	ldd	r24, Y+3	; 0x03
     df4:	9c 81       	ldd	r25, Y+4	; 0x04
     df6:	01 97       	sbiw	r24, 0x01	; 1
     df8:	f1 f7       	brne	.-4      	; 0xdf6 <APP_storePassword+0xec>
     dfa:	9c 83       	std	Y+4, r25	; 0x04
     dfc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dfe:	8d 81       	ldd	r24, Y+5	; 0x05
     e00:	9e 81       	ldd	r25, Y+6	; 0x06
     e02:	01 97       	sbiw	r24, 0x01	; 1
     e04:	9e 83       	std	Y+6, r25	; 0x06
     e06:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e08:	8d 81       	ldd	r24, Y+5	; 0x05
     e0a:	9e 81       	ldd	r25, Y+6	; 0x06
     e0c:	00 97       	sbiw	r24, 0x00	; 0
     e0e:	69 f7       	brne	.-38     	; 0xdea <APP_storePassword+0xe0>
     e10:	14 c0       	rjmp	.+40     	; 0xe3a <APP_storePassword+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e12:	6f 81       	ldd	r22, Y+7	; 0x07
     e14:	78 85       	ldd	r23, Y+8	; 0x08
     e16:	89 85       	ldd	r24, Y+9	; 0x09
     e18:	9a 85       	ldd	r25, Y+10	; 0x0a
     e1a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e1e:	dc 01       	movw	r26, r24
     e20:	cb 01       	movw	r24, r22
     e22:	9e 83       	std	Y+6, r25	; 0x06
     e24:	8d 83       	std	Y+5, r24	; 0x05
     e26:	8d 81       	ldd	r24, Y+5	; 0x05
     e28:	9e 81       	ldd	r25, Y+6	; 0x06
     e2a:	9a 83       	std	Y+2, r25	; 0x02
     e2c:	89 83       	std	Y+1, r24	; 0x01
     e2e:	89 81       	ldd	r24, Y+1	; 0x01
     e30:	9a 81       	ldd	r25, Y+2	; 0x02
     e32:	01 97       	sbiw	r24, 0x01	; 1
     e34:	f1 f7       	brne	.-4      	; 0xe32 <APP_storePassword+0x128>
     e36:	9a 83       	std	Y+2, r25	; 0x02
     e38:	89 83       	std	Y+1, r24	; 0x01
				*(ArrPtr + Loop_counter));
		_delay_ms(10);
		LCD_clearScreen();
     e3a:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_clearScreen>
		LCD_displayString("storing pass");
     e3e:	80 e6       	ldi	r24, 0x60	; 96
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <LCD_displayString>
	uint8 ArrPtr[20];
	UART_sendByte(1);
	UART_receiveString(ArrPtr);
	uint8 Loop_counter = 0;

	for (uint8 Loop_counter = 0; Loop_counter < 8; Loop_counter++) {
     e46:	8f 85       	ldd	r24, Y+15	; 0x0f
     e48:	8f 5f       	subi	r24, 0xFF	; 255
     e4a:	8f 87       	std	Y+15, r24	; 0x0f
     e4c:	8f 85       	ldd	r24, Y+15	; 0x0f
     e4e:	88 30       	cpi	r24, 0x08	; 8
     e50:	08 f4       	brcc	.+2      	; 0xe54 <APP_storePassword+0x14a>
     e52:	6f cf       	rjmp	.-290    	; 0xd32 <APP_storePassword+0x28>
		_delay_ms(10);
		LCD_clearScreen();
		LCD_displayString("storing pass");
	}

	EEPROM_Write_Byte(PASSWORD_FLAG_LOCATION, PASSWORD_IS_SET);
     e54:	81 e1       	ldi	r24, 0x11	; 17
     e56:	92 e0       	ldi	r25, 0x02	; 2
     e58:	6f e0       	ldi	r22, 0x0F	; 15
     e5a:	0e 94 89 0b 	call	0x1712	; 0x1712 <EEPROM_Write_Byte>
	LCD_clearScreen();
     e5e:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_clearScreen>
	LCD_displayString("storing flag");
     e62:	8d e6       	ldi	r24, 0x6D	; 109
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <LCD_displayString>
}
     e6a:	a4 96       	adiw	r28, 0x24	; 36
     e6c:	0f b6       	in	r0, 0x3f	; 63
     e6e:	f8 94       	cli
     e70:	de bf       	out	0x3e, r29	; 62
     e72:	0f be       	out	0x3f, r0	; 63
     e74:	cd bf       	out	0x3d, r28	; 61
     e76:	cf 91       	pop	r28
     e78:	df 91       	pop	r29
     e7a:	08 95       	ret

00000e7c <APP_alarmInit>:
 [Returns] :${return_type}
 This return shall indicate var_func_returnt_description
 Mira comptable
 ---------------------------------------------------------------------------------------------------------------*/

void APP_alarmInit() {
     e7c:	df 93       	push	r29
     e7e:	cf 93       	push	r28
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(ALARM_PORT_DIRECTION, 0);
     e84:	a7 e3       	ldi	r26, 0x37	; 55
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	e7 e3       	ldi	r30, 0x37	; 55
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	81 60       	ori	r24, 0x01	; 1
     e90:	8c 93       	st	X, r24
}
     e92:	cf 91       	pop	r28
     e94:	df 91       	pop	r29
     e96:	08 95       	ret

00000e98 <PasswordSetFlag>:

void PasswordSetFlag() {
     e98:	df 93       	push	r29
     e9a:	cf 93       	push	r28
     e9c:	cd b7       	in	r28, 0x3d	; 61
     e9e:	de b7       	in	r29, 0x3e	; 62

	EEPROM_Write_Byte(PASSWORD_LOCATION, PASSWORD_IS_SET);
     ea0:	81 e1       	ldi	r24, 0x11	; 17
     ea2:	93 e0       	ldi	r25, 0x03	; 3
     ea4:	6f e0       	ldi	r22, 0x0F	; 15
     ea6:	0e 94 89 0b 	call	0x1712	; 0x1712 <EEPROM_Write_Byte>

}
     eaa:	cf 91       	pop	r28
     eac:	df 91       	pop	r29
     eae:	08 95       	ret

00000eb0 <APP_alarmTurnOn>:
void APP_alarmTurnOn() {
     eb0:	df 93       	push	r29
     eb2:	cf 93       	push	r28
     eb4:	cd b7       	in	r28, 0x3d	; 61
     eb6:	de b7       	in	r29, 0x3e	; 62
     eb8:	6d 97       	sbiw	r28, 0x1d	; 29
     eba:	0f b6       	in	r0, 0x3f	; 63
     ebc:	f8 94       	cli
     ebe:	de bf       	out	0x3e, r29	; 62
     ec0:	0f be       	out	0x3f, r0	; 63
     ec2:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xFF;
     ec4:	e7 e3       	ldi	r30, 0x37	; 55
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	8f ef       	ldi	r24, 0xFF	; 255
     eca:	80 83       	st	Z, r24

	for (uint8 var = 0; var < 100; ++var) {
     ecc:	1d 8e       	std	Y+29, r1	; 0x1d
     ece:	f5 c0       	rjmp	.+490    	; 0x10ba <APP_alarmTurnOn+0x20a>
		SET_BIT(PORTB, PB0);
     ed0:	a8 e3       	ldi	r26, 0x38	; 56
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e8 e3       	ldi	r30, 0x38	; 56
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	81 60       	ori	r24, 0x01	; 1
     edc:	8c 93       	st	X, r24
     ede:	80 e0       	ldi	r24, 0x00	; 0
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	a0 ee       	ldi	r26, 0xE0	; 224
     ee4:	b0 e4       	ldi	r27, 0x40	; 64
     ee6:	89 8f       	std	Y+25, r24	; 0x19
     ee8:	9a 8f       	std	Y+26, r25	; 0x1a
     eea:	ab 8f       	std	Y+27, r26	; 0x1b
     eec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eee:	69 8d       	ldd	r22, Y+25	; 0x19
     ef0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ef2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ef4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ef6:	20 e0       	ldi	r18, 0x00	; 0
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	4a ef       	ldi	r20, 0xFA	; 250
     efc:	54 e4       	ldi	r21, 0x44	; 68
     efe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f02:	dc 01       	movw	r26, r24
     f04:	cb 01       	movw	r24, r22
     f06:	8d 8b       	std	Y+21, r24	; 0x15
     f08:	9e 8b       	std	Y+22, r25	; 0x16
     f0a:	af 8b       	std	Y+23, r26	; 0x17
     f0c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f0e:	6d 89       	ldd	r22, Y+21	; 0x15
     f10:	7e 89       	ldd	r23, Y+22	; 0x16
     f12:	8f 89       	ldd	r24, Y+23	; 0x17
     f14:	98 8d       	ldd	r25, Y+24	; 0x18
     f16:	20 e0       	ldi	r18, 0x00	; 0
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	40 e8       	ldi	r20, 0x80	; 128
     f1c:	5f e3       	ldi	r21, 0x3F	; 63
     f1e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     f22:	88 23       	and	r24, r24
     f24:	2c f4       	brge	.+10     	; 0xf30 <APP_alarmTurnOn+0x80>
		__ticks = 1;
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	9c 8b       	std	Y+20, r25	; 0x14
     f2c:	8b 8b       	std	Y+19, r24	; 0x13
     f2e:	3f c0       	rjmp	.+126    	; 0xfae <APP_alarmTurnOn+0xfe>
	else if (__tmp > 65535)
     f30:	6d 89       	ldd	r22, Y+21	; 0x15
     f32:	7e 89       	ldd	r23, Y+22	; 0x16
     f34:	8f 89       	ldd	r24, Y+23	; 0x17
     f36:	98 8d       	ldd	r25, Y+24	; 0x18
     f38:	20 e0       	ldi	r18, 0x00	; 0
     f3a:	3f ef       	ldi	r19, 0xFF	; 255
     f3c:	4f e7       	ldi	r20, 0x7F	; 127
     f3e:	57 e4       	ldi	r21, 0x47	; 71
     f40:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     f44:	18 16       	cp	r1, r24
     f46:	4c f5       	brge	.+82     	; 0xf9a <APP_alarmTurnOn+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f48:	69 8d       	ldd	r22, Y+25	; 0x19
     f4a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	40 e2       	ldi	r20, 0x20	; 32
     f56:	51 e4       	ldi	r21, 0x41	; 65
     f58:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f5c:	dc 01       	movw	r26, r24
     f5e:	cb 01       	movw	r24, r22
     f60:	bc 01       	movw	r22, r24
     f62:	cd 01       	movw	r24, r26
     f64:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f68:	dc 01       	movw	r26, r24
     f6a:	cb 01       	movw	r24, r22
     f6c:	9c 8b       	std	Y+20, r25	; 0x14
     f6e:	8b 8b       	std	Y+19, r24	; 0x13
     f70:	0f c0       	rjmp	.+30     	; 0xf90 <APP_alarmTurnOn+0xe0>
     f72:	88 ec       	ldi	r24, 0xC8	; 200
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	9a 8b       	std	Y+18, r25	; 0x12
     f78:	89 8b       	std	Y+17, r24	; 0x11
     f7a:	89 89       	ldd	r24, Y+17	; 0x11
     f7c:	9a 89       	ldd	r25, Y+18	; 0x12
     f7e:	01 97       	sbiw	r24, 0x01	; 1
     f80:	f1 f7       	brne	.-4      	; 0xf7e <APP_alarmTurnOn+0xce>
     f82:	9a 8b       	std	Y+18, r25	; 0x12
     f84:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f86:	8b 89       	ldd	r24, Y+19	; 0x13
     f88:	9c 89       	ldd	r25, Y+20	; 0x14
     f8a:	01 97       	sbiw	r24, 0x01	; 1
     f8c:	9c 8b       	std	Y+20, r25	; 0x14
     f8e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f90:	8b 89       	ldd	r24, Y+19	; 0x13
     f92:	9c 89       	ldd	r25, Y+20	; 0x14
     f94:	00 97       	sbiw	r24, 0x00	; 0
     f96:	69 f7       	brne	.-38     	; 0xf72 <APP_alarmTurnOn+0xc2>
     f98:	14 c0       	rjmp	.+40     	; 0xfc2 <APP_alarmTurnOn+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f9a:	6d 89       	ldd	r22, Y+21	; 0x15
     f9c:	7e 89       	ldd	r23, Y+22	; 0x16
     f9e:	8f 89       	ldd	r24, Y+23	; 0x17
     fa0:	98 8d       	ldd	r25, Y+24	; 0x18
     fa2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fa6:	dc 01       	movw	r26, r24
     fa8:	cb 01       	movw	r24, r22
     faa:	9c 8b       	std	Y+20, r25	; 0x14
     fac:	8b 8b       	std	Y+19, r24	; 0x13
     fae:	8b 89       	ldd	r24, Y+19	; 0x13
     fb0:	9c 89       	ldd	r25, Y+20	; 0x14
     fb2:	98 8b       	std	Y+16, r25	; 0x10
     fb4:	8f 87       	std	Y+15, r24	; 0x0f
     fb6:	8f 85       	ldd	r24, Y+15	; 0x0f
     fb8:	98 89       	ldd	r25, Y+16	; 0x10
     fba:	01 97       	sbiw	r24, 0x01	; 1
     fbc:	f1 f7       	brne	.-4      	; 0xfba <APP_alarmTurnOn+0x10a>
     fbe:	98 8b       	std	Y+16, r25	; 0x10
     fc0:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(7);
		CLEAR_BIT(PORTB, 0);
     fc2:	a8 e3       	ldi	r26, 0x38	; 56
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	e8 e3       	ldi	r30, 0x38	; 56
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	8e 7f       	andi	r24, 0xFE	; 254
     fce:	8c 93       	st	X, r24
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	a0 ee       	ldi	r26, 0xE0	; 224
     fd6:	b0 e4       	ldi	r27, 0x40	; 64
     fd8:	8b 87       	std	Y+11, r24	; 0x0b
     fda:	9c 87       	std	Y+12, r25	; 0x0c
     fdc:	ad 87       	std	Y+13, r26	; 0x0d
     fde:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fe0:	6b 85       	ldd	r22, Y+11	; 0x0b
     fe2:	7c 85       	ldd	r23, Y+12	; 0x0c
     fe4:	8d 85       	ldd	r24, Y+13	; 0x0d
     fe6:	9e 85       	ldd	r25, Y+14	; 0x0e
     fe8:	20 e0       	ldi	r18, 0x00	; 0
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	4a ef       	ldi	r20, 0xFA	; 250
     fee:	54 e4       	ldi	r21, 0x44	; 68
     ff0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ff4:	dc 01       	movw	r26, r24
     ff6:	cb 01       	movw	r24, r22
     ff8:	8f 83       	std	Y+7, r24	; 0x07
     ffa:	98 87       	std	Y+8, r25	; 0x08
     ffc:	a9 87       	std	Y+9, r26	; 0x09
     ffe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1000:	6f 81       	ldd	r22, Y+7	; 0x07
    1002:	78 85       	ldd	r23, Y+8	; 0x08
    1004:	89 85       	ldd	r24, Y+9	; 0x09
    1006:	9a 85       	ldd	r25, Y+10	; 0x0a
    1008:	20 e0       	ldi	r18, 0x00	; 0
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	40 e8       	ldi	r20, 0x80	; 128
    100e:	5f e3       	ldi	r21, 0x3F	; 63
    1010:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1014:	88 23       	and	r24, r24
    1016:	2c f4       	brge	.+10     	; 0x1022 <APP_alarmTurnOn+0x172>
		__ticks = 1;
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	9e 83       	std	Y+6, r25	; 0x06
    101e:	8d 83       	std	Y+5, r24	; 0x05
    1020:	3f c0       	rjmp	.+126    	; 0x10a0 <APP_alarmTurnOn+0x1f0>
	else if (__tmp > 65535)
    1022:	6f 81       	ldd	r22, Y+7	; 0x07
    1024:	78 85       	ldd	r23, Y+8	; 0x08
    1026:	89 85       	ldd	r24, Y+9	; 0x09
    1028:	9a 85       	ldd	r25, Y+10	; 0x0a
    102a:	20 e0       	ldi	r18, 0x00	; 0
    102c:	3f ef       	ldi	r19, 0xFF	; 255
    102e:	4f e7       	ldi	r20, 0x7F	; 127
    1030:	57 e4       	ldi	r21, 0x47	; 71
    1032:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1036:	18 16       	cp	r1, r24
    1038:	4c f5       	brge	.+82     	; 0x108c <APP_alarmTurnOn+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    103a:	6b 85       	ldd	r22, Y+11	; 0x0b
    103c:	7c 85       	ldd	r23, Y+12	; 0x0c
    103e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1040:	9e 85       	ldd	r25, Y+14	; 0x0e
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	40 e2       	ldi	r20, 0x20	; 32
    1048:	51 e4       	ldi	r21, 0x41	; 65
    104a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    104e:	dc 01       	movw	r26, r24
    1050:	cb 01       	movw	r24, r22
    1052:	bc 01       	movw	r22, r24
    1054:	cd 01       	movw	r24, r26
    1056:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    105a:	dc 01       	movw	r26, r24
    105c:	cb 01       	movw	r24, r22
    105e:	9e 83       	std	Y+6, r25	; 0x06
    1060:	8d 83       	std	Y+5, r24	; 0x05
    1062:	0f c0       	rjmp	.+30     	; 0x1082 <APP_alarmTurnOn+0x1d2>
    1064:	88 ec       	ldi	r24, 0xC8	; 200
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	9c 83       	std	Y+4, r25	; 0x04
    106a:	8b 83       	std	Y+3, r24	; 0x03
    106c:	8b 81       	ldd	r24, Y+3	; 0x03
    106e:	9c 81       	ldd	r25, Y+4	; 0x04
    1070:	01 97       	sbiw	r24, 0x01	; 1
    1072:	f1 f7       	brne	.-4      	; 0x1070 <APP_alarmTurnOn+0x1c0>
    1074:	9c 83       	std	Y+4, r25	; 0x04
    1076:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1078:	8d 81       	ldd	r24, Y+5	; 0x05
    107a:	9e 81       	ldd	r25, Y+6	; 0x06
    107c:	01 97       	sbiw	r24, 0x01	; 1
    107e:	9e 83       	std	Y+6, r25	; 0x06
    1080:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1082:	8d 81       	ldd	r24, Y+5	; 0x05
    1084:	9e 81       	ldd	r25, Y+6	; 0x06
    1086:	00 97       	sbiw	r24, 0x00	; 0
    1088:	69 f7       	brne	.-38     	; 0x1064 <APP_alarmTurnOn+0x1b4>
    108a:	14 c0       	rjmp	.+40     	; 0x10b4 <APP_alarmTurnOn+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    108c:	6f 81       	ldd	r22, Y+7	; 0x07
    108e:	78 85       	ldd	r23, Y+8	; 0x08
    1090:	89 85       	ldd	r24, Y+9	; 0x09
    1092:	9a 85       	ldd	r25, Y+10	; 0x0a
    1094:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1098:	dc 01       	movw	r26, r24
    109a:	cb 01       	movw	r24, r22
    109c:	9e 83       	std	Y+6, r25	; 0x06
    109e:	8d 83       	std	Y+5, r24	; 0x05
    10a0:	8d 81       	ldd	r24, Y+5	; 0x05
    10a2:	9e 81       	ldd	r25, Y+6	; 0x06
    10a4:	9a 83       	std	Y+2, r25	; 0x02
    10a6:	89 83       	std	Y+1, r24	; 0x01
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	9a 81       	ldd	r25, Y+2	; 0x02
    10ac:	01 97       	sbiw	r24, 0x01	; 1
    10ae:	f1 f7       	brne	.-4      	; 0x10ac <APP_alarmTurnOn+0x1fc>
    10b0:	9a 83       	std	Y+2, r25	; 0x02
    10b2:	89 83       	std	Y+1, r24	; 0x01

}
void APP_alarmTurnOn() {
	DDRB = 0xFF;

	for (uint8 var = 0; var < 100; ++var) {
    10b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10b6:	8f 5f       	subi	r24, 0xFF	; 255
    10b8:	8d 8f       	std	Y+29, r24	; 0x1d
    10ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10bc:	84 36       	cpi	r24, 0x64	; 100
    10be:	08 f4       	brcc	.+2      	; 0x10c2 <APP_alarmTurnOn+0x212>
    10c0:	07 cf       	rjmp	.-498    	; 0xed0 <APP_alarmTurnOn+0x20>
		_delay_ms(7);
		CLEAR_BIT(PORTB, 0);
		_delay_ms(7);
	}

}
    10c2:	6d 96       	adiw	r28, 0x1d	; 29
    10c4:	0f b6       	in	r0, 0x3f	; 63
    10c6:	f8 94       	cli
    10c8:	de bf       	out	0x3e, r29	; 62
    10ca:	0f be       	out	0x3f, r0	; 63
    10cc:	cd bf       	out	0x3d, r28	; 61
    10ce:	cf 91       	pop	r28
    10d0:	df 91       	pop	r29
    10d2:	08 95       	ret

000010d4 <APP_openTheDoor>:
 As an input Arg, this Argshall indicate a_functionArgDescription3
 As an output Arg, this Argshall indicate a_functionArgDescription4
 [Returns] :${return_type}
 This return shall indicate var_func_returnt_description
 ---------------------------------------------------------------------------------------------------------------*/
void APP_openTheDoor() {
    10d4:	df 93       	push	r29
    10d6:	cf 93       	push	r28
    10d8:	cd b7       	in	r28, 0x3d	; 61
    10da:	de b7       	in	r29, 0x3e	; 62
    10dc:	2e 97       	sbiw	r28, 0x0e	; 14
    10de:	0f b6       	in	r0, 0x3f	; 63
    10e0:	f8 94       	cli
    10e2:	de bf       	out	0x3e, r29	; 62
    10e4:	0f be       	out	0x3f, r0	; 63
    10e6:	cd bf       	out	0x3d, r28	; 61
	SET_BIT(PORTB, PB1);
    10e8:	a8 e3       	ldi	r26, 0x38	; 56
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e8 e3       	ldi	r30, 0x38	; 56
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	82 60       	ori	r24, 0x02	; 2
    10f4:	8c 93       	st	X, r24
	CLEAR_BIT(PORTB, PB2);
    10f6:	a8 e3       	ldi	r26, 0x38	; 56
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	e8 e3       	ldi	r30, 0x38	; 56
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	8b 7f       	andi	r24, 0xFB	; 251
    1102:	8c 93       	st	X, r24
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	aa e7       	ldi	r26, 0x7A	; 122
    110a:	b4 e4       	ldi	r27, 0x44	; 68
    110c:	8b 87       	std	Y+11, r24	; 0x0b
    110e:	9c 87       	std	Y+12, r25	; 0x0c
    1110:	ad 87       	std	Y+13, r26	; 0x0d
    1112:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1114:	6b 85       	ldd	r22, Y+11	; 0x0b
    1116:	7c 85       	ldd	r23, Y+12	; 0x0c
    1118:	8d 85       	ldd	r24, Y+13	; 0x0d
    111a:	9e 85       	ldd	r25, Y+14	; 0x0e
    111c:	20 e0       	ldi	r18, 0x00	; 0
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	4a ef       	ldi	r20, 0xFA	; 250
    1122:	54 e4       	ldi	r21, 0x44	; 68
    1124:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1128:	dc 01       	movw	r26, r24
    112a:	cb 01       	movw	r24, r22
    112c:	8f 83       	std	Y+7, r24	; 0x07
    112e:	98 87       	std	Y+8, r25	; 0x08
    1130:	a9 87       	std	Y+9, r26	; 0x09
    1132:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1134:	6f 81       	ldd	r22, Y+7	; 0x07
    1136:	78 85       	ldd	r23, Y+8	; 0x08
    1138:	89 85       	ldd	r24, Y+9	; 0x09
    113a:	9a 85       	ldd	r25, Y+10	; 0x0a
    113c:	20 e0       	ldi	r18, 0x00	; 0
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	40 e8       	ldi	r20, 0x80	; 128
    1142:	5f e3       	ldi	r21, 0x3F	; 63
    1144:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1148:	88 23       	and	r24, r24
    114a:	2c f4       	brge	.+10     	; 0x1156 <APP_openTheDoor+0x82>
		__ticks = 1;
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	9e 83       	std	Y+6, r25	; 0x06
    1152:	8d 83       	std	Y+5, r24	; 0x05
    1154:	3f c0       	rjmp	.+126    	; 0x11d4 <APP_openTheDoor+0x100>
	else if (__tmp > 65535)
    1156:	6f 81       	ldd	r22, Y+7	; 0x07
    1158:	78 85       	ldd	r23, Y+8	; 0x08
    115a:	89 85       	ldd	r24, Y+9	; 0x09
    115c:	9a 85       	ldd	r25, Y+10	; 0x0a
    115e:	20 e0       	ldi	r18, 0x00	; 0
    1160:	3f ef       	ldi	r19, 0xFF	; 255
    1162:	4f e7       	ldi	r20, 0x7F	; 127
    1164:	57 e4       	ldi	r21, 0x47	; 71
    1166:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    116a:	18 16       	cp	r1, r24
    116c:	4c f5       	brge	.+82     	; 0x11c0 <APP_openTheDoor+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    116e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1170:	7c 85       	ldd	r23, Y+12	; 0x0c
    1172:	8d 85       	ldd	r24, Y+13	; 0x0d
    1174:	9e 85       	ldd	r25, Y+14	; 0x0e
    1176:	20 e0       	ldi	r18, 0x00	; 0
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	40 e2       	ldi	r20, 0x20	; 32
    117c:	51 e4       	ldi	r21, 0x41	; 65
    117e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1182:	dc 01       	movw	r26, r24
    1184:	cb 01       	movw	r24, r22
    1186:	bc 01       	movw	r22, r24
    1188:	cd 01       	movw	r24, r26
    118a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    118e:	dc 01       	movw	r26, r24
    1190:	cb 01       	movw	r24, r22
    1192:	9e 83       	std	Y+6, r25	; 0x06
    1194:	8d 83       	std	Y+5, r24	; 0x05
    1196:	0f c0       	rjmp	.+30     	; 0x11b6 <APP_openTheDoor+0xe2>
    1198:	88 ec       	ldi	r24, 0xC8	; 200
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	9c 83       	std	Y+4, r25	; 0x04
    119e:	8b 83       	std	Y+3, r24	; 0x03
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	9c 81       	ldd	r25, Y+4	; 0x04
    11a4:	01 97       	sbiw	r24, 0x01	; 1
    11a6:	f1 f7       	brne	.-4      	; 0x11a4 <APP_openTheDoor+0xd0>
    11a8:	9c 83       	std	Y+4, r25	; 0x04
    11aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ac:	8d 81       	ldd	r24, Y+5	; 0x05
    11ae:	9e 81       	ldd	r25, Y+6	; 0x06
    11b0:	01 97       	sbiw	r24, 0x01	; 1
    11b2:	9e 83       	std	Y+6, r25	; 0x06
    11b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11b6:	8d 81       	ldd	r24, Y+5	; 0x05
    11b8:	9e 81       	ldd	r25, Y+6	; 0x06
    11ba:	00 97       	sbiw	r24, 0x00	; 0
    11bc:	69 f7       	brne	.-38     	; 0x1198 <APP_openTheDoor+0xc4>
    11be:	14 c0       	rjmp	.+40     	; 0x11e8 <APP_openTheDoor+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11c0:	6f 81       	ldd	r22, Y+7	; 0x07
    11c2:	78 85       	ldd	r23, Y+8	; 0x08
    11c4:	89 85       	ldd	r24, Y+9	; 0x09
    11c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    11c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11cc:	dc 01       	movw	r26, r24
    11ce:	cb 01       	movw	r24, r22
    11d0:	9e 83       	std	Y+6, r25	; 0x06
    11d2:	8d 83       	std	Y+5, r24	; 0x05
    11d4:	8d 81       	ldd	r24, Y+5	; 0x05
    11d6:	9e 81       	ldd	r25, Y+6	; 0x06
    11d8:	9a 83       	std	Y+2, r25	; 0x02
    11da:	89 83       	std	Y+1, r24	; 0x01
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
    11de:	9a 81       	ldd	r25, Y+2	; 0x02
    11e0:	01 97       	sbiw	r24, 0x01	; 1
    11e2:	f1 f7       	brne	.-4      	; 0x11e0 <APP_openTheDoor+0x10c>
    11e4:	9a 83       	std	Y+2, r25	; 0x02
    11e6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	CLEAR_BIT(PORTB, PB1);
    11e8:	a8 e3       	ldi	r26, 0x38	; 56
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	e8 e3       	ldi	r30, 0x38	; 56
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	8d 7f       	andi	r24, 0xFD	; 253
    11f4:	8c 93       	st	X, r24

}
    11f6:	2e 96       	adiw	r28, 0x0e	; 14
    11f8:	0f b6       	in	r0, 0x3f	; 63
    11fa:	f8 94       	cli
    11fc:	de bf       	out	0x3e, r29	; 62
    11fe:	0f be       	out	0x3f, r0	; 63
    1200:	cd bf       	out	0x3d, r28	; 61
    1202:	cf 91       	pop	r28
    1204:	df 91       	pop	r29
    1206:	08 95       	ret

00001208 <APP_closeTheDoor>:

void APP_closeTheDoor() {
    1208:	df 93       	push	r29
    120a:	cf 93       	push	r28
    120c:	cd b7       	in	r28, 0x3d	; 61
    120e:	de b7       	in	r29, 0x3e	; 62
    1210:	2e 97       	sbiw	r28, 0x0e	; 14
    1212:	0f b6       	in	r0, 0x3f	; 63
    1214:	f8 94       	cli
    1216:	de bf       	out	0x3e, r29	; 62
    1218:	0f be       	out	0x3f, r0	; 63
    121a:	cd bf       	out	0x3d, r28	; 61
	SET_BIT(PORTB, PB2);
    121c:	a8 e3       	ldi	r26, 0x38	; 56
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	e8 e3       	ldi	r30, 0x38	; 56
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	84 60       	ori	r24, 0x04	; 4
    1228:	8c 93       	st	X, r24
	CLEAR_BIT(PORTB, PB1);
    122a:	a8 e3       	ldi	r26, 0x38	; 56
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	e8 e3       	ldi	r30, 0x38	; 56
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	8d 7f       	andi	r24, 0xFD	; 253
    1236:	8c 93       	st	X, r24
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	aa e7       	ldi	r26, 0x7A	; 122
    123e:	b4 e4       	ldi	r27, 0x44	; 68
    1240:	8b 87       	std	Y+11, r24	; 0x0b
    1242:	9c 87       	std	Y+12, r25	; 0x0c
    1244:	ad 87       	std	Y+13, r26	; 0x0d
    1246:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1248:	6b 85       	ldd	r22, Y+11	; 0x0b
    124a:	7c 85       	ldd	r23, Y+12	; 0x0c
    124c:	8d 85       	ldd	r24, Y+13	; 0x0d
    124e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1250:	20 e0       	ldi	r18, 0x00	; 0
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	4a ef       	ldi	r20, 0xFA	; 250
    1256:	54 e4       	ldi	r21, 0x44	; 68
    1258:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    125c:	dc 01       	movw	r26, r24
    125e:	cb 01       	movw	r24, r22
    1260:	8f 83       	std	Y+7, r24	; 0x07
    1262:	98 87       	std	Y+8, r25	; 0x08
    1264:	a9 87       	std	Y+9, r26	; 0x09
    1266:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1268:	6f 81       	ldd	r22, Y+7	; 0x07
    126a:	78 85       	ldd	r23, Y+8	; 0x08
    126c:	89 85       	ldd	r24, Y+9	; 0x09
    126e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1270:	20 e0       	ldi	r18, 0x00	; 0
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	40 e8       	ldi	r20, 0x80	; 128
    1276:	5f e3       	ldi	r21, 0x3F	; 63
    1278:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    127c:	88 23       	and	r24, r24
    127e:	2c f4       	brge	.+10     	; 0x128a <APP_closeTheDoor+0x82>
		__ticks = 1;
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	9e 83       	std	Y+6, r25	; 0x06
    1286:	8d 83       	std	Y+5, r24	; 0x05
    1288:	3f c0       	rjmp	.+126    	; 0x1308 <APP_closeTheDoor+0x100>
	else if (__tmp > 65535)
    128a:	6f 81       	ldd	r22, Y+7	; 0x07
    128c:	78 85       	ldd	r23, Y+8	; 0x08
    128e:	89 85       	ldd	r24, Y+9	; 0x09
    1290:	9a 85       	ldd	r25, Y+10	; 0x0a
    1292:	20 e0       	ldi	r18, 0x00	; 0
    1294:	3f ef       	ldi	r19, 0xFF	; 255
    1296:	4f e7       	ldi	r20, 0x7F	; 127
    1298:	57 e4       	ldi	r21, 0x47	; 71
    129a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    129e:	18 16       	cp	r1, r24
    12a0:	4c f5       	brge	.+82     	; 0x12f4 <APP_closeTheDoor+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    12a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    12a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    12a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    12aa:	20 e0       	ldi	r18, 0x00	; 0
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	40 e2       	ldi	r20, 0x20	; 32
    12b0:	51 e4       	ldi	r21, 0x41	; 65
    12b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12b6:	dc 01       	movw	r26, r24
    12b8:	cb 01       	movw	r24, r22
    12ba:	bc 01       	movw	r22, r24
    12bc:	cd 01       	movw	r24, r26
    12be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12c2:	dc 01       	movw	r26, r24
    12c4:	cb 01       	movw	r24, r22
    12c6:	9e 83       	std	Y+6, r25	; 0x06
    12c8:	8d 83       	std	Y+5, r24	; 0x05
    12ca:	0f c0       	rjmp	.+30     	; 0x12ea <APP_closeTheDoor+0xe2>
    12cc:	88 ec       	ldi	r24, 0xC8	; 200
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	9c 83       	std	Y+4, r25	; 0x04
    12d2:	8b 83       	std	Y+3, r24	; 0x03
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	9c 81       	ldd	r25, Y+4	; 0x04
    12d8:	01 97       	sbiw	r24, 0x01	; 1
    12da:	f1 f7       	brne	.-4      	; 0x12d8 <APP_closeTheDoor+0xd0>
    12dc:	9c 83       	std	Y+4, r25	; 0x04
    12de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12e0:	8d 81       	ldd	r24, Y+5	; 0x05
    12e2:	9e 81       	ldd	r25, Y+6	; 0x06
    12e4:	01 97       	sbiw	r24, 0x01	; 1
    12e6:	9e 83       	std	Y+6, r25	; 0x06
    12e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ea:	8d 81       	ldd	r24, Y+5	; 0x05
    12ec:	9e 81       	ldd	r25, Y+6	; 0x06
    12ee:	00 97       	sbiw	r24, 0x00	; 0
    12f0:	69 f7       	brne	.-38     	; 0x12cc <APP_closeTheDoor+0xc4>
    12f2:	14 c0       	rjmp	.+40     	; 0x131c <APP_closeTheDoor+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12f4:	6f 81       	ldd	r22, Y+7	; 0x07
    12f6:	78 85       	ldd	r23, Y+8	; 0x08
    12f8:	89 85       	ldd	r24, Y+9	; 0x09
    12fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    12fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1300:	dc 01       	movw	r26, r24
    1302:	cb 01       	movw	r24, r22
    1304:	9e 83       	std	Y+6, r25	; 0x06
    1306:	8d 83       	std	Y+5, r24	; 0x05
    1308:	8d 81       	ldd	r24, Y+5	; 0x05
    130a:	9e 81       	ldd	r25, Y+6	; 0x06
    130c:	9a 83       	std	Y+2, r25	; 0x02
    130e:	89 83       	std	Y+1, r24	; 0x01
    1310:	89 81       	ldd	r24, Y+1	; 0x01
    1312:	9a 81       	ldd	r25, Y+2	; 0x02
    1314:	01 97       	sbiw	r24, 0x01	; 1
    1316:	f1 f7       	brne	.-4      	; 0x1314 <APP_closeTheDoor+0x10c>
    1318:	9a 83       	std	Y+2, r25	; 0x02
    131a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	CLEAR_BIT(PORTB, PB2);
    131c:	a8 e3       	ldi	r26, 0x38	; 56
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	e8 e3       	ldi	r30, 0x38	; 56
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	8b 7f       	andi	r24, 0xFB	; 251
    1328:	8c 93       	st	X, r24
}
    132a:	2e 96       	adiw	r28, 0x0e	; 14
    132c:	0f b6       	in	r0, 0x3f	; 63
    132e:	f8 94       	cli
    1330:	de bf       	out	0x3e, r29	; 62
    1332:	0f be       	out	0x3f, r0	; 63
    1334:	cd bf       	out	0x3d, r28	; 61
    1336:	cf 91       	pop	r28
    1338:	df 91       	pop	r29
    133a:	08 95       	ret

0000133c <APP_passwordIsSetQuary>:
void APP_passwordIsSetQuary() {
    133c:	df 93       	push	r29
    133e:	cf 93       	push	r28
    1340:	cd b7       	in	r28, 0x3d	; 61
    1342:	de b7       	in	r29, 0x3e	; 62
    1344:	6e 97       	sbiw	r28, 0x1e	; 30
    1346:	0f b6       	in	r0, 0x3f	; 63
    1348:	f8 94       	cli
    134a:	de bf       	out	0x3e, r29	; 62
    134c:	0f be       	out	0x3f, r0	; 63
    134e:	cd bf       	out	0x3d, r28	; 61
	 LCD_displayString("flage set error");
	 _delay_ms(100);
	 }
	 */

	if (EEPROM_Read_Byte(PASSWORD_FLAG_LOCATION, FlagPtr)) {
    1350:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1352:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1354:	81 e1       	ldi	r24, 0x11	; 17
    1356:	92 e0       	ldi	r25, 0x02	; 2
    1358:	b9 01       	movw	r22, r18
    135a:	0e 94 ca 0b 	call	0x1794	; 0x1794 <EEPROM_Read_Byte>
    135e:	88 23       	and	r24, r24
    1360:	09 f4       	brne	.+2      	; 0x1364 <APP_passwordIsSetQuary+0x28>
    1362:	79 c0       	rjmp	.+242    	; 0x1456 <APP_passwordIsSetQuary+0x11a>

		LCD_clearScreen();
    1364:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_clearScreen>
		LCD_displayString("flage r succ");
    1368:	8a e7       	ldi	r24, 0x7A	; 122
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <LCD_displayString>
    1370:	80 e0       	ldi	r24, 0x00	; 0
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	a8 ec       	ldi	r26, 0xC8	; 200
    1376:	b2 e4       	ldi	r27, 0x42	; 66
    1378:	89 8f       	std	Y+25, r24	; 0x19
    137a:	9a 8f       	std	Y+26, r25	; 0x1a
    137c:	ab 8f       	std	Y+27, r26	; 0x1b
    137e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1380:	69 8d       	ldd	r22, Y+25	; 0x19
    1382:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1384:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1386:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1388:	20 e0       	ldi	r18, 0x00	; 0
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	4a ef       	ldi	r20, 0xFA	; 250
    138e:	54 e4       	ldi	r21, 0x44	; 68
    1390:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1394:	dc 01       	movw	r26, r24
    1396:	cb 01       	movw	r24, r22
    1398:	8d 8b       	std	Y+21, r24	; 0x15
    139a:	9e 8b       	std	Y+22, r25	; 0x16
    139c:	af 8b       	std	Y+23, r26	; 0x17
    139e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13a0:	6d 89       	ldd	r22, Y+21	; 0x15
    13a2:	7e 89       	ldd	r23, Y+22	; 0x16
    13a4:	8f 89       	ldd	r24, Y+23	; 0x17
    13a6:	98 8d       	ldd	r25, Y+24	; 0x18
    13a8:	20 e0       	ldi	r18, 0x00	; 0
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	40 e8       	ldi	r20, 0x80	; 128
    13ae:	5f e3       	ldi	r21, 0x3F	; 63
    13b0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    13b4:	88 23       	and	r24, r24
    13b6:	2c f4       	brge	.+10     	; 0x13c2 <APP_passwordIsSetQuary+0x86>
		__ticks = 1;
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	9c 8b       	std	Y+20, r25	; 0x14
    13be:	8b 8b       	std	Y+19, r24	; 0x13
    13c0:	3f c0       	rjmp	.+126    	; 0x1440 <APP_passwordIsSetQuary+0x104>
	else if (__tmp > 65535)
    13c2:	6d 89       	ldd	r22, Y+21	; 0x15
    13c4:	7e 89       	ldd	r23, Y+22	; 0x16
    13c6:	8f 89       	ldd	r24, Y+23	; 0x17
    13c8:	98 8d       	ldd	r25, Y+24	; 0x18
    13ca:	20 e0       	ldi	r18, 0x00	; 0
    13cc:	3f ef       	ldi	r19, 0xFF	; 255
    13ce:	4f e7       	ldi	r20, 0x7F	; 127
    13d0:	57 e4       	ldi	r21, 0x47	; 71
    13d2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    13d6:	18 16       	cp	r1, r24
    13d8:	4c f5       	brge	.+82     	; 0x142c <APP_passwordIsSetQuary+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13da:	69 8d       	ldd	r22, Y+25	; 0x19
    13dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13e2:	20 e0       	ldi	r18, 0x00	; 0
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	40 e2       	ldi	r20, 0x20	; 32
    13e8:	51 e4       	ldi	r21, 0x41	; 65
    13ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13ee:	dc 01       	movw	r26, r24
    13f0:	cb 01       	movw	r24, r22
    13f2:	bc 01       	movw	r22, r24
    13f4:	cd 01       	movw	r24, r26
    13f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13fa:	dc 01       	movw	r26, r24
    13fc:	cb 01       	movw	r24, r22
    13fe:	9c 8b       	std	Y+20, r25	; 0x14
    1400:	8b 8b       	std	Y+19, r24	; 0x13
    1402:	0f c0       	rjmp	.+30     	; 0x1422 <APP_passwordIsSetQuary+0xe6>
    1404:	88 ec       	ldi	r24, 0xC8	; 200
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	9a 8b       	std	Y+18, r25	; 0x12
    140a:	89 8b       	std	Y+17, r24	; 0x11
    140c:	89 89       	ldd	r24, Y+17	; 0x11
    140e:	9a 89       	ldd	r25, Y+18	; 0x12
    1410:	01 97       	sbiw	r24, 0x01	; 1
    1412:	f1 f7       	brne	.-4      	; 0x1410 <APP_passwordIsSetQuary+0xd4>
    1414:	9a 8b       	std	Y+18, r25	; 0x12
    1416:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1418:	8b 89       	ldd	r24, Y+19	; 0x13
    141a:	9c 89       	ldd	r25, Y+20	; 0x14
    141c:	01 97       	sbiw	r24, 0x01	; 1
    141e:	9c 8b       	std	Y+20, r25	; 0x14
    1420:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1422:	8b 89       	ldd	r24, Y+19	; 0x13
    1424:	9c 89       	ldd	r25, Y+20	; 0x14
    1426:	00 97       	sbiw	r24, 0x00	; 0
    1428:	69 f7       	brne	.-38     	; 0x1404 <APP_passwordIsSetQuary+0xc8>
    142a:	8d c0       	rjmp	.+282    	; 0x1546 <APP_passwordIsSetQuary+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    142c:	6d 89       	ldd	r22, Y+21	; 0x15
    142e:	7e 89       	ldd	r23, Y+22	; 0x16
    1430:	8f 89       	ldd	r24, Y+23	; 0x17
    1432:	98 8d       	ldd	r25, Y+24	; 0x18
    1434:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1438:	dc 01       	movw	r26, r24
    143a:	cb 01       	movw	r24, r22
    143c:	9c 8b       	std	Y+20, r25	; 0x14
    143e:	8b 8b       	std	Y+19, r24	; 0x13
    1440:	8b 89       	ldd	r24, Y+19	; 0x13
    1442:	9c 89       	ldd	r25, Y+20	; 0x14
    1444:	98 8b       	std	Y+16, r25	; 0x10
    1446:	8f 87       	std	Y+15, r24	; 0x0f
    1448:	8f 85       	ldd	r24, Y+15	; 0x0f
    144a:	98 89       	ldd	r25, Y+16	; 0x10
    144c:	01 97       	sbiw	r24, 0x01	; 1
    144e:	f1 f7       	brne	.-4      	; 0x144c <APP_passwordIsSetQuary+0x110>
    1450:	98 8b       	std	Y+16, r25	; 0x10
    1452:	8f 87       	std	Y+15, r24	; 0x0f
    1454:	78 c0       	rjmp	.+240    	; 0x1546 <APP_passwordIsSetQuary+0x20a>
		_delay_ms(100);
	} else {

		LCD_clearScreen();
    1456:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_clearScreen>
		LCD_displayString("flage r error");
    145a:	87 e8       	ldi	r24, 0x87	; 135
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <LCD_displayString>
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	a8 ec       	ldi	r26, 0xC8	; 200
    1468:	b2 e4       	ldi	r27, 0x42	; 66
    146a:	8b 87       	std	Y+11, r24	; 0x0b
    146c:	9c 87       	std	Y+12, r25	; 0x0c
    146e:	ad 87       	std	Y+13, r26	; 0x0d
    1470:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1472:	6b 85       	ldd	r22, Y+11	; 0x0b
    1474:	7c 85       	ldd	r23, Y+12	; 0x0c
    1476:	8d 85       	ldd	r24, Y+13	; 0x0d
    1478:	9e 85       	ldd	r25, Y+14	; 0x0e
    147a:	20 e0       	ldi	r18, 0x00	; 0
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	4a ef       	ldi	r20, 0xFA	; 250
    1480:	54 e4       	ldi	r21, 0x44	; 68
    1482:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1486:	dc 01       	movw	r26, r24
    1488:	cb 01       	movw	r24, r22
    148a:	8f 83       	std	Y+7, r24	; 0x07
    148c:	98 87       	std	Y+8, r25	; 0x08
    148e:	a9 87       	std	Y+9, r26	; 0x09
    1490:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1492:	6f 81       	ldd	r22, Y+7	; 0x07
    1494:	78 85       	ldd	r23, Y+8	; 0x08
    1496:	89 85       	ldd	r24, Y+9	; 0x09
    1498:	9a 85       	ldd	r25, Y+10	; 0x0a
    149a:	20 e0       	ldi	r18, 0x00	; 0
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	40 e8       	ldi	r20, 0x80	; 128
    14a0:	5f e3       	ldi	r21, 0x3F	; 63
    14a2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    14a6:	88 23       	and	r24, r24
    14a8:	2c f4       	brge	.+10     	; 0x14b4 <APP_passwordIsSetQuary+0x178>
		__ticks = 1;
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	9e 83       	std	Y+6, r25	; 0x06
    14b0:	8d 83       	std	Y+5, r24	; 0x05
    14b2:	3f c0       	rjmp	.+126    	; 0x1532 <APP_passwordIsSetQuary+0x1f6>
	else if (__tmp > 65535)
    14b4:	6f 81       	ldd	r22, Y+7	; 0x07
    14b6:	78 85       	ldd	r23, Y+8	; 0x08
    14b8:	89 85       	ldd	r24, Y+9	; 0x09
    14ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	3f ef       	ldi	r19, 0xFF	; 255
    14c0:	4f e7       	ldi	r20, 0x7F	; 127
    14c2:	57 e4       	ldi	r21, 0x47	; 71
    14c4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    14c8:	18 16       	cp	r1, r24
    14ca:	4c f5       	brge	.+82     	; 0x151e <APP_passwordIsSetQuary+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    14ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    14d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    14d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	40 e2       	ldi	r20, 0x20	; 32
    14da:	51 e4       	ldi	r21, 0x41	; 65
    14dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14e0:	dc 01       	movw	r26, r24
    14e2:	cb 01       	movw	r24, r22
    14e4:	bc 01       	movw	r22, r24
    14e6:	cd 01       	movw	r24, r26
    14e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14ec:	dc 01       	movw	r26, r24
    14ee:	cb 01       	movw	r24, r22
    14f0:	9e 83       	std	Y+6, r25	; 0x06
    14f2:	8d 83       	std	Y+5, r24	; 0x05
    14f4:	0f c0       	rjmp	.+30     	; 0x1514 <APP_passwordIsSetQuary+0x1d8>
    14f6:	88 ec       	ldi	r24, 0xC8	; 200
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	9c 83       	std	Y+4, r25	; 0x04
    14fc:	8b 83       	std	Y+3, r24	; 0x03
    14fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1500:	9c 81       	ldd	r25, Y+4	; 0x04
    1502:	01 97       	sbiw	r24, 0x01	; 1
    1504:	f1 f7       	brne	.-4      	; 0x1502 <APP_passwordIsSetQuary+0x1c6>
    1506:	9c 83       	std	Y+4, r25	; 0x04
    1508:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    150a:	8d 81       	ldd	r24, Y+5	; 0x05
    150c:	9e 81       	ldd	r25, Y+6	; 0x06
    150e:	01 97       	sbiw	r24, 0x01	; 1
    1510:	9e 83       	std	Y+6, r25	; 0x06
    1512:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1514:	8d 81       	ldd	r24, Y+5	; 0x05
    1516:	9e 81       	ldd	r25, Y+6	; 0x06
    1518:	00 97       	sbiw	r24, 0x00	; 0
    151a:	69 f7       	brne	.-38     	; 0x14f6 <APP_passwordIsSetQuary+0x1ba>
    151c:	14 c0       	rjmp	.+40     	; 0x1546 <APP_passwordIsSetQuary+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    151e:	6f 81       	ldd	r22, Y+7	; 0x07
    1520:	78 85       	ldd	r23, Y+8	; 0x08
    1522:	89 85       	ldd	r24, Y+9	; 0x09
    1524:	9a 85       	ldd	r25, Y+10	; 0x0a
    1526:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    152a:	dc 01       	movw	r26, r24
    152c:	cb 01       	movw	r24, r22
    152e:	9e 83       	std	Y+6, r25	; 0x06
    1530:	8d 83       	std	Y+5, r24	; 0x05
    1532:	8d 81       	ldd	r24, Y+5	; 0x05
    1534:	9e 81       	ldd	r25, Y+6	; 0x06
    1536:	9a 83       	std	Y+2, r25	; 0x02
    1538:	89 83       	std	Y+1, r24	; 0x01
    153a:	89 81       	ldd	r24, Y+1	; 0x01
    153c:	9a 81       	ldd	r25, Y+2	; 0x02
    153e:	01 97       	sbiw	r24, 0x01	; 1
    1540:	f1 f7       	brne	.-4      	; 0x153e <APP_passwordIsSetQuary+0x202>
    1542:	9a 83       	std	Y+2, r25	; 0x02
    1544:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
	}

	if (*FlagPtr == PASSWORD_IS_SET) {
    1546:	ed 8d       	ldd	r30, Y+29	; 0x1d
    1548:	fe 8d       	ldd	r31, Y+30	; 0x1e
    154a:	80 81       	ld	r24, Z
    154c:	8f 30       	cpi	r24, 0x0F	; 15
    154e:	51 f4       	brne	.+20     	; 0x1564 <APP_passwordIsSetQuary+0x228>
		LCD_clearScreen();
    1550:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_clearScreen>
		LCD_displayString("PASSWORD_IS_SET");
    1554:	85 e9       	ldi	r24, 0x95	; 149
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <LCD_displayString>
		UART_sendByte(PASSWORD_IS_SET);
    155c:	8f e0       	ldi	r24, 0x0F	; 15
    155e:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <UART_sendByte>
    1562:	15 c0       	rjmp	.+42     	; 0x158e <APP_passwordIsSetQuary+0x252>
	} else if (*FlagPtr == PASSWORD_IS_CLEARED) {
    1564:	ed 8d       	ldd	r30, Y+29	; 0x1d
    1566:	fe 8d       	ldd	r31, Y+30	; 0x1e
    1568:	80 81       	ld	r24, Z
    156a:	88 23       	and	r24, r24
    156c:	51 f4       	brne	.+20     	; 0x1582 <APP_passwordIsSetQuary+0x246>
		LCD_clearScreen();
    156e:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_clearScreen>
		LCD_displayString("PASSWORD_IS_CLEARED");
    1572:	85 ea       	ldi	r24, 0xA5	; 165
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <LCD_displayString>
		UART_sendByte(PASSWORD_IS_CLEARED);
    157a:	80 e0       	ldi	r24, 0x00	; 0
    157c:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <UART_sendByte>
    1580:	06 c0       	rjmp	.+12     	; 0x158e <APP_passwordIsSetQuary+0x252>
	} else {

		LCD_clearScreen();
    1582:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_clearScreen>
		LCD_displayString("flage undefined");
    1586:	89 eb       	ldi	r24, 0xB9	; 185
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <LCD_displayString>
	}
}
    158e:	6e 96       	adiw	r28, 0x1e	; 30
    1590:	0f b6       	in	r0, 0x3f	; 63
    1592:	f8 94       	cli
    1594:	de bf       	out	0x3e, r29	; 62
    1596:	0f be       	out	0x3f, r0	; 63
    1598:	cd bf       	out	0x3d, r28	; 61
    159a:	cf 91       	pop	r28
    159c:	df 91       	pop	r29
    159e:	08 95       	ret

000015a0 <APP_getCurrentPassword>:
 As an output Arg, this Argshall indicate a_functionArgDescription4
 [Returns] :${return_type}
 This return shall indicate var_func_returnt_description
 ---------------------------------------------------------------------------------------------------------------*/

void APP_getCurrentPassword() {
    15a0:	df 93       	push	r29
    15a2:	cf 93       	push	r28
    15a4:	cd b7       	in	r28, 0x3d	; 61
    15a6:	de b7       	in	r29, 0x3e	; 62
    15a8:	61 97       	sbiw	r28, 0x11	; 17
    15aa:	0f b6       	in	r0, 0x3f	; 63
    15ac:	f8 94       	cli
    15ae:	de bf       	out	0x3e, r29	; 62
    15b0:	0f be       	out	0x3f, r0	; 63
    15b2:	cd bf       	out	0x3d, r28	; 61

	uint8 *a;
	for (uint8 Loop_counter = 0; Loop_counter < 8; Loop_counter++) {
    15b4:	1f 86       	std	Y+15, r1	; 0x0f
    15b6:	97 c0       	rjmp	.+302    	; 0x16e6 <APP_getCurrentPassword+0x146>

		EEPROM_Read_Byte(PASSWORD_LOCATION + Loop_counter, (a + Loop_counter));
    15b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    15ba:	88 2f       	mov	r24, r24
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	8f 5e       	subi	r24, 0xEF	; 239
    15c0:	9c 4f       	sbci	r25, 0xFC	; 252
    15c2:	ac 01       	movw	r20, r24
    15c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    15c6:	28 2f       	mov	r18, r24
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	88 89       	ldd	r24, Y+16	; 0x10
    15cc:	99 89       	ldd	r25, Y+17	; 0x11
    15ce:	28 0f       	add	r18, r24
    15d0:	39 1f       	adc	r19, r25
    15d2:	ca 01       	movw	r24, r20
    15d4:	b9 01       	movw	r22, r18
    15d6:	0e 94 ca 0b 	call	0x1794	; 0x1794 <EEPROM_Read_Byte>
		UART_sendByte(*(a + Loop_counter));
    15da:	8f 85       	ldd	r24, Y+15	; 0x0f
    15dc:	28 2f       	mov	r18, r24
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	88 89       	ldd	r24, Y+16	; 0x10
    15e2:	99 89       	ldd	r25, Y+17	; 0x11
    15e4:	fc 01       	movw	r30, r24
    15e6:	e2 0f       	add	r30, r18
    15e8:	f3 1f       	adc	r31, r19
    15ea:	80 81       	ld	r24, Z
    15ec:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <UART_sendByte>
    15f0:	80 e0       	ldi	r24, 0x00	; 0
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	a8 e4       	ldi	r26, 0x48	; 72
    15f6:	b2 e4       	ldi	r27, 0x42	; 66
    15f8:	8b 87       	std	Y+11, r24	; 0x0b
    15fa:	9c 87       	std	Y+12, r25	; 0x0c
    15fc:	ad 87       	std	Y+13, r26	; 0x0d
    15fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1600:	6b 85       	ldd	r22, Y+11	; 0x0b
    1602:	7c 85       	ldd	r23, Y+12	; 0x0c
    1604:	8d 85       	ldd	r24, Y+13	; 0x0d
    1606:	9e 85       	ldd	r25, Y+14	; 0x0e
    1608:	20 e0       	ldi	r18, 0x00	; 0
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	4a ef       	ldi	r20, 0xFA	; 250
    160e:	54 e4       	ldi	r21, 0x44	; 68
    1610:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1614:	dc 01       	movw	r26, r24
    1616:	cb 01       	movw	r24, r22
    1618:	8f 83       	std	Y+7, r24	; 0x07
    161a:	98 87       	std	Y+8, r25	; 0x08
    161c:	a9 87       	std	Y+9, r26	; 0x09
    161e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1620:	6f 81       	ldd	r22, Y+7	; 0x07
    1622:	78 85       	ldd	r23, Y+8	; 0x08
    1624:	89 85       	ldd	r24, Y+9	; 0x09
    1626:	9a 85       	ldd	r25, Y+10	; 0x0a
    1628:	20 e0       	ldi	r18, 0x00	; 0
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	40 e8       	ldi	r20, 0x80	; 128
    162e:	5f e3       	ldi	r21, 0x3F	; 63
    1630:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1634:	88 23       	and	r24, r24
    1636:	2c f4       	brge	.+10     	; 0x1642 <APP_getCurrentPassword+0xa2>
		__ticks = 1;
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	9e 83       	std	Y+6, r25	; 0x06
    163e:	8d 83       	std	Y+5, r24	; 0x05
    1640:	3f c0       	rjmp	.+126    	; 0x16c0 <APP_getCurrentPassword+0x120>
	else if (__tmp > 65535)
    1642:	6f 81       	ldd	r22, Y+7	; 0x07
    1644:	78 85       	ldd	r23, Y+8	; 0x08
    1646:	89 85       	ldd	r24, Y+9	; 0x09
    1648:	9a 85       	ldd	r25, Y+10	; 0x0a
    164a:	20 e0       	ldi	r18, 0x00	; 0
    164c:	3f ef       	ldi	r19, 0xFF	; 255
    164e:	4f e7       	ldi	r20, 0x7F	; 127
    1650:	57 e4       	ldi	r21, 0x47	; 71
    1652:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1656:	18 16       	cp	r1, r24
    1658:	4c f5       	brge	.+82     	; 0x16ac <APP_getCurrentPassword+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    165a:	6b 85       	ldd	r22, Y+11	; 0x0b
    165c:	7c 85       	ldd	r23, Y+12	; 0x0c
    165e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1660:	9e 85       	ldd	r25, Y+14	; 0x0e
    1662:	20 e0       	ldi	r18, 0x00	; 0
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	40 e2       	ldi	r20, 0x20	; 32
    1668:	51 e4       	ldi	r21, 0x41	; 65
    166a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    166e:	dc 01       	movw	r26, r24
    1670:	cb 01       	movw	r24, r22
    1672:	bc 01       	movw	r22, r24
    1674:	cd 01       	movw	r24, r26
    1676:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    167a:	dc 01       	movw	r26, r24
    167c:	cb 01       	movw	r24, r22
    167e:	9e 83       	std	Y+6, r25	; 0x06
    1680:	8d 83       	std	Y+5, r24	; 0x05
    1682:	0f c0       	rjmp	.+30     	; 0x16a2 <APP_getCurrentPassword+0x102>
    1684:	88 ec       	ldi	r24, 0xC8	; 200
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	9c 83       	std	Y+4, r25	; 0x04
    168a:	8b 83       	std	Y+3, r24	; 0x03
    168c:	8b 81       	ldd	r24, Y+3	; 0x03
    168e:	9c 81       	ldd	r25, Y+4	; 0x04
    1690:	01 97       	sbiw	r24, 0x01	; 1
    1692:	f1 f7       	brne	.-4      	; 0x1690 <APP_getCurrentPassword+0xf0>
    1694:	9c 83       	std	Y+4, r25	; 0x04
    1696:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1698:	8d 81       	ldd	r24, Y+5	; 0x05
    169a:	9e 81       	ldd	r25, Y+6	; 0x06
    169c:	01 97       	sbiw	r24, 0x01	; 1
    169e:	9e 83       	std	Y+6, r25	; 0x06
    16a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16a2:	8d 81       	ldd	r24, Y+5	; 0x05
    16a4:	9e 81       	ldd	r25, Y+6	; 0x06
    16a6:	00 97       	sbiw	r24, 0x00	; 0
    16a8:	69 f7       	brne	.-38     	; 0x1684 <APP_getCurrentPassword+0xe4>
    16aa:	14 c0       	rjmp	.+40     	; 0x16d4 <APP_getCurrentPassword+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ac:	6f 81       	ldd	r22, Y+7	; 0x07
    16ae:	78 85       	ldd	r23, Y+8	; 0x08
    16b0:	89 85       	ldd	r24, Y+9	; 0x09
    16b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16b8:	dc 01       	movw	r26, r24
    16ba:	cb 01       	movw	r24, r22
    16bc:	9e 83       	std	Y+6, r25	; 0x06
    16be:	8d 83       	std	Y+5, r24	; 0x05
    16c0:	8d 81       	ldd	r24, Y+5	; 0x05
    16c2:	9e 81       	ldd	r25, Y+6	; 0x06
    16c4:	9a 83       	std	Y+2, r25	; 0x02
    16c6:	89 83       	std	Y+1, r24	; 0x01
    16c8:	89 81       	ldd	r24, Y+1	; 0x01
    16ca:	9a 81       	ldd	r25, Y+2	; 0x02
    16cc:	01 97       	sbiw	r24, 0x01	; 1
    16ce:	f1 f7       	brne	.-4      	; 0x16cc <APP_getCurrentPassword+0x12c>
    16d0:	9a 83       	std	Y+2, r25	; 0x02
    16d2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);
		LCD_clearScreen();
    16d4:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_clearScreen>
		LCD_displayString("getting pass");
    16d8:	89 ec       	ldi	r24, 0xC9	; 201
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <LCD_displayString>
 ---------------------------------------------------------------------------------------------------------------*/

void APP_getCurrentPassword() {

	uint8 *a;
	for (uint8 Loop_counter = 0; Loop_counter < 8; Loop_counter++) {
    16e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    16e2:	8f 5f       	subi	r24, 0xFF	; 255
    16e4:	8f 87       	std	Y+15, r24	; 0x0f
    16e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    16e8:	88 30       	cpi	r24, 0x08	; 8
    16ea:	08 f4       	brcc	.+2      	; 0x16ee <APP_getCurrentPassword+0x14e>
    16ec:	65 cf       	rjmp	.-310    	; 0x15b8 <APP_getCurrentPassword+0x18>
		_delay_ms(50);
		LCD_clearScreen();
		LCD_displayString("getting pass");
	}

}
    16ee:	61 96       	adiw	r28, 0x11	; 17
    16f0:	0f b6       	in	r0, 0x3f	; 63
    16f2:	f8 94       	cli
    16f4:	de bf       	out	0x3e, r29	; 62
    16f6:	0f be       	out	0x3f, r0	; 63
    16f8:	cd bf       	out	0x3d, r28	; 61
    16fa:	cf 91       	pop	r28
    16fc:	df 91       	pop	r29
    16fe:	08 95       	ret

00001700 <EEPROM_Init>:
 * Author: Mohamed Tarek
 */ 
#include "external_eeprom.h"

void EEPROM_Init(void)
{
    1700:	df 93       	push	r29
    1702:	cf 93       	push	r28
    1704:	cd b7       	in	r28, 0x3d	; 61
    1706:	de b7       	in	r29, 0x3e	; 62
	TWI_Init(); // just initialize the TWI module inside the MC
    1708:	0e 94 2a 0c 	call	0x1854	; 0x1854 <TWI_Init>
}
    170c:	cf 91       	pop	r28
    170e:	df 91       	pop	r29
    1710:	08 95       	ret

00001712 <EEPROM_Write_Byte>:

uint8 EEPROM_Write_Byte(uint16 u16addr, uint8 u8data)
{
    1712:	df 93       	push	r29
    1714:	cf 93       	push	r28
    1716:	00 d0       	rcall	.+0      	; 0x1718 <EEPROM_Write_Byte+0x6>
    1718:	00 d0       	rcall	.+0      	; 0x171a <EEPROM_Write_Byte+0x8>
    171a:	cd b7       	in	r28, 0x3d	; 61
    171c:	de b7       	in	r29, 0x3e	; 62
    171e:	9a 83       	std	Y+2, r25	; 0x02
    1720:	89 83       	std	Y+1, r24	; 0x01
    1722:	6b 83       	std	Y+3, r22	; 0x03
    TWI_Start();
    1724:	0e 94 40 0c 	call	0x1880	; 0x1880 <TWI_Start>
    if (TWI_Get_Status() != TW_START)
    1728:	0e 94 98 0c 	call	0x1930	; 0x1930 <TWI_Get_Status>
    172c:	88 30       	cpi	r24, 0x08	; 8
    172e:	11 f0       	breq	.+4      	; 0x1734 <EEPROM_Write_Byte+0x22>
        return ERROR;
    1730:	1c 82       	std	Y+4, r1	; 0x04
    1732:	28 c0       	rjmp	.+80     	; 0x1784 <EEPROM_Write_Byte+0x72>
		
    //write the device address and so we need to get A8 A9 A10 address bits and R/W=0 (write)
    TWI_Write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1734:	89 81       	ldd	r24, Y+1	; 0x01
    1736:	9a 81       	ldd	r25, Y+2	; 0x02
    1738:	80 70       	andi	r24, 0x00	; 0
    173a:	97 70       	andi	r25, 0x07	; 7
    173c:	88 0f       	add	r24, r24
    173e:	89 2f       	mov	r24, r25
    1740:	88 1f       	adc	r24, r24
    1742:	99 0b       	sbc	r25, r25
    1744:	91 95       	neg	r25
    1746:	80 6a       	ori	r24, 0xA0	; 160
    1748:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <TWI_Write>
    if (TWI_Get_Status() != TW_MT_SLA_W_ACK)
    174c:	0e 94 98 0c 	call	0x1930	; 0x1930 <TWI_Get_Status>
    1750:	88 31       	cpi	r24, 0x18	; 24
    1752:	11 f0       	breq	.+4      	; 0x1758 <EEPROM_Write_Byte+0x46>
        return ERROR; 
    1754:	1c 82       	std	Y+4, r1	; 0x04
    1756:	16 c0       	rjmp	.+44     	; 0x1784 <EEPROM_Write_Byte+0x72>
		 
    //send the required location address
    TWI_Write((uint8)(u16addr));
    1758:	89 81       	ldd	r24, Y+1	; 0x01
    175a:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <TWI_Write>
    if (TWI_Get_Status() != TW_MT_DATA_ACK)
    175e:	0e 94 98 0c 	call	0x1930	; 0x1930 <TWI_Get_Status>
    1762:	88 32       	cpi	r24, 0x28	; 40
    1764:	11 f0       	breq	.+4      	; 0x176a <EEPROM_Write_Byte+0x58>
        return ERROR;
    1766:	1c 82       	std	Y+4, r1	; 0x04
    1768:	0d c0       	rjmp	.+26     	; 0x1784 <EEPROM_Write_Byte+0x72>
		
    //write byte to eeprom
    TWI_Write(u8data);
    176a:	8b 81       	ldd	r24, Y+3	; 0x03
    176c:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <TWI_Write>
    if (TWI_Get_Status() != TW_MT_DATA_ACK)
    1770:	0e 94 98 0c 	call	0x1930	; 0x1930 <TWI_Get_Status>
    1774:	88 32       	cpi	r24, 0x28	; 40
    1776:	11 f0       	breq	.+4      	; 0x177c <EEPROM_Write_Byte+0x6a>
        return ERROR;
    1778:	1c 82       	std	Y+4, r1	; 0x04
    177a:	04 c0       	rjmp	.+8      	; 0x1784 <EEPROM_Write_Byte+0x72>
		
    TWI_Stop();
    177c:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <TWI_Stop>
	
    return SUCCESS;
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	8c 83       	std	Y+4, r24	; 0x04
    1784:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1786:	0f 90       	pop	r0
    1788:	0f 90       	pop	r0
    178a:	0f 90       	pop	r0
    178c:	0f 90       	pop	r0
    178e:	cf 91       	pop	r28
    1790:	df 91       	pop	r29
    1792:	08 95       	ret

00001794 <EEPROM_Read_Byte>:

uint8 EEPROM_Read_Byte(uint16 u16addr, uint8 *u8data)
{
    1794:	df 93       	push	r29
    1796:	cf 93       	push	r28
    1798:	00 d0       	rcall	.+0      	; 0x179a <EEPROM_Read_Byte+0x6>
    179a:	00 d0       	rcall	.+0      	; 0x179c <EEPROM_Read_Byte+0x8>
    179c:	0f 92       	push	r0
    179e:	cd b7       	in	r28, 0x3d	; 61
    17a0:	de b7       	in	r29, 0x3e	; 62
    17a2:	9a 83       	std	Y+2, r25	; 0x02
    17a4:	89 83       	std	Y+1, r24	; 0x01
    17a6:	7c 83       	std	Y+4, r23	; 0x04
    17a8:	6b 83       	std	Y+3, r22	; 0x03
    TWI_Start();
    17aa:	0e 94 40 0c 	call	0x1880	; 0x1880 <TWI_Start>
    if (TWI_Get_Status() != TW_START)
    17ae:	0e 94 98 0c 	call	0x1930	; 0x1930 <TWI_Get_Status>
    17b2:	88 30       	cpi	r24, 0x08	; 8
    17b4:	11 f0       	breq	.+4      	; 0x17ba <EEPROM_Read_Byte+0x26>
        return ERROR;
    17b6:	1d 82       	std	Y+5, r1	; 0x05
    17b8:	44 c0       	rjmp	.+136    	; 0x1842 <EEPROM_Read_Byte+0xae>
		
    //write the device address and so we need to get A8 A9 A10 address bits and R/W=0 (write)
    TWI_Write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    17ba:	89 81       	ldd	r24, Y+1	; 0x01
    17bc:	9a 81       	ldd	r25, Y+2	; 0x02
    17be:	80 70       	andi	r24, 0x00	; 0
    17c0:	97 70       	andi	r25, 0x07	; 7
    17c2:	88 0f       	add	r24, r24
    17c4:	89 2f       	mov	r24, r25
    17c6:	88 1f       	adc	r24, r24
    17c8:	99 0b       	sbc	r25, r25
    17ca:	91 95       	neg	r25
    17cc:	80 6a       	ori	r24, 0xA0	; 160
    17ce:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <TWI_Write>
    if (TWI_Get_Status() != TW_MT_SLA_W_ACK)
    17d2:	0e 94 98 0c 	call	0x1930	; 0x1930 <TWI_Get_Status>
    17d6:	88 31       	cpi	r24, 0x18	; 24
    17d8:	11 f0       	breq	.+4      	; 0x17de <EEPROM_Read_Byte+0x4a>
        return ERROR;
    17da:	1d 82       	std	Y+5, r1	; 0x05
    17dc:	32 c0       	rjmp	.+100    	; 0x1842 <EEPROM_Read_Byte+0xae>
		
    //send the required location address
    TWI_Write((uint8)(u16addr));
    17de:	89 81       	ldd	r24, Y+1	; 0x01
    17e0:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <TWI_Write>
    if (TWI_Get_Status() != TW_MT_DATA_ACK)
    17e4:	0e 94 98 0c 	call	0x1930	; 0x1930 <TWI_Get_Status>
    17e8:	88 32       	cpi	r24, 0x28	; 40
    17ea:	11 f0       	breq	.+4      	; 0x17f0 <EEPROM_Read_Byte+0x5c>
        return ERROR;
    17ec:	1d 82       	std	Y+5, r1	; 0x05
    17ee:	29 c0       	rjmp	.+82     	; 0x1842 <EEPROM_Read_Byte+0xae>
		
    //send a repeated start
    TWI_Start();
    17f0:	0e 94 40 0c 	call	0x1880	; 0x1880 <TWI_Start>
    if (TWI_Get_Status() != TW_REP_START)
    17f4:	0e 94 98 0c 	call	0x1930	; 0x1930 <TWI_Get_Status>
    17f8:	80 31       	cpi	r24, 0x10	; 16
    17fa:	11 f0       	breq	.+4      	; 0x1800 <EEPROM_Read_Byte+0x6c>
        return ERROR;
    17fc:	1d 82       	std	Y+5, r1	; 0x05
    17fe:	21 c0       	rjmp	.+66     	; 0x1842 <EEPROM_Read_Byte+0xae>
		
    //write the device address and so we need to get A8 A9 A10 address bits and R/W=1 (Read)
    TWI_Write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1800:	89 81       	ldd	r24, Y+1	; 0x01
    1802:	9a 81       	ldd	r25, Y+2	; 0x02
    1804:	80 70       	andi	r24, 0x00	; 0
    1806:	97 70       	andi	r25, 0x07	; 7
    1808:	88 0f       	add	r24, r24
    180a:	89 2f       	mov	r24, r25
    180c:	88 1f       	adc	r24, r24
    180e:	99 0b       	sbc	r25, r25
    1810:	91 95       	neg	r25
    1812:	81 6a       	ori	r24, 0xA1	; 161
    1814:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <TWI_Write>
    if (TWI_Get_Status() != TW_MT_SLA_R_ACK)
    1818:	0e 94 98 0c 	call	0x1930	; 0x1930 <TWI_Get_Status>
    181c:	80 34       	cpi	r24, 0x40	; 64
    181e:	11 f0       	breq	.+4      	; 0x1824 <EEPROM_Read_Byte+0x90>
        return ERROR;
    1820:	1d 82       	std	Y+5, r1	; 0x05
    1822:	0f c0       	rjmp	.+30     	; 0x1842 <EEPROM_Read_Byte+0xae>
		
    *u8data = TWI_Read_With_NACK();
    1824:	0e 94 85 0c 	call	0x190a	; 0x190a <TWI_Read_With_NACK>
    1828:	eb 81       	ldd	r30, Y+3	; 0x03
    182a:	fc 81       	ldd	r31, Y+4	; 0x04
    182c:	80 83       	st	Z, r24
    if (TWI_Get_Status() != TW_MR_DATA_NACK)
    182e:	0e 94 98 0c 	call	0x1930	; 0x1930 <TWI_Get_Status>
    1832:	88 35       	cpi	r24, 0x58	; 88
    1834:	11 f0       	breq	.+4      	; 0x183a <EEPROM_Read_Byte+0xa6>
        return ERROR;
    1836:	1d 82       	std	Y+5, r1	; 0x05
    1838:	04 c0       	rjmp	.+8      	; 0x1842 <EEPROM_Read_Byte+0xae>
		
    TWI_Stop();
    183a:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <TWI_Stop>
    return SUCCESS;
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	8d 83       	std	Y+5, r24	; 0x05
    1842:	8d 81       	ldd	r24, Y+5	; 0x05

}
    1844:	0f 90       	pop	r0
    1846:	0f 90       	pop	r0
    1848:	0f 90       	pop	r0
    184a:	0f 90       	pop	r0
    184c:	0f 90       	pop	r0
    184e:	cf 91       	pop	r28
    1850:	df 91       	pop	r29
    1852:	08 95       	ret

00001854 <TWI_Init>:
 * Author: Mohamed Tarek
 */ 
#include "i2c.h"

void TWI_Init(void)
{
    1854:	df 93       	push	r29
    1856:	cf 93       	push	r28
    1858:	cd b7       	in	r28, 0x3d	; 61
    185a:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
    185c:	e0 e2       	ldi	r30, 0x20	; 32
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	82 e0       	ldi	r24, 0x02	; 2
    1862:	80 83       	st	Z, r24
	TWSR = 0x00;
    1864:	e1 e2       	ldi	r30, 0x21	; 33
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
    186a:	e2 e2       	ldi	r30, 0x22	; 34
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	82 e0       	ldi	r24, 0x02	; 2
    1870:	80 83       	st	Z, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    1872:	e6 e5       	ldi	r30, 0x56	; 86
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	84 e0       	ldi	r24, 0x04	; 4
    1878:	80 83       	st	Z, r24
}
    187a:	cf 91       	pop	r28
    187c:	df 91       	pop	r29
    187e:	08 95       	ret

00001880 <TWI_Start>:

void TWI_Start(void)
{
    1880:	df 93       	push	r29
    1882:	cf 93       	push	r28
    1884:	cd b7       	in	r28, 0x3d	; 61
    1886:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1888:	e6 e5       	ldi	r30, 0x56	; 86
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	84 ea       	ldi	r24, 0xA4	; 164
    188e:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1890:	e6 e5       	ldi	r30, 0x56	; 86
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	88 23       	and	r24, r24
    1898:	dc f7       	brge	.-10     	; 0x1890 <TWI_Start+0x10>
}
    189a:	cf 91       	pop	r28
    189c:	df 91       	pop	r29
    189e:	08 95       	ret

000018a0 <TWI_Stop>:

void TWI_Stop(void)
{
    18a0:	df 93       	push	r29
    18a2:	cf 93       	push	r28
    18a4:	cd b7       	in	r28, 0x3d	; 61
    18a6:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    18a8:	e6 e5       	ldi	r30, 0x56	; 86
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	84 e9       	ldi	r24, 0x94	; 148
    18ae:	80 83       	st	Z, r24
}
    18b0:	cf 91       	pop	r28
    18b2:	df 91       	pop	r29
    18b4:	08 95       	ret

000018b6 <TWI_Write>:

void TWI_Write(uint8 data)
{
    18b6:	df 93       	push	r29
    18b8:	cf 93       	push	r28
    18ba:	0f 92       	push	r0
    18bc:	cd b7       	in	r28, 0x3d	; 61
    18be:	de b7       	in	r29, 0x3e	; 62
    18c0:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    18c2:	e3 e2       	ldi	r30, 0x23	; 35
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	89 81       	ldd	r24, Y+1	; 0x01
    18c8:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    18ca:	e6 e5       	ldi	r30, 0x56	; 86
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	84 e8       	ldi	r24, 0x84	; 132
    18d0:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    18d2:	e6 e5       	ldi	r30, 0x56	; 86
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	80 81       	ld	r24, Z
    18d8:	88 23       	and	r24, r24
    18da:	dc f7       	brge	.-10     	; 0x18d2 <TWI_Write+0x1c>
}
    18dc:	0f 90       	pop	r0
    18de:	cf 91       	pop	r28
    18e0:	df 91       	pop	r29
    18e2:	08 95       	ret

000018e4 <TWI_Read_With_ACK>:

uint8 TWI_Read_With_ACK(void)
{
    18e4:	df 93       	push	r29
    18e6:	cf 93       	push	r28
    18e8:	cd b7       	in	r28, 0x3d	; 61
    18ea:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    18ec:	e6 e5       	ldi	r30, 0x56	; 86
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	84 ec       	ldi	r24, 0xC4	; 196
    18f2:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    18f4:	e6 e5       	ldi	r30, 0x56	; 86
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	88 23       	and	r24, r24
    18fc:	dc f7       	brge	.-10     	; 0x18f4 <TWI_Read_With_ACK+0x10>
    /* Read Data */
    return TWDR;
    18fe:	e3 e2       	ldi	r30, 0x23	; 35
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	80 81       	ld	r24, Z
}
    1904:	cf 91       	pop	r28
    1906:	df 91       	pop	r29
    1908:	08 95       	ret

0000190a <TWI_Read_With_NACK>:

uint8 TWI_Read_With_NACK(void)
{
    190a:	df 93       	push	r29
    190c:	cf 93       	push	r28
    190e:	cd b7       	in	r28, 0x3d	; 61
    1910:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1912:	e6 e5       	ldi	r30, 0x56	; 86
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	84 e8       	ldi	r24, 0x84	; 132
    1918:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    191a:	e6 e5       	ldi	r30, 0x56	; 86
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	80 81       	ld	r24, Z
    1920:	88 23       	and	r24, r24
    1922:	dc f7       	brge	.-10     	; 0x191a <TWI_Read_With_NACK+0x10>
    /* Read Data */
    return TWDR;
    1924:	e3 e2       	ldi	r30, 0x23	; 35
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
}
    192a:	cf 91       	pop	r28
    192c:	df 91       	pop	r29
    192e:	08 95       	ret

00001930 <TWI_Get_Status>:

uint8 TWI_Get_Status(void)
{
    1930:	df 93       	push	r29
    1932:	cf 93       	push	r28
    1934:	0f 92       	push	r0
    1936:	cd b7       	in	r28, 0x3d	; 61
    1938:	de b7       	in	r29, 0x3e	; 62
    unsigned char status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    193a:	e1 e2       	ldi	r30, 0x21	; 33
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	88 7f       	andi	r24, 0xF8	; 248
    1942:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1944:	89 81       	ldd	r24, Y+1	; 0x01
}
    1946:	0f 90       	pop	r0
    1948:	cf 91       	pop	r28
    194a:	df 91       	pop	r29
    194c:	08 95       	ret

0000194e <LCD_init>:
 */

#include "lcd.h"

void LCD_init(void)
{
    194e:	df 93       	push	r29
    1950:	cf 93       	push	r28
    1952:	cd b7       	in	r28, 0x3d	; 61
    1954:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    1956:	a1 e3       	ldi	r26, 0x31	; 49
    1958:	b0 e0       	ldi	r27, 0x00	; 0
    195a:	e1 e3       	ldi	r30, 0x31	; 49
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	80 81       	ld	r24, Z
    1960:	80 67       	ori	r24, 0x70	; 112
    1962:	8c 93       	st	X, r24
	
	#if (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT_DIR |= 0xF0; /* Configure the highest 4 bits of the data port as output pins */
    1964:	a4 e3       	ldi	r26, 0x34	; 52
    1966:	b0 e0       	ldi	r27, 0x00	; 0
    1968:	e4 e3       	ldi	r30, 0x34	; 52
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	80 6f       	ori	r24, 0xF0	; 240
    1970:	8c 93       	st	X, r24
		#else
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif		 
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
    1972:	82 e0       	ldi	r24, 0x02	; 2
    1974:	0e 94 c8 0c 	call	0x1990	; 0x1990 <LCD_sendCommand>
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
    1978:	88 e2       	ldi	r24, 0x28	; 40
    197a:	0e 94 c8 0c 	call	0x1990	; 0x1990 <LCD_sendCommand>
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    197e:	8c e0       	ldi	r24, 0x0C	; 12
    1980:	0e 94 c8 0c 	call	0x1990	; 0x1990 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	0e 94 c8 0c 	call	0x1990	; 0x1990 <LCD_sendCommand>
}
    198a:	cf 91       	pop	r28
    198c:	df 91       	pop	r29
    198e:	08 95       	ret

00001990 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    1990:	0f 93       	push	r16
    1992:	1f 93       	push	r17
    1994:	df 93       	push	r29
    1996:	cf 93       	push	r28
    1998:	cd b7       	in	r28, 0x3d	; 61
    199a:	de b7       	in	r29, 0x3e	; 62
    199c:	c3 56       	subi	r28, 0x63	; 99
    199e:	d0 40       	sbci	r29, 0x00	; 0
    19a0:	0f b6       	in	r0, 0x3f	; 63
    19a2:	f8 94       	cli
    19a4:	de bf       	out	0x3e, r29	; 62
    19a6:	0f be       	out	0x3f, r0	; 63
    19a8:	cd bf       	out	0x3d, r28	; 61
    19aa:	fe 01       	movw	r30, r28
    19ac:	ed 59       	subi	r30, 0x9D	; 157
    19ae:	ff 4f       	sbci	r31, 0xFF	; 255
    19b0:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    19b2:	a2 e3       	ldi	r26, 0x32	; 50
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	e2 e3       	ldi	r30, 0x32	; 50
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	8f 7e       	andi	r24, 0xEF	; 239
    19be:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    19c0:	a2 e3       	ldi	r26, 0x32	; 50
    19c2:	b0 e0       	ldi	r27, 0x00	; 0
    19c4:	e2 e3       	ldi	r30, 0x32	; 50
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	8f 7d       	andi	r24, 0xDF	; 223
    19cc:	8c 93       	st	X, r24
    19ce:	fe 01       	movw	r30, r28
    19d0:	e1 5a       	subi	r30, 0xA1	; 161
    19d2:	ff 4f       	sbci	r31, 0xFF	; 255
    19d4:	80 e0       	ldi	r24, 0x00	; 0
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	a0 e8       	ldi	r26, 0x80	; 128
    19da:	bf e3       	ldi	r27, 0x3F	; 63
    19dc:	80 83       	st	Z, r24
    19de:	91 83       	std	Z+1, r25	; 0x01
    19e0:	a2 83       	std	Z+2, r26	; 0x02
    19e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e4:	8e 01       	movw	r16, r28
    19e6:	05 5a       	subi	r16, 0xA5	; 165
    19e8:	1f 4f       	sbci	r17, 0xFF	; 255
    19ea:	fe 01       	movw	r30, r28
    19ec:	e1 5a       	subi	r30, 0xA1	; 161
    19ee:	ff 4f       	sbci	r31, 0xFF	; 255
    19f0:	60 81       	ld	r22, Z
    19f2:	71 81       	ldd	r23, Z+1	; 0x01
    19f4:	82 81       	ldd	r24, Z+2	; 0x02
    19f6:	93 81       	ldd	r25, Z+3	; 0x03
    19f8:	20 e0       	ldi	r18, 0x00	; 0
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	4a ef       	ldi	r20, 0xFA	; 250
    19fe:	54 e4       	ldi	r21, 0x44	; 68
    1a00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a04:	dc 01       	movw	r26, r24
    1a06:	cb 01       	movw	r24, r22
    1a08:	f8 01       	movw	r30, r16
    1a0a:	80 83       	st	Z, r24
    1a0c:	91 83       	std	Z+1, r25	; 0x01
    1a0e:	a2 83       	std	Z+2, r26	; 0x02
    1a10:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a12:	fe 01       	movw	r30, r28
    1a14:	e5 5a       	subi	r30, 0xA5	; 165
    1a16:	ff 4f       	sbci	r31, 0xFF	; 255
    1a18:	60 81       	ld	r22, Z
    1a1a:	71 81       	ldd	r23, Z+1	; 0x01
    1a1c:	82 81       	ldd	r24, Z+2	; 0x02
    1a1e:	93 81       	ldd	r25, Z+3	; 0x03
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	40 e8       	ldi	r20, 0x80	; 128
    1a26:	5f e3       	ldi	r21, 0x3F	; 63
    1a28:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a2c:	88 23       	and	r24, r24
    1a2e:	44 f4       	brge	.+16     	; 0x1a40 <LCD_sendCommand+0xb0>
		__ticks = 1;
    1a30:	fe 01       	movw	r30, r28
    1a32:	e7 5a       	subi	r30, 0xA7	; 167
    1a34:	ff 4f       	sbci	r31, 0xFF	; 255
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	91 83       	std	Z+1, r25	; 0x01
    1a3c:	80 83       	st	Z, r24
    1a3e:	64 c0       	rjmp	.+200    	; 0x1b08 <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    1a40:	fe 01       	movw	r30, r28
    1a42:	e5 5a       	subi	r30, 0xA5	; 165
    1a44:	ff 4f       	sbci	r31, 0xFF	; 255
    1a46:	60 81       	ld	r22, Z
    1a48:	71 81       	ldd	r23, Z+1	; 0x01
    1a4a:	82 81       	ldd	r24, Z+2	; 0x02
    1a4c:	93 81       	ldd	r25, Z+3	; 0x03
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	3f ef       	ldi	r19, 0xFF	; 255
    1a52:	4f e7       	ldi	r20, 0x7F	; 127
    1a54:	57 e4       	ldi	r21, 0x47	; 71
    1a56:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a5a:	18 16       	cp	r1, r24
    1a5c:	0c f0       	brlt	.+2      	; 0x1a60 <LCD_sendCommand+0xd0>
    1a5e:	43 c0       	rjmp	.+134    	; 0x1ae6 <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a60:	fe 01       	movw	r30, r28
    1a62:	e1 5a       	subi	r30, 0xA1	; 161
    1a64:	ff 4f       	sbci	r31, 0xFF	; 255
    1a66:	60 81       	ld	r22, Z
    1a68:	71 81       	ldd	r23, Z+1	; 0x01
    1a6a:	82 81       	ldd	r24, Z+2	; 0x02
    1a6c:	93 81       	ldd	r25, Z+3	; 0x03
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	40 e2       	ldi	r20, 0x20	; 32
    1a74:	51 e4       	ldi	r21, 0x41	; 65
    1a76:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	8e 01       	movw	r16, r28
    1a80:	07 5a       	subi	r16, 0xA7	; 167
    1a82:	1f 4f       	sbci	r17, 0xFF	; 255
    1a84:	bc 01       	movw	r22, r24
    1a86:	cd 01       	movw	r24, r26
    1a88:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	cb 01       	movw	r24, r22
    1a90:	f8 01       	movw	r30, r16
    1a92:	91 83       	std	Z+1, r25	; 0x01
    1a94:	80 83       	st	Z, r24
    1a96:	1f c0       	rjmp	.+62     	; 0x1ad6 <LCD_sendCommand+0x146>
    1a98:	fe 01       	movw	r30, r28
    1a9a:	e9 5a       	subi	r30, 0xA9	; 169
    1a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9e:	88 ec       	ldi	r24, 0xC8	; 200
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	91 83       	std	Z+1, r25	; 0x01
    1aa4:	80 83       	st	Z, r24
    1aa6:	fe 01       	movw	r30, r28
    1aa8:	e9 5a       	subi	r30, 0xA9	; 169
    1aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1aac:	80 81       	ld	r24, Z
    1aae:	91 81       	ldd	r25, Z+1	; 0x01
    1ab0:	01 97       	sbiw	r24, 0x01	; 1
    1ab2:	f1 f7       	brne	.-4      	; 0x1ab0 <LCD_sendCommand+0x120>
    1ab4:	fe 01       	movw	r30, r28
    1ab6:	e9 5a       	subi	r30, 0xA9	; 169
    1ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aba:	91 83       	std	Z+1, r25	; 0x01
    1abc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1abe:	de 01       	movw	r26, r28
    1ac0:	a7 5a       	subi	r26, 0xA7	; 167
    1ac2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ac4:	fe 01       	movw	r30, r28
    1ac6:	e7 5a       	subi	r30, 0xA7	; 167
    1ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aca:	80 81       	ld	r24, Z
    1acc:	91 81       	ldd	r25, Z+1	; 0x01
    1ace:	01 97       	sbiw	r24, 0x01	; 1
    1ad0:	11 96       	adiw	r26, 0x01	; 1
    1ad2:	9c 93       	st	X, r25
    1ad4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad6:	fe 01       	movw	r30, r28
    1ad8:	e7 5a       	subi	r30, 0xA7	; 167
    1ada:	ff 4f       	sbci	r31, 0xFF	; 255
    1adc:	80 81       	ld	r24, Z
    1ade:	91 81       	ldd	r25, Z+1	; 0x01
    1ae0:	00 97       	sbiw	r24, 0x00	; 0
    1ae2:	d1 f6       	brne	.-76     	; 0x1a98 <LCD_sendCommand+0x108>
    1ae4:	27 c0       	rjmp	.+78     	; 0x1b34 <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae6:	8e 01       	movw	r16, r28
    1ae8:	07 5a       	subi	r16, 0xA7	; 167
    1aea:	1f 4f       	sbci	r17, 0xFF	; 255
    1aec:	fe 01       	movw	r30, r28
    1aee:	e5 5a       	subi	r30, 0xA5	; 165
    1af0:	ff 4f       	sbci	r31, 0xFF	; 255
    1af2:	60 81       	ld	r22, Z
    1af4:	71 81       	ldd	r23, Z+1	; 0x01
    1af6:	82 81       	ldd	r24, Z+2	; 0x02
    1af8:	93 81       	ldd	r25, Z+3	; 0x03
    1afa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1afe:	dc 01       	movw	r26, r24
    1b00:	cb 01       	movw	r24, r22
    1b02:	f8 01       	movw	r30, r16
    1b04:	91 83       	std	Z+1, r25	; 0x01
    1b06:	80 83       	st	Z, r24
    1b08:	de 01       	movw	r26, r28
    1b0a:	ab 5a       	subi	r26, 0xAB	; 171
    1b0c:	bf 4f       	sbci	r27, 0xFF	; 255
    1b0e:	fe 01       	movw	r30, r28
    1b10:	e7 5a       	subi	r30, 0xA7	; 167
    1b12:	ff 4f       	sbci	r31, 0xFF	; 255
    1b14:	80 81       	ld	r24, Z
    1b16:	91 81       	ldd	r25, Z+1	; 0x01
    1b18:	8d 93       	st	X+, r24
    1b1a:	9c 93       	st	X, r25
    1b1c:	fe 01       	movw	r30, r28
    1b1e:	eb 5a       	subi	r30, 0xAB	; 171
    1b20:	ff 4f       	sbci	r31, 0xFF	; 255
    1b22:	80 81       	ld	r24, Z
    1b24:	91 81       	ldd	r25, Z+1	; 0x01
    1b26:	01 97       	sbiw	r24, 0x01	; 1
    1b28:	f1 f7       	brne	.-4      	; 0x1b26 <LCD_sendCommand+0x196>
    1b2a:	fe 01       	movw	r30, r28
    1b2c:	eb 5a       	subi	r30, 0xAB	; 171
    1b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b30:	91 83       	std	Z+1, r25	; 0x01
    1b32:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1b34:	a2 e3       	ldi	r26, 0x32	; 50
    1b36:	b0 e0       	ldi	r27, 0x00	; 0
    1b38:	e2 e3       	ldi	r30, 0x32	; 50
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	80 64       	ori	r24, 0x40	; 64
    1b40:	8c 93       	st	X, r24
    1b42:	fe 01       	movw	r30, r28
    1b44:	ef 5a       	subi	r30, 0xAF	; 175
    1b46:	ff 4f       	sbci	r31, 0xFF	; 255
    1b48:	80 e0       	ldi	r24, 0x00	; 0
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	a0 e8       	ldi	r26, 0x80	; 128
    1b4e:	bf e3       	ldi	r27, 0x3F	; 63
    1b50:	80 83       	st	Z, r24
    1b52:	91 83       	std	Z+1, r25	; 0x01
    1b54:	a2 83       	std	Z+2, r26	; 0x02
    1b56:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b58:	8e 01       	movw	r16, r28
    1b5a:	03 5b       	subi	r16, 0xB3	; 179
    1b5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b5e:	fe 01       	movw	r30, r28
    1b60:	ef 5a       	subi	r30, 0xAF	; 175
    1b62:	ff 4f       	sbci	r31, 0xFF	; 255
    1b64:	60 81       	ld	r22, Z
    1b66:	71 81       	ldd	r23, Z+1	; 0x01
    1b68:	82 81       	ldd	r24, Z+2	; 0x02
    1b6a:	93 81       	ldd	r25, Z+3	; 0x03
    1b6c:	20 e0       	ldi	r18, 0x00	; 0
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	4a ef       	ldi	r20, 0xFA	; 250
    1b72:	54 e4       	ldi	r21, 0x44	; 68
    1b74:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b78:	dc 01       	movw	r26, r24
    1b7a:	cb 01       	movw	r24, r22
    1b7c:	f8 01       	movw	r30, r16
    1b7e:	80 83       	st	Z, r24
    1b80:	91 83       	std	Z+1, r25	; 0x01
    1b82:	a2 83       	std	Z+2, r26	; 0x02
    1b84:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b86:	fe 01       	movw	r30, r28
    1b88:	e3 5b       	subi	r30, 0xB3	; 179
    1b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8c:	60 81       	ld	r22, Z
    1b8e:	71 81       	ldd	r23, Z+1	; 0x01
    1b90:	82 81       	ldd	r24, Z+2	; 0x02
    1b92:	93 81       	ldd	r25, Z+3	; 0x03
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	40 e8       	ldi	r20, 0x80	; 128
    1b9a:	5f e3       	ldi	r21, 0x3F	; 63
    1b9c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ba0:	88 23       	and	r24, r24
    1ba2:	44 f4       	brge	.+16     	; 0x1bb4 <LCD_sendCommand+0x224>
		__ticks = 1;
    1ba4:	fe 01       	movw	r30, r28
    1ba6:	e5 5b       	subi	r30, 0xB5	; 181
    1ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	91 83       	std	Z+1, r25	; 0x01
    1bb0:	80 83       	st	Z, r24
    1bb2:	64 c0       	rjmp	.+200    	; 0x1c7c <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
    1bb4:	fe 01       	movw	r30, r28
    1bb6:	e3 5b       	subi	r30, 0xB3	; 179
    1bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bba:	60 81       	ld	r22, Z
    1bbc:	71 81       	ldd	r23, Z+1	; 0x01
    1bbe:	82 81       	ldd	r24, Z+2	; 0x02
    1bc0:	93 81       	ldd	r25, Z+3	; 0x03
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	3f ef       	ldi	r19, 0xFF	; 255
    1bc6:	4f e7       	ldi	r20, 0x7F	; 127
    1bc8:	57 e4       	ldi	r21, 0x47	; 71
    1bca:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1bce:	18 16       	cp	r1, r24
    1bd0:	0c f0       	brlt	.+2      	; 0x1bd4 <LCD_sendCommand+0x244>
    1bd2:	43 c0       	rjmp	.+134    	; 0x1c5a <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bd4:	fe 01       	movw	r30, r28
    1bd6:	ef 5a       	subi	r30, 0xAF	; 175
    1bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bda:	60 81       	ld	r22, Z
    1bdc:	71 81       	ldd	r23, Z+1	; 0x01
    1bde:	82 81       	ldd	r24, Z+2	; 0x02
    1be0:	93 81       	ldd	r25, Z+3	; 0x03
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	40 e2       	ldi	r20, 0x20	; 32
    1be8:	51 e4       	ldi	r21, 0x41	; 65
    1bea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	8e 01       	movw	r16, r28
    1bf4:	05 5b       	subi	r16, 0xB5	; 181
    1bf6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf8:	bc 01       	movw	r22, r24
    1bfa:	cd 01       	movw	r24, r26
    1bfc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c00:	dc 01       	movw	r26, r24
    1c02:	cb 01       	movw	r24, r22
    1c04:	f8 01       	movw	r30, r16
    1c06:	91 83       	std	Z+1, r25	; 0x01
    1c08:	80 83       	st	Z, r24
    1c0a:	1f c0       	rjmp	.+62     	; 0x1c4a <LCD_sendCommand+0x2ba>
    1c0c:	fe 01       	movw	r30, r28
    1c0e:	e7 5b       	subi	r30, 0xB7	; 183
    1c10:	ff 4f       	sbci	r31, 0xFF	; 255
    1c12:	88 ec       	ldi	r24, 0xC8	; 200
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	91 83       	std	Z+1, r25	; 0x01
    1c18:	80 83       	st	Z, r24
    1c1a:	fe 01       	movw	r30, r28
    1c1c:	e7 5b       	subi	r30, 0xB7	; 183
    1c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c20:	80 81       	ld	r24, Z
    1c22:	91 81       	ldd	r25, Z+1	; 0x01
    1c24:	01 97       	sbiw	r24, 0x01	; 1
    1c26:	f1 f7       	brne	.-4      	; 0x1c24 <LCD_sendCommand+0x294>
    1c28:	fe 01       	movw	r30, r28
    1c2a:	e7 5b       	subi	r30, 0xB7	; 183
    1c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2e:	91 83       	std	Z+1, r25	; 0x01
    1c30:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c32:	de 01       	movw	r26, r28
    1c34:	a5 5b       	subi	r26, 0xB5	; 181
    1c36:	bf 4f       	sbci	r27, 0xFF	; 255
    1c38:	fe 01       	movw	r30, r28
    1c3a:	e5 5b       	subi	r30, 0xB5	; 181
    1c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3e:	80 81       	ld	r24, Z
    1c40:	91 81       	ldd	r25, Z+1	; 0x01
    1c42:	01 97       	sbiw	r24, 0x01	; 1
    1c44:	11 96       	adiw	r26, 0x01	; 1
    1c46:	9c 93       	st	X, r25
    1c48:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c4a:	fe 01       	movw	r30, r28
    1c4c:	e5 5b       	subi	r30, 0xB5	; 181
    1c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c50:	80 81       	ld	r24, Z
    1c52:	91 81       	ldd	r25, Z+1	; 0x01
    1c54:	00 97       	sbiw	r24, 0x00	; 0
    1c56:	d1 f6       	brne	.-76     	; 0x1c0c <LCD_sendCommand+0x27c>
    1c58:	27 c0       	rjmp	.+78     	; 0x1ca8 <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c5a:	8e 01       	movw	r16, r28
    1c5c:	05 5b       	subi	r16, 0xB5	; 181
    1c5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c60:	fe 01       	movw	r30, r28
    1c62:	e3 5b       	subi	r30, 0xB3	; 179
    1c64:	ff 4f       	sbci	r31, 0xFF	; 255
    1c66:	60 81       	ld	r22, Z
    1c68:	71 81       	ldd	r23, Z+1	; 0x01
    1c6a:	82 81       	ldd	r24, Z+2	; 0x02
    1c6c:	93 81       	ldd	r25, Z+3	; 0x03
    1c6e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c72:	dc 01       	movw	r26, r24
    1c74:	cb 01       	movw	r24, r22
    1c76:	f8 01       	movw	r30, r16
    1c78:	91 83       	std	Z+1, r25	; 0x01
    1c7a:	80 83       	st	Z, r24
    1c7c:	de 01       	movw	r26, r28
    1c7e:	a9 5b       	subi	r26, 0xB9	; 185
    1c80:	bf 4f       	sbci	r27, 0xFF	; 255
    1c82:	fe 01       	movw	r30, r28
    1c84:	e5 5b       	subi	r30, 0xB5	; 181
    1c86:	ff 4f       	sbci	r31, 0xFF	; 255
    1c88:	80 81       	ld	r24, Z
    1c8a:	91 81       	ldd	r25, Z+1	; 0x01
    1c8c:	8d 93       	st	X+, r24
    1c8e:	9c 93       	st	X, r25
    1c90:	fe 01       	movw	r30, r28
    1c92:	e9 5b       	subi	r30, 0xB9	; 185
    1c94:	ff 4f       	sbci	r31, 0xFF	; 255
    1c96:	80 81       	ld	r24, Z
    1c98:	91 81       	ldd	r25, Z+1	; 0x01
    1c9a:	01 97       	sbiw	r24, 0x01	; 1
    1c9c:	f1 f7       	brne	.-4      	; 0x1c9a <LCD_sendCommand+0x30a>
    1c9e:	fe 01       	movw	r30, r28
    1ca0:	e9 5b       	subi	r30, 0xB9	; 185
    1ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca4:	91 83       	std	Z+1, r25	; 0x01
    1ca6:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	#if (DATA_BITS_MODE == 4)
		/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT = (command & 0xF0); 
    1ca8:	a5 e3       	ldi	r26, 0x35	; 53
    1caa:	b0 e0       	ldi	r27, 0x00	; 0
    1cac:	fe 01       	movw	r30, r28
    1cae:	ed 59       	subi	r30, 0x9D	; 157
    1cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb2:	80 81       	ld	r24, Z
    1cb4:	80 7f       	andi	r24, 0xF0	; 240
    1cb6:	8c 93       	st	X, r24
    1cb8:	fe 01       	movw	r30, r28
    1cba:	ed 5b       	subi	r30, 0xBD	; 189
    1cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbe:	80 e0       	ldi	r24, 0x00	; 0
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	a0 e8       	ldi	r26, 0x80	; 128
    1cc4:	bf e3       	ldi	r27, 0x3F	; 63
    1cc6:	80 83       	st	Z, r24
    1cc8:	91 83       	std	Z+1, r25	; 0x01
    1cca:	a2 83       	std	Z+2, r26	; 0x02
    1ccc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cce:	8e 01       	movw	r16, r28
    1cd0:	01 5c       	subi	r16, 0xC1	; 193
    1cd2:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd4:	fe 01       	movw	r30, r28
    1cd6:	ed 5b       	subi	r30, 0xBD	; 189
    1cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cda:	60 81       	ld	r22, Z
    1cdc:	71 81       	ldd	r23, Z+1	; 0x01
    1cde:	82 81       	ldd	r24, Z+2	; 0x02
    1ce0:	93 81       	ldd	r25, Z+3	; 0x03
    1ce2:	20 e0       	ldi	r18, 0x00	; 0
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	4a ef       	ldi	r20, 0xFA	; 250
    1ce8:	54 e4       	ldi	r21, 0x44	; 68
    1cea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	f8 01       	movw	r30, r16
    1cf4:	80 83       	st	Z, r24
    1cf6:	91 83       	std	Z+1, r25	; 0x01
    1cf8:	a2 83       	std	Z+2, r26	; 0x02
    1cfa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cfc:	fe 01       	movw	r30, r28
    1cfe:	ff 96       	adiw	r30, 0x3f	; 63
    1d00:	60 81       	ld	r22, Z
    1d02:	71 81       	ldd	r23, Z+1	; 0x01
    1d04:	82 81       	ldd	r24, Z+2	; 0x02
    1d06:	93 81       	ldd	r25, Z+3	; 0x03
    1d08:	20 e0       	ldi	r18, 0x00	; 0
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	40 e8       	ldi	r20, 0x80	; 128
    1d0e:	5f e3       	ldi	r21, 0x3F	; 63
    1d10:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d14:	88 23       	and	r24, r24
    1d16:	2c f4       	brge	.+10     	; 0x1d22 <LCD_sendCommand+0x392>
		__ticks = 1;
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	9e af       	std	Y+62, r25	; 0x3e
    1d1e:	8d af       	std	Y+61, r24	; 0x3d
    1d20:	46 c0       	rjmp	.+140    	; 0x1dae <LCD_sendCommand+0x41e>
	else if (__tmp > 65535)
    1d22:	fe 01       	movw	r30, r28
    1d24:	ff 96       	adiw	r30, 0x3f	; 63
    1d26:	60 81       	ld	r22, Z
    1d28:	71 81       	ldd	r23, Z+1	; 0x01
    1d2a:	82 81       	ldd	r24, Z+2	; 0x02
    1d2c:	93 81       	ldd	r25, Z+3	; 0x03
    1d2e:	20 e0       	ldi	r18, 0x00	; 0
    1d30:	3f ef       	ldi	r19, 0xFF	; 255
    1d32:	4f e7       	ldi	r20, 0x7F	; 127
    1d34:	57 e4       	ldi	r21, 0x47	; 71
    1d36:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d3a:	18 16       	cp	r1, r24
    1d3c:	64 f5       	brge	.+88     	; 0x1d96 <LCD_sendCommand+0x406>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d3e:	fe 01       	movw	r30, r28
    1d40:	ed 5b       	subi	r30, 0xBD	; 189
    1d42:	ff 4f       	sbci	r31, 0xFF	; 255
    1d44:	60 81       	ld	r22, Z
    1d46:	71 81       	ldd	r23, Z+1	; 0x01
    1d48:	82 81       	ldd	r24, Z+2	; 0x02
    1d4a:	93 81       	ldd	r25, Z+3	; 0x03
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	40 e2       	ldi	r20, 0x20	; 32
    1d52:	51 e4       	ldi	r21, 0x41	; 65
    1d54:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d58:	dc 01       	movw	r26, r24
    1d5a:	cb 01       	movw	r24, r22
    1d5c:	bc 01       	movw	r22, r24
    1d5e:	cd 01       	movw	r24, r26
    1d60:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d64:	dc 01       	movw	r26, r24
    1d66:	cb 01       	movw	r24, r22
    1d68:	9e af       	std	Y+62, r25	; 0x3e
    1d6a:	8d af       	std	Y+61, r24	; 0x3d
    1d6c:	0f c0       	rjmp	.+30     	; 0x1d8c <LCD_sendCommand+0x3fc>
    1d6e:	88 ec       	ldi	r24, 0xC8	; 200
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	9c af       	std	Y+60, r25	; 0x3c
    1d74:	8b af       	std	Y+59, r24	; 0x3b
    1d76:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d78:	9c ad       	ldd	r25, Y+60	; 0x3c
    1d7a:	01 97       	sbiw	r24, 0x01	; 1
    1d7c:	f1 f7       	brne	.-4      	; 0x1d7a <LCD_sendCommand+0x3ea>
    1d7e:	9c af       	std	Y+60, r25	; 0x3c
    1d80:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d82:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d84:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d86:	01 97       	sbiw	r24, 0x01	; 1
    1d88:	9e af       	std	Y+62, r25	; 0x3e
    1d8a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d8c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d8e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d90:	00 97       	sbiw	r24, 0x00	; 0
    1d92:	69 f7       	brne	.-38     	; 0x1d6e <LCD_sendCommand+0x3de>
    1d94:	16 c0       	rjmp	.+44     	; 0x1dc2 <LCD_sendCommand+0x432>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d96:	fe 01       	movw	r30, r28
    1d98:	ff 96       	adiw	r30, 0x3f	; 63
    1d9a:	60 81       	ld	r22, Z
    1d9c:	71 81       	ldd	r23, Z+1	; 0x01
    1d9e:	82 81       	ldd	r24, Z+2	; 0x02
    1da0:	93 81       	ldd	r25, Z+3	; 0x03
    1da2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1da6:	dc 01       	movw	r26, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	9e af       	std	Y+62, r25	; 0x3e
    1dac:	8d af       	std	Y+61, r24	; 0x3d
    1dae:	8d ad       	ldd	r24, Y+61	; 0x3d
    1db0:	9e ad       	ldd	r25, Y+62	; 0x3e
    1db2:	9a af       	std	Y+58, r25	; 0x3a
    1db4:	89 af       	std	Y+57, r24	; 0x39
    1db6:	89 ad       	ldd	r24, Y+57	; 0x39
    1db8:	9a ad       	ldd	r25, Y+58	; 0x3a
    1dba:	01 97       	sbiw	r24, 0x01	; 1
    1dbc:	f1 f7       	brne	.-4      	; 0x1dba <LCD_sendCommand+0x42a>
    1dbe:	9a af       	std	Y+58, r25	; 0x3a
    1dc0:	89 af       	std	Y+57, r24	; 0x39
		#else 
			LCD_DATA_PORT = ((command >> 4) & 0x0F);
		#endif
			
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1dc2:	a2 e3       	ldi	r26, 0x32	; 50
    1dc4:	b0 e0       	ldi	r27, 0x00	; 0
    1dc6:	e2 e3       	ldi	r30, 0x32	; 50
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	80 81       	ld	r24, Z
    1dcc:	8f 7b       	andi	r24, 0xBF	; 191
    1dce:	8c 93       	st	X, r24
    1dd0:	80 e0       	ldi	r24, 0x00	; 0
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	a0 e8       	ldi	r26, 0x80	; 128
    1dd6:	bf e3       	ldi	r27, 0x3F	; 63
    1dd8:	8d ab       	std	Y+53, r24	; 0x35
    1dda:	9e ab       	std	Y+54, r25	; 0x36
    1ddc:	af ab       	std	Y+55, r26	; 0x37
    1dde:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de0:	6d a9       	ldd	r22, Y+53	; 0x35
    1de2:	7e a9       	ldd	r23, Y+54	; 0x36
    1de4:	8f a9       	ldd	r24, Y+55	; 0x37
    1de6:	98 ad       	ldd	r25, Y+56	; 0x38
    1de8:	20 e0       	ldi	r18, 0x00	; 0
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	4a ef       	ldi	r20, 0xFA	; 250
    1dee:	54 e4       	ldi	r21, 0x44	; 68
    1df0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1df4:	dc 01       	movw	r26, r24
    1df6:	cb 01       	movw	r24, r22
    1df8:	89 ab       	std	Y+49, r24	; 0x31
    1dfa:	9a ab       	std	Y+50, r25	; 0x32
    1dfc:	ab ab       	std	Y+51, r26	; 0x33
    1dfe:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e00:	69 a9       	ldd	r22, Y+49	; 0x31
    1e02:	7a a9       	ldd	r23, Y+50	; 0x32
    1e04:	8b a9       	ldd	r24, Y+51	; 0x33
    1e06:	9c a9       	ldd	r25, Y+52	; 0x34
    1e08:	20 e0       	ldi	r18, 0x00	; 0
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	40 e8       	ldi	r20, 0x80	; 128
    1e0e:	5f e3       	ldi	r21, 0x3F	; 63
    1e10:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e14:	88 23       	and	r24, r24
    1e16:	2c f4       	brge	.+10     	; 0x1e22 <LCD_sendCommand+0x492>
		__ticks = 1;
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	98 ab       	std	Y+48, r25	; 0x30
    1e1e:	8f a7       	std	Y+47, r24	; 0x2f
    1e20:	3f c0       	rjmp	.+126    	; 0x1ea0 <LCD_sendCommand+0x510>
	else if (__tmp > 65535)
    1e22:	69 a9       	ldd	r22, Y+49	; 0x31
    1e24:	7a a9       	ldd	r23, Y+50	; 0x32
    1e26:	8b a9       	ldd	r24, Y+51	; 0x33
    1e28:	9c a9       	ldd	r25, Y+52	; 0x34
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
    1e2c:	3f ef       	ldi	r19, 0xFF	; 255
    1e2e:	4f e7       	ldi	r20, 0x7F	; 127
    1e30:	57 e4       	ldi	r21, 0x47	; 71
    1e32:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e36:	18 16       	cp	r1, r24
    1e38:	4c f5       	brge	.+82     	; 0x1e8c <LCD_sendCommand+0x4fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e3a:	6d a9       	ldd	r22, Y+53	; 0x35
    1e3c:	7e a9       	ldd	r23, Y+54	; 0x36
    1e3e:	8f a9       	ldd	r24, Y+55	; 0x37
    1e40:	98 ad       	ldd	r25, Y+56	; 0x38
    1e42:	20 e0       	ldi	r18, 0x00	; 0
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	40 e2       	ldi	r20, 0x20	; 32
    1e48:	51 e4       	ldi	r21, 0x41	; 65
    1e4a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	cb 01       	movw	r24, r22
    1e52:	bc 01       	movw	r22, r24
    1e54:	cd 01       	movw	r24, r26
    1e56:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e5a:	dc 01       	movw	r26, r24
    1e5c:	cb 01       	movw	r24, r22
    1e5e:	98 ab       	std	Y+48, r25	; 0x30
    1e60:	8f a7       	std	Y+47, r24	; 0x2f
    1e62:	0f c0       	rjmp	.+30     	; 0x1e82 <LCD_sendCommand+0x4f2>
    1e64:	88 ec       	ldi	r24, 0xC8	; 200
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	9e a7       	std	Y+46, r25	; 0x2e
    1e6a:	8d a7       	std	Y+45, r24	; 0x2d
    1e6c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e6e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e70:	01 97       	sbiw	r24, 0x01	; 1
    1e72:	f1 f7       	brne	.-4      	; 0x1e70 <LCD_sendCommand+0x4e0>
    1e74:	9e a7       	std	Y+46, r25	; 0x2e
    1e76:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e78:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e7a:	98 a9       	ldd	r25, Y+48	; 0x30
    1e7c:	01 97       	sbiw	r24, 0x01	; 1
    1e7e:	98 ab       	std	Y+48, r25	; 0x30
    1e80:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e82:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e84:	98 a9       	ldd	r25, Y+48	; 0x30
    1e86:	00 97       	sbiw	r24, 0x00	; 0
    1e88:	69 f7       	brne	.-38     	; 0x1e64 <LCD_sendCommand+0x4d4>
    1e8a:	14 c0       	rjmp	.+40     	; 0x1eb4 <LCD_sendCommand+0x524>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e8c:	69 a9       	ldd	r22, Y+49	; 0x31
    1e8e:	7a a9       	ldd	r23, Y+50	; 0x32
    1e90:	8b a9       	ldd	r24, Y+51	; 0x33
    1e92:	9c a9       	ldd	r25, Y+52	; 0x34
    1e94:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e98:	dc 01       	movw	r26, r24
    1e9a:	cb 01       	movw	r24, r22
    1e9c:	98 ab       	std	Y+48, r25	; 0x30
    1e9e:	8f a7       	std	Y+47, r24	; 0x2f
    1ea0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ea2:	98 a9       	ldd	r25, Y+48	; 0x30
    1ea4:	9c a7       	std	Y+44, r25	; 0x2c
    1ea6:	8b a7       	std	Y+43, r24	; 0x2b
    1ea8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1eaa:	9c a5       	ldd	r25, Y+44	; 0x2c
    1eac:	01 97       	sbiw	r24, 0x01	; 1
    1eae:	f1 f7       	brne	.-4      	; 0x1eac <LCD_sendCommand+0x51c>
    1eb0:	9c a7       	std	Y+44, r25	; 0x2c
    1eb2:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1); /* delay for processing Th = 13ns */
		SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1eb4:	a2 e3       	ldi	r26, 0x32	; 50
    1eb6:	b0 e0       	ldi	r27, 0x00	; 0
    1eb8:	e2 e3       	ldi	r30, 0x32	; 50
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	80 81       	ld	r24, Z
    1ebe:	80 64       	ori	r24, 0x40	; 64
    1ec0:	8c 93       	st	X, r24
    1ec2:	80 e0       	ldi	r24, 0x00	; 0
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	a0 e8       	ldi	r26, 0x80	; 128
    1ec8:	bf e3       	ldi	r27, 0x3F	; 63
    1eca:	8f a3       	std	Y+39, r24	; 0x27
    1ecc:	98 a7       	std	Y+40, r25	; 0x28
    1ece:	a9 a7       	std	Y+41, r26	; 0x29
    1ed0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ed2:	6f a1       	ldd	r22, Y+39	; 0x27
    1ed4:	78 a5       	ldd	r23, Y+40	; 0x28
    1ed6:	89 a5       	ldd	r24, Y+41	; 0x29
    1ed8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	4a ef       	ldi	r20, 0xFA	; 250
    1ee0:	54 e4       	ldi	r21, 0x44	; 68
    1ee2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ee6:	dc 01       	movw	r26, r24
    1ee8:	cb 01       	movw	r24, r22
    1eea:	8b a3       	std	Y+35, r24	; 0x23
    1eec:	9c a3       	std	Y+36, r25	; 0x24
    1eee:	ad a3       	std	Y+37, r26	; 0x25
    1ef0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ef2:	6b a1       	ldd	r22, Y+35	; 0x23
    1ef4:	7c a1       	ldd	r23, Y+36	; 0x24
    1ef6:	8d a1       	ldd	r24, Y+37	; 0x25
    1ef8:	9e a1       	ldd	r25, Y+38	; 0x26
    1efa:	20 e0       	ldi	r18, 0x00	; 0
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	40 e8       	ldi	r20, 0x80	; 128
    1f00:	5f e3       	ldi	r21, 0x3F	; 63
    1f02:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f06:	88 23       	and	r24, r24
    1f08:	2c f4       	brge	.+10     	; 0x1f14 <LCD_sendCommand+0x584>
		__ticks = 1;
    1f0a:	81 e0       	ldi	r24, 0x01	; 1
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	9a a3       	std	Y+34, r25	; 0x22
    1f10:	89 a3       	std	Y+33, r24	; 0x21
    1f12:	3f c0       	rjmp	.+126    	; 0x1f92 <LCD_sendCommand+0x602>
	else if (__tmp > 65535)
    1f14:	6b a1       	ldd	r22, Y+35	; 0x23
    1f16:	7c a1       	ldd	r23, Y+36	; 0x24
    1f18:	8d a1       	ldd	r24, Y+37	; 0x25
    1f1a:	9e a1       	ldd	r25, Y+38	; 0x26
    1f1c:	20 e0       	ldi	r18, 0x00	; 0
    1f1e:	3f ef       	ldi	r19, 0xFF	; 255
    1f20:	4f e7       	ldi	r20, 0x7F	; 127
    1f22:	57 e4       	ldi	r21, 0x47	; 71
    1f24:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f28:	18 16       	cp	r1, r24
    1f2a:	4c f5       	brge	.+82     	; 0x1f7e <LCD_sendCommand+0x5ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f2c:	6f a1       	ldd	r22, Y+39	; 0x27
    1f2e:	78 a5       	ldd	r23, Y+40	; 0x28
    1f30:	89 a5       	ldd	r24, Y+41	; 0x29
    1f32:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	40 e2       	ldi	r20, 0x20	; 32
    1f3a:	51 e4       	ldi	r21, 0x41	; 65
    1f3c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f40:	dc 01       	movw	r26, r24
    1f42:	cb 01       	movw	r24, r22
    1f44:	bc 01       	movw	r22, r24
    1f46:	cd 01       	movw	r24, r26
    1f48:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	9a a3       	std	Y+34, r25	; 0x22
    1f52:	89 a3       	std	Y+33, r24	; 0x21
    1f54:	0f c0       	rjmp	.+30     	; 0x1f74 <LCD_sendCommand+0x5e4>
    1f56:	88 ec       	ldi	r24, 0xC8	; 200
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	98 a3       	std	Y+32, r25	; 0x20
    1f5c:	8f 8f       	std	Y+31, r24	; 0x1f
    1f5e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f60:	98 a1       	ldd	r25, Y+32	; 0x20
    1f62:	01 97       	sbiw	r24, 0x01	; 1
    1f64:	f1 f7       	brne	.-4      	; 0x1f62 <LCD_sendCommand+0x5d2>
    1f66:	98 a3       	std	Y+32, r25	; 0x20
    1f68:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f6a:	89 a1       	ldd	r24, Y+33	; 0x21
    1f6c:	9a a1       	ldd	r25, Y+34	; 0x22
    1f6e:	01 97       	sbiw	r24, 0x01	; 1
    1f70:	9a a3       	std	Y+34, r25	; 0x22
    1f72:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f74:	89 a1       	ldd	r24, Y+33	; 0x21
    1f76:	9a a1       	ldd	r25, Y+34	; 0x22
    1f78:	00 97       	sbiw	r24, 0x00	; 0
    1f7a:	69 f7       	brne	.-38     	; 0x1f56 <LCD_sendCommand+0x5c6>
    1f7c:	14 c0       	rjmp	.+40     	; 0x1fa6 <LCD_sendCommand+0x616>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f7e:	6b a1       	ldd	r22, Y+35	; 0x23
    1f80:	7c a1       	ldd	r23, Y+36	; 0x24
    1f82:	8d a1       	ldd	r24, Y+37	; 0x25
    1f84:	9e a1       	ldd	r25, Y+38	; 0x26
    1f86:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f8a:	dc 01       	movw	r26, r24
    1f8c:	cb 01       	movw	r24, r22
    1f8e:	9a a3       	std	Y+34, r25	; 0x22
    1f90:	89 a3       	std	Y+33, r24	; 0x21
    1f92:	89 a1       	ldd	r24, Y+33	; 0x21
    1f94:	9a a1       	ldd	r25, Y+34	; 0x22
    1f96:	9e 8f       	std	Y+30, r25	; 0x1e
    1f98:	8d 8f       	std	Y+29, r24	; 0x1d
    1f9a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f9c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f9e:	01 97       	sbiw	r24, 0x01	; 1
    1fa0:	f1 f7       	brne	.-4      	; 0x1f9e <LCD_sendCommand+0x60e>
    1fa2:	9e 8f       	std	Y+30, r25	; 0x1e
    1fa4:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
		
		/* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT = (command << 4) & 0xF0; 
    1fa6:	a5 e3       	ldi	r26, 0x35	; 53
    1fa8:	b0 e0       	ldi	r27, 0x00	; 0
    1faa:	fe 01       	movw	r30, r28
    1fac:	ed 59       	subi	r30, 0x9D	; 157
    1fae:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb0:	80 81       	ld	r24, Z
    1fb2:	88 2f       	mov	r24, r24
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	82 95       	swap	r24
    1fb8:	92 95       	swap	r25
    1fba:	90 7f       	andi	r25, 0xF0	; 240
    1fbc:	98 27       	eor	r25, r24
    1fbe:	80 7f       	andi	r24, 0xF0	; 240
    1fc0:	98 27       	eor	r25, r24
    1fc2:	8c 93       	st	X, r24
    1fc4:	80 e0       	ldi	r24, 0x00	; 0
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	a0 e8       	ldi	r26, 0x80	; 128
    1fca:	bf e3       	ldi	r27, 0x3F	; 63
    1fcc:	89 8f       	std	Y+25, r24	; 0x19
    1fce:	9a 8f       	std	Y+26, r25	; 0x1a
    1fd0:	ab 8f       	std	Y+27, r26	; 0x1b
    1fd2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd4:	69 8d       	ldd	r22, Y+25	; 0x19
    1fd6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fd8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fda:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	4a ef       	ldi	r20, 0xFA	; 250
    1fe2:	54 e4       	ldi	r21, 0x44	; 68
    1fe4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fe8:	dc 01       	movw	r26, r24
    1fea:	cb 01       	movw	r24, r22
    1fec:	8d 8b       	std	Y+21, r24	; 0x15
    1fee:	9e 8b       	std	Y+22, r25	; 0x16
    1ff0:	af 8b       	std	Y+23, r26	; 0x17
    1ff2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ff4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ff6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ff8:	8f 89       	ldd	r24, Y+23	; 0x17
    1ffa:	98 8d       	ldd	r25, Y+24	; 0x18
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	40 e8       	ldi	r20, 0x80	; 128
    2002:	5f e3       	ldi	r21, 0x3F	; 63
    2004:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2008:	88 23       	and	r24, r24
    200a:	2c f4       	brge	.+10     	; 0x2016 <LCD_sendCommand+0x686>
		__ticks = 1;
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	9c 8b       	std	Y+20, r25	; 0x14
    2012:	8b 8b       	std	Y+19, r24	; 0x13
    2014:	3f c0       	rjmp	.+126    	; 0x2094 <LCD_sendCommand+0x704>
	else if (__tmp > 65535)
    2016:	6d 89       	ldd	r22, Y+21	; 0x15
    2018:	7e 89       	ldd	r23, Y+22	; 0x16
    201a:	8f 89       	ldd	r24, Y+23	; 0x17
    201c:	98 8d       	ldd	r25, Y+24	; 0x18
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	3f ef       	ldi	r19, 0xFF	; 255
    2022:	4f e7       	ldi	r20, 0x7F	; 127
    2024:	57 e4       	ldi	r21, 0x47	; 71
    2026:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    202a:	18 16       	cp	r1, r24
    202c:	4c f5       	brge	.+82     	; 0x2080 <LCD_sendCommand+0x6f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    202e:	69 8d       	ldd	r22, Y+25	; 0x19
    2030:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2032:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2034:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2036:	20 e0       	ldi	r18, 0x00	; 0
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	40 e2       	ldi	r20, 0x20	; 32
    203c:	51 e4       	ldi	r21, 0x41	; 65
    203e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2042:	dc 01       	movw	r26, r24
    2044:	cb 01       	movw	r24, r22
    2046:	bc 01       	movw	r22, r24
    2048:	cd 01       	movw	r24, r26
    204a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    204e:	dc 01       	movw	r26, r24
    2050:	cb 01       	movw	r24, r22
    2052:	9c 8b       	std	Y+20, r25	; 0x14
    2054:	8b 8b       	std	Y+19, r24	; 0x13
    2056:	0f c0       	rjmp	.+30     	; 0x2076 <LCD_sendCommand+0x6e6>
    2058:	88 ec       	ldi	r24, 0xC8	; 200
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	9a 8b       	std	Y+18, r25	; 0x12
    205e:	89 8b       	std	Y+17, r24	; 0x11
    2060:	89 89       	ldd	r24, Y+17	; 0x11
    2062:	9a 89       	ldd	r25, Y+18	; 0x12
    2064:	01 97       	sbiw	r24, 0x01	; 1
    2066:	f1 f7       	brne	.-4      	; 0x2064 <LCD_sendCommand+0x6d4>
    2068:	9a 8b       	std	Y+18, r25	; 0x12
    206a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    206c:	8b 89       	ldd	r24, Y+19	; 0x13
    206e:	9c 89       	ldd	r25, Y+20	; 0x14
    2070:	01 97       	sbiw	r24, 0x01	; 1
    2072:	9c 8b       	std	Y+20, r25	; 0x14
    2074:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2076:	8b 89       	ldd	r24, Y+19	; 0x13
    2078:	9c 89       	ldd	r25, Y+20	; 0x14
    207a:	00 97       	sbiw	r24, 0x00	; 0
    207c:	69 f7       	brne	.-38     	; 0x2058 <LCD_sendCommand+0x6c8>
    207e:	14 c0       	rjmp	.+40     	; 0x20a8 <LCD_sendCommand+0x718>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2080:	6d 89       	ldd	r22, Y+21	; 0x15
    2082:	7e 89       	ldd	r23, Y+22	; 0x16
    2084:	8f 89       	ldd	r24, Y+23	; 0x17
    2086:	98 8d       	ldd	r25, Y+24	; 0x18
    2088:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    208c:	dc 01       	movw	r26, r24
    208e:	cb 01       	movw	r24, r22
    2090:	9c 8b       	std	Y+20, r25	; 0x14
    2092:	8b 8b       	std	Y+19, r24	; 0x13
    2094:	8b 89       	ldd	r24, Y+19	; 0x13
    2096:	9c 89       	ldd	r25, Y+20	; 0x14
    2098:	98 8b       	std	Y+16, r25	; 0x10
    209a:	8f 87       	std	Y+15, r24	; 0x0f
    209c:	8f 85       	ldd	r24, Y+15	; 0x0f
    209e:	98 89       	ldd	r25, Y+16	; 0x10
    20a0:	01 97       	sbiw	r24, 0x01	; 1
    20a2:	f1 f7       	brne	.-4      	; 0x20a0 <LCD_sendCommand+0x710>
    20a4:	98 8b       	std	Y+16, r25	; 0x10
    20a6:	8f 87       	std	Y+15, r24	; 0x0f
		#else 
			LCD_DATA_PORT = (command & 0x0F);
		#endif
		
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    20a8:	a2 e3       	ldi	r26, 0x32	; 50
    20aa:	b0 e0       	ldi	r27, 0x00	; 0
    20ac:	e2 e3       	ldi	r30, 0x32	; 50
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	80 81       	ld	r24, Z
    20b2:	8f 7b       	andi	r24, 0xBF	; 191
    20b4:	8c 93       	st	X, r24
    20b6:	80 e0       	ldi	r24, 0x00	; 0
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	a0 e8       	ldi	r26, 0x80	; 128
    20bc:	bf e3       	ldi	r27, 0x3F	; 63
    20be:	8b 87       	std	Y+11, r24	; 0x0b
    20c0:	9c 87       	std	Y+12, r25	; 0x0c
    20c2:	ad 87       	std	Y+13, r26	; 0x0d
    20c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    20c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    20ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    20cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	4a ef       	ldi	r20, 0xFA	; 250
    20d4:	54 e4       	ldi	r21, 0x44	; 68
    20d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20da:	dc 01       	movw	r26, r24
    20dc:	cb 01       	movw	r24, r22
    20de:	8f 83       	std	Y+7, r24	; 0x07
    20e0:	98 87       	std	Y+8, r25	; 0x08
    20e2:	a9 87       	std	Y+9, r26	; 0x09
    20e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20e6:	6f 81       	ldd	r22, Y+7	; 0x07
    20e8:	78 85       	ldd	r23, Y+8	; 0x08
    20ea:	89 85       	ldd	r24, Y+9	; 0x09
    20ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	40 e8       	ldi	r20, 0x80	; 128
    20f4:	5f e3       	ldi	r21, 0x3F	; 63
    20f6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    20fa:	88 23       	and	r24, r24
    20fc:	2c f4       	brge	.+10     	; 0x2108 <LCD_sendCommand+0x778>
		__ticks = 1;
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	9e 83       	std	Y+6, r25	; 0x06
    2104:	8d 83       	std	Y+5, r24	; 0x05
    2106:	3f c0       	rjmp	.+126    	; 0x2186 <LCD_sendCommand+0x7f6>
	else if (__tmp > 65535)
    2108:	6f 81       	ldd	r22, Y+7	; 0x07
    210a:	78 85       	ldd	r23, Y+8	; 0x08
    210c:	89 85       	ldd	r24, Y+9	; 0x09
    210e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	3f ef       	ldi	r19, 0xFF	; 255
    2114:	4f e7       	ldi	r20, 0x7F	; 127
    2116:	57 e4       	ldi	r21, 0x47	; 71
    2118:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    211c:	18 16       	cp	r1, r24
    211e:	4c f5       	brge	.+82     	; 0x2172 <LCD_sendCommand+0x7e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2120:	6b 85       	ldd	r22, Y+11	; 0x0b
    2122:	7c 85       	ldd	r23, Y+12	; 0x0c
    2124:	8d 85       	ldd	r24, Y+13	; 0x0d
    2126:	9e 85       	ldd	r25, Y+14	; 0x0e
    2128:	20 e0       	ldi	r18, 0x00	; 0
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	40 e2       	ldi	r20, 0x20	; 32
    212e:	51 e4       	ldi	r21, 0x41	; 65
    2130:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	bc 01       	movw	r22, r24
    213a:	cd 01       	movw	r24, r26
    213c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2140:	dc 01       	movw	r26, r24
    2142:	cb 01       	movw	r24, r22
    2144:	9e 83       	std	Y+6, r25	; 0x06
    2146:	8d 83       	std	Y+5, r24	; 0x05
    2148:	0f c0       	rjmp	.+30     	; 0x2168 <LCD_sendCommand+0x7d8>
    214a:	88 ec       	ldi	r24, 0xC8	; 200
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	9c 83       	std	Y+4, r25	; 0x04
    2150:	8b 83       	std	Y+3, r24	; 0x03
    2152:	8b 81       	ldd	r24, Y+3	; 0x03
    2154:	9c 81       	ldd	r25, Y+4	; 0x04
    2156:	01 97       	sbiw	r24, 0x01	; 1
    2158:	f1 f7       	brne	.-4      	; 0x2156 <LCD_sendCommand+0x7c6>
    215a:	9c 83       	std	Y+4, r25	; 0x04
    215c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    215e:	8d 81       	ldd	r24, Y+5	; 0x05
    2160:	9e 81       	ldd	r25, Y+6	; 0x06
    2162:	01 97       	sbiw	r24, 0x01	; 1
    2164:	9e 83       	std	Y+6, r25	; 0x06
    2166:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2168:	8d 81       	ldd	r24, Y+5	; 0x05
    216a:	9e 81       	ldd	r25, Y+6	; 0x06
    216c:	00 97       	sbiw	r24, 0x00	; 0
    216e:	69 f7       	brne	.-38     	; 0x214a <LCD_sendCommand+0x7ba>
    2170:	14 c0       	rjmp	.+40     	; 0x219a <LCD_sendCommand+0x80a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2172:	6f 81       	ldd	r22, Y+7	; 0x07
    2174:	78 85       	ldd	r23, Y+8	; 0x08
    2176:	89 85       	ldd	r24, Y+9	; 0x09
    2178:	9a 85       	ldd	r25, Y+10	; 0x0a
    217a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    217e:	dc 01       	movw	r26, r24
    2180:	cb 01       	movw	r24, r22
    2182:	9e 83       	std	Y+6, r25	; 0x06
    2184:	8d 83       	std	Y+5, r24	; 0x05
    2186:	8d 81       	ldd	r24, Y+5	; 0x05
    2188:	9e 81       	ldd	r25, Y+6	; 0x06
    218a:	9a 83       	std	Y+2, r25	; 0x02
    218c:	89 83       	std	Y+1, r24	; 0x01
    218e:	89 81       	ldd	r24, Y+1	; 0x01
    2190:	9a 81       	ldd	r25, Y+2	; 0x02
    2192:	01 97       	sbiw	r24, 0x01	; 1
    2194:	f1 f7       	brne	.-4      	; 0x2192 <LCD_sendCommand+0x802>
    2196:	9a 83       	std	Y+2, r25	; 0x02
    2198:	89 83       	std	Y+1, r24	; 0x01
		LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */ 
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
		_delay_ms(1); /* delay for processing Th = 13ns */
	#endif	
}
    219a:	cd 59       	subi	r28, 0x9D	; 157
    219c:	df 4f       	sbci	r29, 0xFF	; 255
    219e:	0f b6       	in	r0, 0x3f	; 63
    21a0:	f8 94       	cli
    21a2:	de bf       	out	0x3e, r29	; 62
    21a4:	0f be       	out	0x3f, r0	; 63
    21a6:	cd bf       	out	0x3d, r28	; 61
    21a8:	cf 91       	pop	r28
    21aa:	df 91       	pop	r29
    21ac:	1f 91       	pop	r17
    21ae:	0f 91       	pop	r16
    21b0:	08 95       	ret

000021b2 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    21b2:	0f 93       	push	r16
    21b4:	1f 93       	push	r17
    21b6:	df 93       	push	r29
    21b8:	cf 93       	push	r28
    21ba:	cd b7       	in	r28, 0x3d	; 61
    21bc:	de b7       	in	r29, 0x3e	; 62
    21be:	c3 56       	subi	r28, 0x63	; 99
    21c0:	d0 40       	sbci	r29, 0x00	; 0
    21c2:	0f b6       	in	r0, 0x3f	; 63
    21c4:	f8 94       	cli
    21c6:	de bf       	out	0x3e, r29	; 62
    21c8:	0f be       	out	0x3f, r0	; 63
    21ca:	cd bf       	out	0x3d, r28	; 61
    21cc:	fe 01       	movw	r30, r28
    21ce:	ed 59       	subi	r30, 0x9D	; 157
    21d0:	ff 4f       	sbci	r31, 0xFF	; 255
    21d2:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    21d4:	a2 e3       	ldi	r26, 0x32	; 50
    21d6:	b0 e0       	ldi	r27, 0x00	; 0
    21d8:	e2 e3       	ldi	r30, 0x32	; 50
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	80 81       	ld	r24, Z
    21de:	80 61       	ori	r24, 0x10	; 16
    21e0:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    21e2:	a2 e3       	ldi	r26, 0x32	; 50
    21e4:	b0 e0       	ldi	r27, 0x00	; 0
    21e6:	e2 e3       	ldi	r30, 0x32	; 50
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	80 81       	ld	r24, Z
    21ec:	8f 7d       	andi	r24, 0xDF	; 223
    21ee:	8c 93       	st	X, r24
    21f0:	fe 01       	movw	r30, r28
    21f2:	e1 5a       	subi	r30, 0xA1	; 161
    21f4:	ff 4f       	sbci	r31, 0xFF	; 255
    21f6:	80 e0       	ldi	r24, 0x00	; 0
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	a0 e8       	ldi	r26, 0x80	; 128
    21fc:	bf e3       	ldi	r27, 0x3F	; 63
    21fe:	80 83       	st	Z, r24
    2200:	91 83       	std	Z+1, r25	; 0x01
    2202:	a2 83       	std	Z+2, r26	; 0x02
    2204:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2206:	8e 01       	movw	r16, r28
    2208:	05 5a       	subi	r16, 0xA5	; 165
    220a:	1f 4f       	sbci	r17, 0xFF	; 255
    220c:	fe 01       	movw	r30, r28
    220e:	e1 5a       	subi	r30, 0xA1	; 161
    2210:	ff 4f       	sbci	r31, 0xFF	; 255
    2212:	60 81       	ld	r22, Z
    2214:	71 81       	ldd	r23, Z+1	; 0x01
    2216:	82 81       	ldd	r24, Z+2	; 0x02
    2218:	93 81       	ldd	r25, Z+3	; 0x03
    221a:	20 e0       	ldi	r18, 0x00	; 0
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	4a ef       	ldi	r20, 0xFA	; 250
    2220:	54 e4       	ldi	r21, 0x44	; 68
    2222:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2226:	dc 01       	movw	r26, r24
    2228:	cb 01       	movw	r24, r22
    222a:	f8 01       	movw	r30, r16
    222c:	80 83       	st	Z, r24
    222e:	91 83       	std	Z+1, r25	; 0x01
    2230:	a2 83       	std	Z+2, r26	; 0x02
    2232:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2234:	fe 01       	movw	r30, r28
    2236:	e5 5a       	subi	r30, 0xA5	; 165
    2238:	ff 4f       	sbci	r31, 0xFF	; 255
    223a:	60 81       	ld	r22, Z
    223c:	71 81       	ldd	r23, Z+1	; 0x01
    223e:	82 81       	ldd	r24, Z+2	; 0x02
    2240:	93 81       	ldd	r25, Z+3	; 0x03
    2242:	20 e0       	ldi	r18, 0x00	; 0
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	40 e8       	ldi	r20, 0x80	; 128
    2248:	5f e3       	ldi	r21, 0x3F	; 63
    224a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    224e:	88 23       	and	r24, r24
    2250:	44 f4       	brge	.+16     	; 0x2262 <LCD_displayCharacter+0xb0>
		__ticks = 1;
    2252:	fe 01       	movw	r30, r28
    2254:	e7 5a       	subi	r30, 0xA7	; 167
    2256:	ff 4f       	sbci	r31, 0xFF	; 255
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	91 83       	std	Z+1, r25	; 0x01
    225e:	80 83       	st	Z, r24
    2260:	64 c0       	rjmp	.+200    	; 0x232a <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    2262:	fe 01       	movw	r30, r28
    2264:	e5 5a       	subi	r30, 0xA5	; 165
    2266:	ff 4f       	sbci	r31, 0xFF	; 255
    2268:	60 81       	ld	r22, Z
    226a:	71 81       	ldd	r23, Z+1	; 0x01
    226c:	82 81       	ldd	r24, Z+2	; 0x02
    226e:	93 81       	ldd	r25, Z+3	; 0x03
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	3f ef       	ldi	r19, 0xFF	; 255
    2274:	4f e7       	ldi	r20, 0x7F	; 127
    2276:	57 e4       	ldi	r21, 0x47	; 71
    2278:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    227c:	18 16       	cp	r1, r24
    227e:	0c f0       	brlt	.+2      	; 0x2282 <LCD_displayCharacter+0xd0>
    2280:	43 c0       	rjmp	.+134    	; 0x2308 <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2282:	fe 01       	movw	r30, r28
    2284:	e1 5a       	subi	r30, 0xA1	; 161
    2286:	ff 4f       	sbci	r31, 0xFF	; 255
    2288:	60 81       	ld	r22, Z
    228a:	71 81       	ldd	r23, Z+1	; 0x01
    228c:	82 81       	ldd	r24, Z+2	; 0x02
    228e:	93 81       	ldd	r25, Z+3	; 0x03
    2290:	20 e0       	ldi	r18, 0x00	; 0
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	40 e2       	ldi	r20, 0x20	; 32
    2296:	51 e4       	ldi	r21, 0x41	; 65
    2298:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    229c:	dc 01       	movw	r26, r24
    229e:	cb 01       	movw	r24, r22
    22a0:	8e 01       	movw	r16, r28
    22a2:	07 5a       	subi	r16, 0xA7	; 167
    22a4:	1f 4f       	sbci	r17, 0xFF	; 255
    22a6:	bc 01       	movw	r22, r24
    22a8:	cd 01       	movw	r24, r26
    22aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22ae:	dc 01       	movw	r26, r24
    22b0:	cb 01       	movw	r24, r22
    22b2:	f8 01       	movw	r30, r16
    22b4:	91 83       	std	Z+1, r25	; 0x01
    22b6:	80 83       	st	Z, r24
    22b8:	1f c0       	rjmp	.+62     	; 0x22f8 <LCD_displayCharacter+0x146>
    22ba:	fe 01       	movw	r30, r28
    22bc:	e9 5a       	subi	r30, 0xA9	; 169
    22be:	ff 4f       	sbci	r31, 0xFF	; 255
    22c0:	88 ec       	ldi	r24, 0xC8	; 200
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	91 83       	std	Z+1, r25	; 0x01
    22c6:	80 83       	st	Z, r24
    22c8:	fe 01       	movw	r30, r28
    22ca:	e9 5a       	subi	r30, 0xA9	; 169
    22cc:	ff 4f       	sbci	r31, 0xFF	; 255
    22ce:	80 81       	ld	r24, Z
    22d0:	91 81       	ldd	r25, Z+1	; 0x01
    22d2:	01 97       	sbiw	r24, 0x01	; 1
    22d4:	f1 f7       	brne	.-4      	; 0x22d2 <LCD_displayCharacter+0x120>
    22d6:	fe 01       	movw	r30, r28
    22d8:	e9 5a       	subi	r30, 0xA9	; 169
    22da:	ff 4f       	sbci	r31, 0xFF	; 255
    22dc:	91 83       	std	Z+1, r25	; 0x01
    22de:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e0:	de 01       	movw	r26, r28
    22e2:	a7 5a       	subi	r26, 0xA7	; 167
    22e4:	bf 4f       	sbci	r27, 0xFF	; 255
    22e6:	fe 01       	movw	r30, r28
    22e8:	e7 5a       	subi	r30, 0xA7	; 167
    22ea:	ff 4f       	sbci	r31, 0xFF	; 255
    22ec:	80 81       	ld	r24, Z
    22ee:	91 81       	ldd	r25, Z+1	; 0x01
    22f0:	01 97       	sbiw	r24, 0x01	; 1
    22f2:	11 96       	adiw	r26, 0x01	; 1
    22f4:	9c 93       	st	X, r25
    22f6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22f8:	fe 01       	movw	r30, r28
    22fa:	e7 5a       	subi	r30, 0xA7	; 167
    22fc:	ff 4f       	sbci	r31, 0xFF	; 255
    22fe:	80 81       	ld	r24, Z
    2300:	91 81       	ldd	r25, Z+1	; 0x01
    2302:	00 97       	sbiw	r24, 0x00	; 0
    2304:	d1 f6       	brne	.-76     	; 0x22ba <LCD_displayCharacter+0x108>
    2306:	27 c0       	rjmp	.+78     	; 0x2356 <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2308:	8e 01       	movw	r16, r28
    230a:	07 5a       	subi	r16, 0xA7	; 167
    230c:	1f 4f       	sbci	r17, 0xFF	; 255
    230e:	fe 01       	movw	r30, r28
    2310:	e5 5a       	subi	r30, 0xA5	; 165
    2312:	ff 4f       	sbci	r31, 0xFF	; 255
    2314:	60 81       	ld	r22, Z
    2316:	71 81       	ldd	r23, Z+1	; 0x01
    2318:	82 81       	ldd	r24, Z+2	; 0x02
    231a:	93 81       	ldd	r25, Z+3	; 0x03
    231c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2320:	dc 01       	movw	r26, r24
    2322:	cb 01       	movw	r24, r22
    2324:	f8 01       	movw	r30, r16
    2326:	91 83       	std	Z+1, r25	; 0x01
    2328:	80 83       	st	Z, r24
    232a:	de 01       	movw	r26, r28
    232c:	ab 5a       	subi	r26, 0xAB	; 171
    232e:	bf 4f       	sbci	r27, 0xFF	; 255
    2330:	fe 01       	movw	r30, r28
    2332:	e7 5a       	subi	r30, 0xA7	; 167
    2334:	ff 4f       	sbci	r31, 0xFF	; 255
    2336:	80 81       	ld	r24, Z
    2338:	91 81       	ldd	r25, Z+1	; 0x01
    233a:	8d 93       	st	X+, r24
    233c:	9c 93       	st	X, r25
    233e:	fe 01       	movw	r30, r28
    2340:	eb 5a       	subi	r30, 0xAB	; 171
    2342:	ff 4f       	sbci	r31, 0xFF	; 255
    2344:	80 81       	ld	r24, Z
    2346:	91 81       	ldd	r25, Z+1	; 0x01
    2348:	01 97       	sbiw	r24, 0x01	; 1
    234a:	f1 f7       	brne	.-4      	; 0x2348 <LCD_displayCharacter+0x196>
    234c:	fe 01       	movw	r30, r28
    234e:	eb 5a       	subi	r30, 0xAB	; 171
    2350:	ff 4f       	sbci	r31, 0xFF	; 255
    2352:	91 83       	std	Z+1, r25	; 0x01
    2354:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2356:	a2 e3       	ldi	r26, 0x32	; 50
    2358:	b0 e0       	ldi	r27, 0x00	; 0
    235a:	e2 e3       	ldi	r30, 0x32	; 50
    235c:	f0 e0       	ldi	r31, 0x00	; 0
    235e:	80 81       	ld	r24, Z
    2360:	80 64       	ori	r24, 0x40	; 64
    2362:	8c 93       	st	X, r24
    2364:	fe 01       	movw	r30, r28
    2366:	ef 5a       	subi	r30, 0xAF	; 175
    2368:	ff 4f       	sbci	r31, 0xFF	; 255
    236a:	80 e0       	ldi	r24, 0x00	; 0
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	a0 e8       	ldi	r26, 0x80	; 128
    2370:	bf e3       	ldi	r27, 0x3F	; 63
    2372:	80 83       	st	Z, r24
    2374:	91 83       	std	Z+1, r25	; 0x01
    2376:	a2 83       	std	Z+2, r26	; 0x02
    2378:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    237a:	8e 01       	movw	r16, r28
    237c:	03 5b       	subi	r16, 0xB3	; 179
    237e:	1f 4f       	sbci	r17, 0xFF	; 255
    2380:	fe 01       	movw	r30, r28
    2382:	ef 5a       	subi	r30, 0xAF	; 175
    2384:	ff 4f       	sbci	r31, 0xFF	; 255
    2386:	60 81       	ld	r22, Z
    2388:	71 81       	ldd	r23, Z+1	; 0x01
    238a:	82 81       	ldd	r24, Z+2	; 0x02
    238c:	93 81       	ldd	r25, Z+3	; 0x03
    238e:	20 e0       	ldi	r18, 0x00	; 0
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	4a ef       	ldi	r20, 0xFA	; 250
    2394:	54 e4       	ldi	r21, 0x44	; 68
    2396:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    239a:	dc 01       	movw	r26, r24
    239c:	cb 01       	movw	r24, r22
    239e:	f8 01       	movw	r30, r16
    23a0:	80 83       	st	Z, r24
    23a2:	91 83       	std	Z+1, r25	; 0x01
    23a4:	a2 83       	std	Z+2, r26	; 0x02
    23a6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23a8:	fe 01       	movw	r30, r28
    23aa:	e3 5b       	subi	r30, 0xB3	; 179
    23ac:	ff 4f       	sbci	r31, 0xFF	; 255
    23ae:	60 81       	ld	r22, Z
    23b0:	71 81       	ldd	r23, Z+1	; 0x01
    23b2:	82 81       	ldd	r24, Z+2	; 0x02
    23b4:	93 81       	ldd	r25, Z+3	; 0x03
    23b6:	20 e0       	ldi	r18, 0x00	; 0
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	40 e8       	ldi	r20, 0x80	; 128
    23bc:	5f e3       	ldi	r21, 0x3F	; 63
    23be:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    23c2:	88 23       	and	r24, r24
    23c4:	44 f4       	brge	.+16     	; 0x23d6 <LCD_displayCharacter+0x224>
		__ticks = 1;
    23c6:	fe 01       	movw	r30, r28
    23c8:	e5 5b       	subi	r30, 0xB5	; 181
    23ca:	ff 4f       	sbci	r31, 0xFF	; 255
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	91 83       	std	Z+1, r25	; 0x01
    23d2:	80 83       	st	Z, r24
    23d4:	64 c0       	rjmp	.+200    	; 0x249e <LCD_displayCharacter+0x2ec>
	else if (__tmp > 65535)
    23d6:	fe 01       	movw	r30, r28
    23d8:	e3 5b       	subi	r30, 0xB3	; 179
    23da:	ff 4f       	sbci	r31, 0xFF	; 255
    23dc:	60 81       	ld	r22, Z
    23de:	71 81       	ldd	r23, Z+1	; 0x01
    23e0:	82 81       	ldd	r24, Z+2	; 0x02
    23e2:	93 81       	ldd	r25, Z+3	; 0x03
    23e4:	20 e0       	ldi	r18, 0x00	; 0
    23e6:	3f ef       	ldi	r19, 0xFF	; 255
    23e8:	4f e7       	ldi	r20, 0x7F	; 127
    23ea:	57 e4       	ldi	r21, 0x47	; 71
    23ec:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    23f0:	18 16       	cp	r1, r24
    23f2:	0c f0       	brlt	.+2      	; 0x23f6 <LCD_displayCharacter+0x244>
    23f4:	43 c0       	rjmp	.+134    	; 0x247c <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23f6:	fe 01       	movw	r30, r28
    23f8:	ef 5a       	subi	r30, 0xAF	; 175
    23fa:	ff 4f       	sbci	r31, 0xFF	; 255
    23fc:	60 81       	ld	r22, Z
    23fe:	71 81       	ldd	r23, Z+1	; 0x01
    2400:	82 81       	ldd	r24, Z+2	; 0x02
    2402:	93 81       	ldd	r25, Z+3	; 0x03
    2404:	20 e0       	ldi	r18, 0x00	; 0
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	40 e2       	ldi	r20, 0x20	; 32
    240a:	51 e4       	ldi	r21, 0x41	; 65
    240c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2410:	dc 01       	movw	r26, r24
    2412:	cb 01       	movw	r24, r22
    2414:	8e 01       	movw	r16, r28
    2416:	05 5b       	subi	r16, 0xB5	; 181
    2418:	1f 4f       	sbci	r17, 0xFF	; 255
    241a:	bc 01       	movw	r22, r24
    241c:	cd 01       	movw	r24, r26
    241e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2422:	dc 01       	movw	r26, r24
    2424:	cb 01       	movw	r24, r22
    2426:	f8 01       	movw	r30, r16
    2428:	91 83       	std	Z+1, r25	; 0x01
    242a:	80 83       	st	Z, r24
    242c:	1f c0       	rjmp	.+62     	; 0x246c <LCD_displayCharacter+0x2ba>
    242e:	fe 01       	movw	r30, r28
    2430:	e7 5b       	subi	r30, 0xB7	; 183
    2432:	ff 4f       	sbci	r31, 0xFF	; 255
    2434:	88 ec       	ldi	r24, 0xC8	; 200
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	91 83       	std	Z+1, r25	; 0x01
    243a:	80 83       	st	Z, r24
    243c:	fe 01       	movw	r30, r28
    243e:	e7 5b       	subi	r30, 0xB7	; 183
    2440:	ff 4f       	sbci	r31, 0xFF	; 255
    2442:	80 81       	ld	r24, Z
    2444:	91 81       	ldd	r25, Z+1	; 0x01
    2446:	01 97       	sbiw	r24, 0x01	; 1
    2448:	f1 f7       	brne	.-4      	; 0x2446 <LCD_displayCharacter+0x294>
    244a:	fe 01       	movw	r30, r28
    244c:	e7 5b       	subi	r30, 0xB7	; 183
    244e:	ff 4f       	sbci	r31, 0xFF	; 255
    2450:	91 83       	std	Z+1, r25	; 0x01
    2452:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2454:	de 01       	movw	r26, r28
    2456:	a5 5b       	subi	r26, 0xB5	; 181
    2458:	bf 4f       	sbci	r27, 0xFF	; 255
    245a:	fe 01       	movw	r30, r28
    245c:	e5 5b       	subi	r30, 0xB5	; 181
    245e:	ff 4f       	sbci	r31, 0xFF	; 255
    2460:	80 81       	ld	r24, Z
    2462:	91 81       	ldd	r25, Z+1	; 0x01
    2464:	01 97       	sbiw	r24, 0x01	; 1
    2466:	11 96       	adiw	r26, 0x01	; 1
    2468:	9c 93       	st	X, r25
    246a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    246c:	fe 01       	movw	r30, r28
    246e:	e5 5b       	subi	r30, 0xB5	; 181
    2470:	ff 4f       	sbci	r31, 0xFF	; 255
    2472:	80 81       	ld	r24, Z
    2474:	91 81       	ldd	r25, Z+1	; 0x01
    2476:	00 97       	sbiw	r24, 0x00	; 0
    2478:	d1 f6       	brne	.-76     	; 0x242e <LCD_displayCharacter+0x27c>
    247a:	27 c0       	rjmp	.+78     	; 0x24ca <LCD_displayCharacter+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    247c:	8e 01       	movw	r16, r28
    247e:	05 5b       	subi	r16, 0xB5	; 181
    2480:	1f 4f       	sbci	r17, 0xFF	; 255
    2482:	fe 01       	movw	r30, r28
    2484:	e3 5b       	subi	r30, 0xB3	; 179
    2486:	ff 4f       	sbci	r31, 0xFF	; 255
    2488:	60 81       	ld	r22, Z
    248a:	71 81       	ldd	r23, Z+1	; 0x01
    248c:	82 81       	ldd	r24, Z+2	; 0x02
    248e:	93 81       	ldd	r25, Z+3	; 0x03
    2490:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2494:	dc 01       	movw	r26, r24
    2496:	cb 01       	movw	r24, r22
    2498:	f8 01       	movw	r30, r16
    249a:	91 83       	std	Z+1, r25	; 0x01
    249c:	80 83       	st	Z, r24
    249e:	de 01       	movw	r26, r28
    24a0:	a9 5b       	subi	r26, 0xB9	; 185
    24a2:	bf 4f       	sbci	r27, 0xFF	; 255
    24a4:	fe 01       	movw	r30, r28
    24a6:	e5 5b       	subi	r30, 0xB5	; 181
    24a8:	ff 4f       	sbci	r31, 0xFF	; 255
    24aa:	80 81       	ld	r24, Z
    24ac:	91 81       	ldd	r25, Z+1	; 0x01
    24ae:	8d 93       	st	X+, r24
    24b0:	9c 93       	st	X, r25
    24b2:	fe 01       	movw	r30, r28
    24b4:	e9 5b       	subi	r30, 0xB9	; 185
    24b6:	ff 4f       	sbci	r31, 0xFF	; 255
    24b8:	80 81       	ld	r24, Z
    24ba:	91 81       	ldd	r25, Z+1	; 0x01
    24bc:	01 97       	sbiw	r24, 0x01	; 1
    24be:	f1 f7       	brne	.-4      	; 0x24bc <LCD_displayCharacter+0x30a>
    24c0:	fe 01       	movw	r30, r28
    24c2:	e9 5b       	subi	r30, 0xB9	; 185
    24c4:	ff 4f       	sbci	r31, 0xFF	; 255
    24c6:	91 83       	std	Z+1, r25	; 0x01
    24c8:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	#if (DATA_BITS_MODE == 4)
		/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT = (data & 0xF0); 
    24ca:	a5 e3       	ldi	r26, 0x35	; 53
    24cc:	b0 e0       	ldi	r27, 0x00	; 0
    24ce:	fe 01       	movw	r30, r28
    24d0:	ed 59       	subi	r30, 0x9D	; 157
    24d2:	ff 4f       	sbci	r31, 0xFF	; 255
    24d4:	80 81       	ld	r24, Z
    24d6:	80 7f       	andi	r24, 0xF0	; 240
    24d8:	8c 93       	st	X, r24
    24da:	fe 01       	movw	r30, r28
    24dc:	ed 5b       	subi	r30, 0xBD	; 189
    24de:	ff 4f       	sbci	r31, 0xFF	; 255
    24e0:	80 e0       	ldi	r24, 0x00	; 0
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	a0 e8       	ldi	r26, 0x80	; 128
    24e6:	bf e3       	ldi	r27, 0x3F	; 63
    24e8:	80 83       	st	Z, r24
    24ea:	91 83       	std	Z+1, r25	; 0x01
    24ec:	a2 83       	std	Z+2, r26	; 0x02
    24ee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24f0:	8e 01       	movw	r16, r28
    24f2:	01 5c       	subi	r16, 0xC1	; 193
    24f4:	1f 4f       	sbci	r17, 0xFF	; 255
    24f6:	fe 01       	movw	r30, r28
    24f8:	ed 5b       	subi	r30, 0xBD	; 189
    24fa:	ff 4f       	sbci	r31, 0xFF	; 255
    24fc:	60 81       	ld	r22, Z
    24fe:	71 81       	ldd	r23, Z+1	; 0x01
    2500:	82 81       	ldd	r24, Z+2	; 0x02
    2502:	93 81       	ldd	r25, Z+3	; 0x03
    2504:	20 e0       	ldi	r18, 0x00	; 0
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	4a ef       	ldi	r20, 0xFA	; 250
    250a:	54 e4       	ldi	r21, 0x44	; 68
    250c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2510:	dc 01       	movw	r26, r24
    2512:	cb 01       	movw	r24, r22
    2514:	f8 01       	movw	r30, r16
    2516:	80 83       	st	Z, r24
    2518:	91 83       	std	Z+1, r25	; 0x01
    251a:	a2 83       	std	Z+2, r26	; 0x02
    251c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    251e:	fe 01       	movw	r30, r28
    2520:	ff 96       	adiw	r30, 0x3f	; 63
    2522:	60 81       	ld	r22, Z
    2524:	71 81       	ldd	r23, Z+1	; 0x01
    2526:	82 81       	ldd	r24, Z+2	; 0x02
    2528:	93 81       	ldd	r25, Z+3	; 0x03
    252a:	20 e0       	ldi	r18, 0x00	; 0
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	40 e8       	ldi	r20, 0x80	; 128
    2530:	5f e3       	ldi	r21, 0x3F	; 63
    2532:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2536:	88 23       	and	r24, r24
    2538:	2c f4       	brge	.+10     	; 0x2544 <LCD_displayCharacter+0x392>
		__ticks = 1;
    253a:	81 e0       	ldi	r24, 0x01	; 1
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	9e af       	std	Y+62, r25	; 0x3e
    2540:	8d af       	std	Y+61, r24	; 0x3d
    2542:	46 c0       	rjmp	.+140    	; 0x25d0 <LCD_displayCharacter+0x41e>
	else if (__tmp > 65535)
    2544:	fe 01       	movw	r30, r28
    2546:	ff 96       	adiw	r30, 0x3f	; 63
    2548:	60 81       	ld	r22, Z
    254a:	71 81       	ldd	r23, Z+1	; 0x01
    254c:	82 81       	ldd	r24, Z+2	; 0x02
    254e:	93 81       	ldd	r25, Z+3	; 0x03
    2550:	20 e0       	ldi	r18, 0x00	; 0
    2552:	3f ef       	ldi	r19, 0xFF	; 255
    2554:	4f e7       	ldi	r20, 0x7F	; 127
    2556:	57 e4       	ldi	r21, 0x47	; 71
    2558:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    255c:	18 16       	cp	r1, r24
    255e:	64 f5       	brge	.+88     	; 0x25b8 <LCD_displayCharacter+0x406>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2560:	fe 01       	movw	r30, r28
    2562:	ed 5b       	subi	r30, 0xBD	; 189
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	60 81       	ld	r22, Z
    2568:	71 81       	ldd	r23, Z+1	; 0x01
    256a:	82 81       	ldd	r24, Z+2	; 0x02
    256c:	93 81       	ldd	r25, Z+3	; 0x03
    256e:	20 e0       	ldi	r18, 0x00	; 0
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	40 e2       	ldi	r20, 0x20	; 32
    2574:	51 e4       	ldi	r21, 0x41	; 65
    2576:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    257a:	dc 01       	movw	r26, r24
    257c:	cb 01       	movw	r24, r22
    257e:	bc 01       	movw	r22, r24
    2580:	cd 01       	movw	r24, r26
    2582:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2586:	dc 01       	movw	r26, r24
    2588:	cb 01       	movw	r24, r22
    258a:	9e af       	std	Y+62, r25	; 0x3e
    258c:	8d af       	std	Y+61, r24	; 0x3d
    258e:	0f c0       	rjmp	.+30     	; 0x25ae <LCD_displayCharacter+0x3fc>
    2590:	88 ec       	ldi	r24, 0xC8	; 200
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	9c af       	std	Y+60, r25	; 0x3c
    2596:	8b af       	std	Y+59, r24	; 0x3b
    2598:	8b ad       	ldd	r24, Y+59	; 0x3b
    259a:	9c ad       	ldd	r25, Y+60	; 0x3c
    259c:	01 97       	sbiw	r24, 0x01	; 1
    259e:	f1 f7       	brne	.-4      	; 0x259c <LCD_displayCharacter+0x3ea>
    25a0:	9c af       	std	Y+60, r25	; 0x3c
    25a2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25a4:	8d ad       	ldd	r24, Y+61	; 0x3d
    25a6:	9e ad       	ldd	r25, Y+62	; 0x3e
    25a8:	01 97       	sbiw	r24, 0x01	; 1
    25aa:	9e af       	std	Y+62, r25	; 0x3e
    25ac:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ae:	8d ad       	ldd	r24, Y+61	; 0x3d
    25b0:	9e ad       	ldd	r25, Y+62	; 0x3e
    25b2:	00 97       	sbiw	r24, 0x00	; 0
    25b4:	69 f7       	brne	.-38     	; 0x2590 <LCD_displayCharacter+0x3de>
    25b6:	16 c0       	rjmp	.+44     	; 0x25e4 <LCD_displayCharacter+0x432>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25b8:	fe 01       	movw	r30, r28
    25ba:	ff 96       	adiw	r30, 0x3f	; 63
    25bc:	60 81       	ld	r22, Z
    25be:	71 81       	ldd	r23, Z+1	; 0x01
    25c0:	82 81       	ldd	r24, Z+2	; 0x02
    25c2:	93 81       	ldd	r25, Z+3	; 0x03
    25c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25c8:	dc 01       	movw	r26, r24
    25ca:	cb 01       	movw	r24, r22
    25cc:	9e af       	std	Y+62, r25	; 0x3e
    25ce:	8d af       	std	Y+61, r24	; 0x3d
    25d0:	8d ad       	ldd	r24, Y+61	; 0x3d
    25d2:	9e ad       	ldd	r25, Y+62	; 0x3e
    25d4:	9a af       	std	Y+58, r25	; 0x3a
    25d6:	89 af       	std	Y+57, r24	; 0x39
    25d8:	89 ad       	ldd	r24, Y+57	; 0x39
    25da:	9a ad       	ldd	r25, Y+58	; 0x3a
    25dc:	01 97       	sbiw	r24, 0x01	; 1
    25de:	f1 f7       	brne	.-4      	; 0x25dc <LCD_displayCharacter+0x42a>
    25e0:	9a af       	std	Y+58, r25	; 0x3a
    25e2:	89 af       	std	Y+57, r24	; 0x39
		#else 
			LCD_DATA_PORT = ((data >> 4) & 0x0F);
		#endif
		
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    25e4:	a2 e3       	ldi	r26, 0x32	; 50
    25e6:	b0 e0       	ldi	r27, 0x00	; 0
    25e8:	e2 e3       	ldi	r30, 0x32	; 50
    25ea:	f0 e0       	ldi	r31, 0x00	; 0
    25ec:	80 81       	ld	r24, Z
    25ee:	8f 7b       	andi	r24, 0xBF	; 191
    25f0:	8c 93       	st	X, r24
    25f2:	80 e0       	ldi	r24, 0x00	; 0
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	a0 e8       	ldi	r26, 0x80	; 128
    25f8:	bf e3       	ldi	r27, 0x3F	; 63
    25fa:	8d ab       	std	Y+53, r24	; 0x35
    25fc:	9e ab       	std	Y+54, r25	; 0x36
    25fe:	af ab       	std	Y+55, r26	; 0x37
    2600:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2602:	6d a9       	ldd	r22, Y+53	; 0x35
    2604:	7e a9       	ldd	r23, Y+54	; 0x36
    2606:	8f a9       	ldd	r24, Y+55	; 0x37
    2608:	98 ad       	ldd	r25, Y+56	; 0x38
    260a:	20 e0       	ldi	r18, 0x00	; 0
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	4a ef       	ldi	r20, 0xFA	; 250
    2610:	54 e4       	ldi	r21, 0x44	; 68
    2612:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2616:	dc 01       	movw	r26, r24
    2618:	cb 01       	movw	r24, r22
    261a:	89 ab       	std	Y+49, r24	; 0x31
    261c:	9a ab       	std	Y+50, r25	; 0x32
    261e:	ab ab       	std	Y+51, r26	; 0x33
    2620:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2622:	69 a9       	ldd	r22, Y+49	; 0x31
    2624:	7a a9       	ldd	r23, Y+50	; 0x32
    2626:	8b a9       	ldd	r24, Y+51	; 0x33
    2628:	9c a9       	ldd	r25, Y+52	; 0x34
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	40 e8       	ldi	r20, 0x80	; 128
    2630:	5f e3       	ldi	r21, 0x3F	; 63
    2632:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2636:	88 23       	and	r24, r24
    2638:	2c f4       	brge	.+10     	; 0x2644 <LCD_displayCharacter+0x492>
		__ticks = 1;
    263a:	81 e0       	ldi	r24, 0x01	; 1
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	98 ab       	std	Y+48, r25	; 0x30
    2640:	8f a7       	std	Y+47, r24	; 0x2f
    2642:	3f c0       	rjmp	.+126    	; 0x26c2 <LCD_displayCharacter+0x510>
	else if (__tmp > 65535)
    2644:	69 a9       	ldd	r22, Y+49	; 0x31
    2646:	7a a9       	ldd	r23, Y+50	; 0x32
    2648:	8b a9       	ldd	r24, Y+51	; 0x33
    264a:	9c a9       	ldd	r25, Y+52	; 0x34
    264c:	20 e0       	ldi	r18, 0x00	; 0
    264e:	3f ef       	ldi	r19, 0xFF	; 255
    2650:	4f e7       	ldi	r20, 0x7F	; 127
    2652:	57 e4       	ldi	r21, 0x47	; 71
    2654:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2658:	18 16       	cp	r1, r24
    265a:	4c f5       	brge	.+82     	; 0x26ae <LCD_displayCharacter+0x4fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    265c:	6d a9       	ldd	r22, Y+53	; 0x35
    265e:	7e a9       	ldd	r23, Y+54	; 0x36
    2660:	8f a9       	ldd	r24, Y+55	; 0x37
    2662:	98 ad       	ldd	r25, Y+56	; 0x38
    2664:	20 e0       	ldi	r18, 0x00	; 0
    2666:	30 e0       	ldi	r19, 0x00	; 0
    2668:	40 e2       	ldi	r20, 0x20	; 32
    266a:	51 e4       	ldi	r21, 0x41	; 65
    266c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2670:	dc 01       	movw	r26, r24
    2672:	cb 01       	movw	r24, r22
    2674:	bc 01       	movw	r22, r24
    2676:	cd 01       	movw	r24, r26
    2678:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    267c:	dc 01       	movw	r26, r24
    267e:	cb 01       	movw	r24, r22
    2680:	98 ab       	std	Y+48, r25	; 0x30
    2682:	8f a7       	std	Y+47, r24	; 0x2f
    2684:	0f c0       	rjmp	.+30     	; 0x26a4 <LCD_displayCharacter+0x4f2>
    2686:	88 ec       	ldi	r24, 0xC8	; 200
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	9e a7       	std	Y+46, r25	; 0x2e
    268c:	8d a7       	std	Y+45, r24	; 0x2d
    268e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2690:	9e a5       	ldd	r25, Y+46	; 0x2e
    2692:	01 97       	sbiw	r24, 0x01	; 1
    2694:	f1 f7       	brne	.-4      	; 0x2692 <LCD_displayCharacter+0x4e0>
    2696:	9e a7       	std	Y+46, r25	; 0x2e
    2698:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    269a:	8f a5       	ldd	r24, Y+47	; 0x2f
    269c:	98 a9       	ldd	r25, Y+48	; 0x30
    269e:	01 97       	sbiw	r24, 0x01	; 1
    26a0:	98 ab       	std	Y+48, r25	; 0x30
    26a2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    26a6:	98 a9       	ldd	r25, Y+48	; 0x30
    26a8:	00 97       	sbiw	r24, 0x00	; 0
    26aa:	69 f7       	brne	.-38     	; 0x2686 <LCD_displayCharacter+0x4d4>
    26ac:	14 c0       	rjmp	.+40     	; 0x26d6 <LCD_displayCharacter+0x524>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ae:	69 a9       	ldd	r22, Y+49	; 0x31
    26b0:	7a a9       	ldd	r23, Y+50	; 0x32
    26b2:	8b a9       	ldd	r24, Y+51	; 0x33
    26b4:	9c a9       	ldd	r25, Y+52	; 0x34
    26b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26ba:	dc 01       	movw	r26, r24
    26bc:	cb 01       	movw	r24, r22
    26be:	98 ab       	std	Y+48, r25	; 0x30
    26c0:	8f a7       	std	Y+47, r24	; 0x2f
    26c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    26c4:	98 a9       	ldd	r25, Y+48	; 0x30
    26c6:	9c a7       	std	Y+44, r25	; 0x2c
    26c8:	8b a7       	std	Y+43, r24	; 0x2b
    26ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    26cc:	9c a5       	ldd	r25, Y+44	; 0x2c
    26ce:	01 97       	sbiw	r24, 0x01	; 1
    26d0:	f1 f7       	brne	.-4      	; 0x26ce <LCD_displayCharacter+0x51c>
    26d2:	9c a7       	std	Y+44, r25	; 0x2c
    26d4:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1); /* delay for processing Th = 13ns */
		SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    26d6:	a2 e3       	ldi	r26, 0x32	; 50
    26d8:	b0 e0       	ldi	r27, 0x00	; 0
    26da:	e2 e3       	ldi	r30, 0x32	; 50
    26dc:	f0 e0       	ldi	r31, 0x00	; 0
    26de:	80 81       	ld	r24, Z
    26e0:	80 64       	ori	r24, 0x40	; 64
    26e2:	8c 93       	st	X, r24
    26e4:	80 e0       	ldi	r24, 0x00	; 0
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	a0 e8       	ldi	r26, 0x80	; 128
    26ea:	bf e3       	ldi	r27, 0x3F	; 63
    26ec:	8f a3       	std	Y+39, r24	; 0x27
    26ee:	98 a7       	std	Y+40, r25	; 0x28
    26f0:	a9 a7       	std	Y+41, r26	; 0x29
    26f2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26f4:	6f a1       	ldd	r22, Y+39	; 0x27
    26f6:	78 a5       	ldd	r23, Y+40	; 0x28
    26f8:	89 a5       	ldd	r24, Y+41	; 0x29
    26fa:	9a a5       	ldd	r25, Y+42	; 0x2a
    26fc:	20 e0       	ldi	r18, 0x00	; 0
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	4a ef       	ldi	r20, 0xFA	; 250
    2702:	54 e4       	ldi	r21, 0x44	; 68
    2704:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2708:	dc 01       	movw	r26, r24
    270a:	cb 01       	movw	r24, r22
    270c:	8b a3       	std	Y+35, r24	; 0x23
    270e:	9c a3       	std	Y+36, r25	; 0x24
    2710:	ad a3       	std	Y+37, r26	; 0x25
    2712:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2714:	6b a1       	ldd	r22, Y+35	; 0x23
    2716:	7c a1       	ldd	r23, Y+36	; 0x24
    2718:	8d a1       	ldd	r24, Y+37	; 0x25
    271a:	9e a1       	ldd	r25, Y+38	; 0x26
    271c:	20 e0       	ldi	r18, 0x00	; 0
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	40 e8       	ldi	r20, 0x80	; 128
    2722:	5f e3       	ldi	r21, 0x3F	; 63
    2724:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2728:	88 23       	and	r24, r24
    272a:	2c f4       	brge	.+10     	; 0x2736 <LCD_displayCharacter+0x584>
		__ticks = 1;
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	9a a3       	std	Y+34, r25	; 0x22
    2732:	89 a3       	std	Y+33, r24	; 0x21
    2734:	3f c0       	rjmp	.+126    	; 0x27b4 <LCD_displayCharacter+0x602>
	else if (__tmp > 65535)
    2736:	6b a1       	ldd	r22, Y+35	; 0x23
    2738:	7c a1       	ldd	r23, Y+36	; 0x24
    273a:	8d a1       	ldd	r24, Y+37	; 0x25
    273c:	9e a1       	ldd	r25, Y+38	; 0x26
    273e:	20 e0       	ldi	r18, 0x00	; 0
    2740:	3f ef       	ldi	r19, 0xFF	; 255
    2742:	4f e7       	ldi	r20, 0x7F	; 127
    2744:	57 e4       	ldi	r21, 0x47	; 71
    2746:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    274a:	18 16       	cp	r1, r24
    274c:	4c f5       	brge	.+82     	; 0x27a0 <LCD_displayCharacter+0x5ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    274e:	6f a1       	ldd	r22, Y+39	; 0x27
    2750:	78 a5       	ldd	r23, Y+40	; 0x28
    2752:	89 a5       	ldd	r24, Y+41	; 0x29
    2754:	9a a5       	ldd	r25, Y+42	; 0x2a
    2756:	20 e0       	ldi	r18, 0x00	; 0
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	40 e2       	ldi	r20, 0x20	; 32
    275c:	51 e4       	ldi	r21, 0x41	; 65
    275e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2762:	dc 01       	movw	r26, r24
    2764:	cb 01       	movw	r24, r22
    2766:	bc 01       	movw	r22, r24
    2768:	cd 01       	movw	r24, r26
    276a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	9a a3       	std	Y+34, r25	; 0x22
    2774:	89 a3       	std	Y+33, r24	; 0x21
    2776:	0f c0       	rjmp	.+30     	; 0x2796 <LCD_displayCharacter+0x5e4>
    2778:	88 ec       	ldi	r24, 0xC8	; 200
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	98 a3       	std	Y+32, r25	; 0x20
    277e:	8f 8f       	std	Y+31, r24	; 0x1f
    2780:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2782:	98 a1       	ldd	r25, Y+32	; 0x20
    2784:	01 97       	sbiw	r24, 0x01	; 1
    2786:	f1 f7       	brne	.-4      	; 0x2784 <LCD_displayCharacter+0x5d2>
    2788:	98 a3       	std	Y+32, r25	; 0x20
    278a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    278c:	89 a1       	ldd	r24, Y+33	; 0x21
    278e:	9a a1       	ldd	r25, Y+34	; 0x22
    2790:	01 97       	sbiw	r24, 0x01	; 1
    2792:	9a a3       	std	Y+34, r25	; 0x22
    2794:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2796:	89 a1       	ldd	r24, Y+33	; 0x21
    2798:	9a a1       	ldd	r25, Y+34	; 0x22
    279a:	00 97       	sbiw	r24, 0x00	; 0
    279c:	69 f7       	brne	.-38     	; 0x2778 <LCD_displayCharacter+0x5c6>
    279e:	14 c0       	rjmp	.+40     	; 0x27c8 <LCD_displayCharacter+0x616>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27a0:	6b a1       	ldd	r22, Y+35	; 0x23
    27a2:	7c a1       	ldd	r23, Y+36	; 0x24
    27a4:	8d a1       	ldd	r24, Y+37	; 0x25
    27a6:	9e a1       	ldd	r25, Y+38	; 0x26
    27a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27ac:	dc 01       	movw	r26, r24
    27ae:	cb 01       	movw	r24, r22
    27b0:	9a a3       	std	Y+34, r25	; 0x22
    27b2:	89 a3       	std	Y+33, r24	; 0x21
    27b4:	89 a1       	ldd	r24, Y+33	; 0x21
    27b6:	9a a1       	ldd	r25, Y+34	; 0x22
    27b8:	9e 8f       	std	Y+30, r25	; 0x1e
    27ba:	8d 8f       	std	Y+29, r24	; 0x1d
    27bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27be:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27c0:	01 97       	sbiw	r24, 0x01	; 1
    27c2:	f1 f7       	brne	.-4      	; 0x27c0 <LCD_displayCharacter+0x60e>
    27c4:	9e 8f       	std	Y+30, r25	; 0x1e
    27c6:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
		
		/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT = (data << 4) & 0xF0; 
    27c8:	a5 e3       	ldi	r26, 0x35	; 53
    27ca:	b0 e0       	ldi	r27, 0x00	; 0
    27cc:	fe 01       	movw	r30, r28
    27ce:	ed 59       	subi	r30, 0x9D	; 157
    27d0:	ff 4f       	sbci	r31, 0xFF	; 255
    27d2:	80 81       	ld	r24, Z
    27d4:	88 2f       	mov	r24, r24
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	82 95       	swap	r24
    27da:	92 95       	swap	r25
    27dc:	90 7f       	andi	r25, 0xF0	; 240
    27de:	98 27       	eor	r25, r24
    27e0:	80 7f       	andi	r24, 0xF0	; 240
    27e2:	98 27       	eor	r25, r24
    27e4:	8c 93       	st	X, r24
    27e6:	80 e0       	ldi	r24, 0x00	; 0
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	a0 e8       	ldi	r26, 0x80	; 128
    27ec:	bf e3       	ldi	r27, 0x3F	; 63
    27ee:	89 8f       	std	Y+25, r24	; 0x19
    27f0:	9a 8f       	std	Y+26, r25	; 0x1a
    27f2:	ab 8f       	std	Y+27, r26	; 0x1b
    27f4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27f6:	69 8d       	ldd	r22, Y+25	; 0x19
    27f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27fe:	20 e0       	ldi	r18, 0x00	; 0
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	4a ef       	ldi	r20, 0xFA	; 250
    2804:	54 e4       	ldi	r21, 0x44	; 68
    2806:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    280a:	dc 01       	movw	r26, r24
    280c:	cb 01       	movw	r24, r22
    280e:	8d 8b       	std	Y+21, r24	; 0x15
    2810:	9e 8b       	std	Y+22, r25	; 0x16
    2812:	af 8b       	std	Y+23, r26	; 0x17
    2814:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2816:	6d 89       	ldd	r22, Y+21	; 0x15
    2818:	7e 89       	ldd	r23, Y+22	; 0x16
    281a:	8f 89       	ldd	r24, Y+23	; 0x17
    281c:	98 8d       	ldd	r25, Y+24	; 0x18
    281e:	20 e0       	ldi	r18, 0x00	; 0
    2820:	30 e0       	ldi	r19, 0x00	; 0
    2822:	40 e8       	ldi	r20, 0x80	; 128
    2824:	5f e3       	ldi	r21, 0x3F	; 63
    2826:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    282a:	88 23       	and	r24, r24
    282c:	2c f4       	brge	.+10     	; 0x2838 <LCD_displayCharacter+0x686>
		__ticks = 1;
    282e:	81 e0       	ldi	r24, 0x01	; 1
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	9c 8b       	std	Y+20, r25	; 0x14
    2834:	8b 8b       	std	Y+19, r24	; 0x13
    2836:	3f c0       	rjmp	.+126    	; 0x28b6 <LCD_displayCharacter+0x704>
	else if (__tmp > 65535)
    2838:	6d 89       	ldd	r22, Y+21	; 0x15
    283a:	7e 89       	ldd	r23, Y+22	; 0x16
    283c:	8f 89       	ldd	r24, Y+23	; 0x17
    283e:	98 8d       	ldd	r25, Y+24	; 0x18
    2840:	20 e0       	ldi	r18, 0x00	; 0
    2842:	3f ef       	ldi	r19, 0xFF	; 255
    2844:	4f e7       	ldi	r20, 0x7F	; 127
    2846:	57 e4       	ldi	r21, 0x47	; 71
    2848:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    284c:	18 16       	cp	r1, r24
    284e:	4c f5       	brge	.+82     	; 0x28a2 <LCD_displayCharacter+0x6f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2850:	69 8d       	ldd	r22, Y+25	; 0x19
    2852:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2854:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2856:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2858:	20 e0       	ldi	r18, 0x00	; 0
    285a:	30 e0       	ldi	r19, 0x00	; 0
    285c:	40 e2       	ldi	r20, 0x20	; 32
    285e:	51 e4       	ldi	r21, 0x41	; 65
    2860:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2864:	dc 01       	movw	r26, r24
    2866:	cb 01       	movw	r24, r22
    2868:	bc 01       	movw	r22, r24
    286a:	cd 01       	movw	r24, r26
    286c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2870:	dc 01       	movw	r26, r24
    2872:	cb 01       	movw	r24, r22
    2874:	9c 8b       	std	Y+20, r25	; 0x14
    2876:	8b 8b       	std	Y+19, r24	; 0x13
    2878:	0f c0       	rjmp	.+30     	; 0x2898 <LCD_displayCharacter+0x6e6>
    287a:	88 ec       	ldi	r24, 0xC8	; 200
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	9a 8b       	std	Y+18, r25	; 0x12
    2880:	89 8b       	std	Y+17, r24	; 0x11
    2882:	89 89       	ldd	r24, Y+17	; 0x11
    2884:	9a 89       	ldd	r25, Y+18	; 0x12
    2886:	01 97       	sbiw	r24, 0x01	; 1
    2888:	f1 f7       	brne	.-4      	; 0x2886 <LCD_displayCharacter+0x6d4>
    288a:	9a 8b       	std	Y+18, r25	; 0x12
    288c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    288e:	8b 89       	ldd	r24, Y+19	; 0x13
    2890:	9c 89       	ldd	r25, Y+20	; 0x14
    2892:	01 97       	sbiw	r24, 0x01	; 1
    2894:	9c 8b       	std	Y+20, r25	; 0x14
    2896:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2898:	8b 89       	ldd	r24, Y+19	; 0x13
    289a:	9c 89       	ldd	r25, Y+20	; 0x14
    289c:	00 97       	sbiw	r24, 0x00	; 0
    289e:	69 f7       	brne	.-38     	; 0x287a <LCD_displayCharacter+0x6c8>
    28a0:	14 c0       	rjmp	.+40     	; 0x28ca <LCD_displayCharacter+0x718>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28a2:	6d 89       	ldd	r22, Y+21	; 0x15
    28a4:	7e 89       	ldd	r23, Y+22	; 0x16
    28a6:	8f 89       	ldd	r24, Y+23	; 0x17
    28a8:	98 8d       	ldd	r25, Y+24	; 0x18
    28aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28ae:	dc 01       	movw	r26, r24
    28b0:	cb 01       	movw	r24, r22
    28b2:	9c 8b       	std	Y+20, r25	; 0x14
    28b4:	8b 8b       	std	Y+19, r24	; 0x13
    28b6:	8b 89       	ldd	r24, Y+19	; 0x13
    28b8:	9c 89       	ldd	r25, Y+20	; 0x14
    28ba:	98 8b       	std	Y+16, r25	; 0x10
    28bc:	8f 87       	std	Y+15, r24	; 0x0f
    28be:	8f 85       	ldd	r24, Y+15	; 0x0f
    28c0:	98 89       	ldd	r25, Y+16	; 0x10
    28c2:	01 97       	sbiw	r24, 0x01	; 1
    28c4:	f1 f7       	brne	.-4      	; 0x28c2 <LCD_displayCharacter+0x710>
    28c6:	98 8b       	std	Y+16, r25	; 0x10
    28c8:	8f 87       	std	Y+15, r24	; 0x0f
		#else 
			LCD_DATA_PORT = (data & 0x0F);
		#endif
		
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    28ca:	a2 e3       	ldi	r26, 0x32	; 50
    28cc:	b0 e0       	ldi	r27, 0x00	; 0
    28ce:	e2 e3       	ldi	r30, 0x32	; 50
    28d0:	f0 e0       	ldi	r31, 0x00	; 0
    28d2:	80 81       	ld	r24, Z
    28d4:	8f 7b       	andi	r24, 0xBF	; 191
    28d6:	8c 93       	st	X, r24
    28d8:	80 e0       	ldi	r24, 0x00	; 0
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	a0 e8       	ldi	r26, 0x80	; 128
    28de:	bf e3       	ldi	r27, 0x3F	; 63
    28e0:	8b 87       	std	Y+11, r24	; 0x0b
    28e2:	9c 87       	std	Y+12, r25	; 0x0c
    28e4:	ad 87       	std	Y+13, r26	; 0x0d
    28e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    28ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    28ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    28ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    28f0:	20 e0       	ldi	r18, 0x00	; 0
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	4a ef       	ldi	r20, 0xFA	; 250
    28f6:	54 e4       	ldi	r21, 0x44	; 68
    28f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28fc:	dc 01       	movw	r26, r24
    28fe:	cb 01       	movw	r24, r22
    2900:	8f 83       	std	Y+7, r24	; 0x07
    2902:	98 87       	std	Y+8, r25	; 0x08
    2904:	a9 87       	std	Y+9, r26	; 0x09
    2906:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2908:	6f 81       	ldd	r22, Y+7	; 0x07
    290a:	78 85       	ldd	r23, Y+8	; 0x08
    290c:	89 85       	ldd	r24, Y+9	; 0x09
    290e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2910:	20 e0       	ldi	r18, 0x00	; 0
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	40 e8       	ldi	r20, 0x80	; 128
    2916:	5f e3       	ldi	r21, 0x3F	; 63
    2918:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    291c:	88 23       	and	r24, r24
    291e:	2c f4       	brge	.+10     	; 0x292a <LCD_displayCharacter+0x778>
		__ticks = 1;
    2920:	81 e0       	ldi	r24, 0x01	; 1
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	9e 83       	std	Y+6, r25	; 0x06
    2926:	8d 83       	std	Y+5, r24	; 0x05
    2928:	3f c0       	rjmp	.+126    	; 0x29a8 <LCD_displayCharacter+0x7f6>
	else if (__tmp > 65535)
    292a:	6f 81       	ldd	r22, Y+7	; 0x07
    292c:	78 85       	ldd	r23, Y+8	; 0x08
    292e:	89 85       	ldd	r24, Y+9	; 0x09
    2930:	9a 85       	ldd	r25, Y+10	; 0x0a
    2932:	20 e0       	ldi	r18, 0x00	; 0
    2934:	3f ef       	ldi	r19, 0xFF	; 255
    2936:	4f e7       	ldi	r20, 0x7F	; 127
    2938:	57 e4       	ldi	r21, 0x47	; 71
    293a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    293e:	18 16       	cp	r1, r24
    2940:	4c f5       	brge	.+82     	; 0x2994 <LCD_displayCharacter+0x7e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2942:	6b 85       	ldd	r22, Y+11	; 0x0b
    2944:	7c 85       	ldd	r23, Y+12	; 0x0c
    2946:	8d 85       	ldd	r24, Y+13	; 0x0d
    2948:	9e 85       	ldd	r25, Y+14	; 0x0e
    294a:	20 e0       	ldi	r18, 0x00	; 0
    294c:	30 e0       	ldi	r19, 0x00	; 0
    294e:	40 e2       	ldi	r20, 0x20	; 32
    2950:	51 e4       	ldi	r21, 0x41	; 65
    2952:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2956:	dc 01       	movw	r26, r24
    2958:	cb 01       	movw	r24, r22
    295a:	bc 01       	movw	r22, r24
    295c:	cd 01       	movw	r24, r26
    295e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2962:	dc 01       	movw	r26, r24
    2964:	cb 01       	movw	r24, r22
    2966:	9e 83       	std	Y+6, r25	; 0x06
    2968:	8d 83       	std	Y+5, r24	; 0x05
    296a:	0f c0       	rjmp	.+30     	; 0x298a <LCD_displayCharacter+0x7d8>
    296c:	88 ec       	ldi	r24, 0xC8	; 200
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	9c 83       	std	Y+4, r25	; 0x04
    2972:	8b 83       	std	Y+3, r24	; 0x03
    2974:	8b 81       	ldd	r24, Y+3	; 0x03
    2976:	9c 81       	ldd	r25, Y+4	; 0x04
    2978:	01 97       	sbiw	r24, 0x01	; 1
    297a:	f1 f7       	brne	.-4      	; 0x2978 <LCD_displayCharacter+0x7c6>
    297c:	9c 83       	std	Y+4, r25	; 0x04
    297e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2980:	8d 81       	ldd	r24, Y+5	; 0x05
    2982:	9e 81       	ldd	r25, Y+6	; 0x06
    2984:	01 97       	sbiw	r24, 0x01	; 1
    2986:	9e 83       	std	Y+6, r25	; 0x06
    2988:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    298a:	8d 81       	ldd	r24, Y+5	; 0x05
    298c:	9e 81       	ldd	r25, Y+6	; 0x06
    298e:	00 97       	sbiw	r24, 0x00	; 0
    2990:	69 f7       	brne	.-38     	; 0x296c <LCD_displayCharacter+0x7ba>
    2992:	14 c0       	rjmp	.+40     	; 0x29bc <LCD_displayCharacter+0x80a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2994:	6f 81       	ldd	r22, Y+7	; 0x07
    2996:	78 85       	ldd	r23, Y+8	; 0x08
    2998:	89 85       	ldd	r24, Y+9	; 0x09
    299a:	9a 85       	ldd	r25, Y+10	; 0x0a
    299c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29a0:	dc 01       	movw	r26, r24
    29a2:	cb 01       	movw	r24, r22
    29a4:	9e 83       	std	Y+6, r25	; 0x06
    29a6:	8d 83       	std	Y+5, r24	; 0x05
    29a8:	8d 81       	ldd	r24, Y+5	; 0x05
    29aa:	9e 81       	ldd	r25, Y+6	; 0x06
    29ac:	9a 83       	std	Y+2, r25	; 0x02
    29ae:	89 83       	std	Y+1, r24	; 0x01
    29b0:	89 81       	ldd	r24, Y+1	; 0x01
    29b2:	9a 81       	ldd	r25, Y+2	; 0x02
    29b4:	01 97       	sbiw	r24, 0x01	; 1
    29b6:	f1 f7       	brne	.-4      	; 0x29b4 <LCD_displayCharacter+0x802>
    29b8:	9a 83       	std	Y+2, r25	; 0x02
    29ba:	89 83       	std	Y+1, r24	; 0x01
		LCD_DATA_PORT = data; /* out the required data to the data bus D0 --> D7 */
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
		_delay_ms(1); /* delay for processing Th = 13ns */
	#endif	
}
    29bc:	cd 59       	subi	r28, 0x9D	; 157
    29be:	df 4f       	sbci	r29, 0xFF	; 255
    29c0:	0f b6       	in	r0, 0x3f	; 63
    29c2:	f8 94       	cli
    29c4:	de bf       	out	0x3e, r29	; 62
    29c6:	0f be       	out	0x3f, r0	; 63
    29c8:	cd bf       	out	0x3d, r28	; 61
    29ca:	cf 91       	pop	r28
    29cc:	df 91       	pop	r29
    29ce:	1f 91       	pop	r17
    29d0:	0f 91       	pop	r16
    29d2:	08 95       	ret

000029d4 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    29d4:	df 93       	push	r29
    29d6:	cf 93       	push	r28
    29d8:	00 d0       	rcall	.+0      	; 0x29da <LCD_displayString+0x6>
    29da:	0f 92       	push	r0
    29dc:	cd b7       	in	r28, 0x3d	; 61
    29de:	de b7       	in	r29, 0x3e	; 62
    29e0:	9b 83       	std	Y+3, r25	; 0x03
    29e2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    29e4:	19 82       	std	Y+1, r1	; 0x01
    29e6:	0e c0       	rjmp	.+28     	; 0x2a04 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    29e8:	89 81       	ldd	r24, Y+1	; 0x01
    29ea:	28 2f       	mov	r18, r24
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	8a 81       	ldd	r24, Y+2	; 0x02
    29f0:	9b 81       	ldd	r25, Y+3	; 0x03
    29f2:	fc 01       	movw	r30, r24
    29f4:	e2 0f       	add	r30, r18
    29f6:	f3 1f       	adc	r31, r19
    29f8:	80 81       	ld	r24, Z
    29fa:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <LCD_displayCharacter>
		i++;
    29fe:	89 81       	ldd	r24, Y+1	; 0x01
    2a00:	8f 5f       	subi	r24, 0xFF	; 255
    2a02:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2a04:	89 81       	ldd	r24, Y+1	; 0x01
    2a06:	28 2f       	mov	r18, r24
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a0c:	9b 81       	ldd	r25, Y+3	; 0x03
    2a0e:	fc 01       	movw	r30, r24
    2a10:	e2 0f       	add	r30, r18
    2a12:	f3 1f       	adc	r31, r19
    2a14:	80 81       	ld	r24, Z
    2a16:	88 23       	and	r24, r24
    2a18:	39 f7       	brne	.-50     	; 0x29e8 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2a1a:	0f 90       	pop	r0
    2a1c:	0f 90       	pop	r0
    2a1e:	0f 90       	pop	r0
    2a20:	cf 91       	pop	r28
    2a22:	df 91       	pop	r29
    2a24:	08 95       	ret

00002a26 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    2a26:	df 93       	push	r29
    2a28:	cf 93       	push	r28
    2a2a:	00 d0       	rcall	.+0      	; 0x2a2c <LCD_goToRowColumn+0x6>
    2a2c:	00 d0       	rcall	.+0      	; 0x2a2e <LCD_goToRowColumn+0x8>
    2a2e:	0f 92       	push	r0
    2a30:	cd b7       	in	r28, 0x3d	; 61
    2a32:	de b7       	in	r29, 0x3e	; 62
    2a34:	8a 83       	std	Y+2, r24	; 0x02
    2a36:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    2a38:	8a 81       	ldd	r24, Y+2	; 0x02
    2a3a:	28 2f       	mov	r18, r24
    2a3c:	30 e0       	ldi	r19, 0x00	; 0
    2a3e:	3d 83       	std	Y+5, r19	; 0x05
    2a40:	2c 83       	std	Y+4, r18	; 0x04
    2a42:	8c 81       	ldd	r24, Y+4	; 0x04
    2a44:	9d 81       	ldd	r25, Y+5	; 0x05
    2a46:	81 30       	cpi	r24, 0x01	; 1
    2a48:	91 05       	cpc	r25, r1
    2a4a:	c1 f0       	breq	.+48     	; 0x2a7c <LCD_goToRowColumn+0x56>
    2a4c:	2c 81       	ldd	r18, Y+4	; 0x04
    2a4e:	3d 81       	ldd	r19, Y+5	; 0x05
    2a50:	22 30       	cpi	r18, 0x02	; 2
    2a52:	31 05       	cpc	r19, r1
    2a54:	2c f4       	brge	.+10     	; 0x2a60 <LCD_goToRowColumn+0x3a>
    2a56:	8c 81       	ldd	r24, Y+4	; 0x04
    2a58:	9d 81       	ldd	r25, Y+5	; 0x05
    2a5a:	00 97       	sbiw	r24, 0x00	; 0
    2a5c:	61 f0       	breq	.+24     	; 0x2a76 <LCD_goToRowColumn+0x50>
    2a5e:	19 c0       	rjmp	.+50     	; 0x2a92 <LCD_goToRowColumn+0x6c>
    2a60:	2c 81       	ldd	r18, Y+4	; 0x04
    2a62:	3d 81       	ldd	r19, Y+5	; 0x05
    2a64:	22 30       	cpi	r18, 0x02	; 2
    2a66:	31 05       	cpc	r19, r1
    2a68:	69 f0       	breq	.+26     	; 0x2a84 <LCD_goToRowColumn+0x5e>
    2a6a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a6c:	9d 81       	ldd	r25, Y+5	; 0x05
    2a6e:	83 30       	cpi	r24, 0x03	; 3
    2a70:	91 05       	cpc	r25, r1
    2a72:	61 f0       	breq	.+24     	; 0x2a8c <LCD_goToRowColumn+0x66>
    2a74:	0e c0       	rjmp	.+28     	; 0x2a92 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    2a76:	8b 81       	ldd	r24, Y+3	; 0x03
    2a78:	89 83       	std	Y+1, r24	; 0x01
    2a7a:	0b c0       	rjmp	.+22     	; 0x2a92 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    2a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7e:	80 5c       	subi	r24, 0xC0	; 192
    2a80:	89 83       	std	Y+1, r24	; 0x01
    2a82:	07 c0       	rjmp	.+14     	; 0x2a92 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    2a84:	8b 81       	ldd	r24, Y+3	; 0x03
    2a86:	80 5f       	subi	r24, 0xF0	; 240
    2a88:	89 83       	std	Y+1, r24	; 0x01
    2a8a:	03 c0       	rjmp	.+6      	; 0x2a92 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    2a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8e:	80 5b       	subi	r24, 0xB0	; 176
    2a90:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    2a92:	89 81       	ldd	r24, Y+1	; 0x01
    2a94:	80 68       	ori	r24, 0x80	; 128
    2a96:	0e 94 c8 0c 	call	0x1990	; 0x1990 <LCD_sendCommand>
}
    2a9a:	0f 90       	pop	r0
    2a9c:	0f 90       	pop	r0
    2a9e:	0f 90       	pop	r0
    2aa0:	0f 90       	pop	r0
    2aa2:	0f 90       	pop	r0
    2aa4:	cf 91       	pop	r28
    2aa6:	df 91       	pop	r29
    2aa8:	08 95       	ret

00002aaa <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2aaa:	df 93       	push	r29
    2aac:	cf 93       	push	r28
    2aae:	00 d0       	rcall	.+0      	; 0x2ab0 <LCD_displayStringRowColumn+0x6>
    2ab0:	00 d0       	rcall	.+0      	; 0x2ab2 <LCD_displayStringRowColumn+0x8>
    2ab2:	cd b7       	in	r28, 0x3d	; 61
    2ab4:	de b7       	in	r29, 0x3e	; 62
    2ab6:	89 83       	std	Y+1, r24	; 0x01
    2ab8:	6a 83       	std	Y+2, r22	; 0x02
    2aba:	5c 83       	std	Y+4, r21	; 0x04
    2abc:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    2abe:	89 81       	ldd	r24, Y+1	; 0x01
    2ac0:	6a 81       	ldd	r22, Y+2	; 0x02
    2ac2:	0e 94 13 15 	call	0x2a26	; 0x2a26 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    2ac6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac8:	9c 81       	ldd	r25, Y+4	; 0x04
    2aca:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <LCD_displayString>
}
    2ace:	0f 90       	pop	r0
    2ad0:	0f 90       	pop	r0
    2ad2:	0f 90       	pop	r0
    2ad4:	0f 90       	pop	r0
    2ad6:	cf 91       	pop	r28
    2ad8:	df 91       	pop	r29
    2ada:	08 95       	ret

00002adc <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    2adc:	df 93       	push	r29
    2ade:	cf 93       	push	r28
    2ae0:	cd b7       	in	r28, 0x3d	; 61
    2ae2:	de b7       	in	r29, 0x3e	; 62
    2ae4:	62 97       	sbiw	r28, 0x12	; 18
    2ae6:	0f b6       	in	r0, 0x3f	; 63
    2ae8:	f8 94       	cli
    2aea:	de bf       	out	0x3e, r29	; 62
    2aec:	0f be       	out	0x3f, r0	; 63
    2aee:	cd bf       	out	0x3d, r28	; 61
    2af0:	9a 8b       	std	Y+18, r25	; 0x12
    2af2:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    2af4:	89 89       	ldd	r24, Y+17	; 0x11
    2af6:	9a 89       	ldd	r25, Y+18	; 0x12
    2af8:	9e 01       	movw	r18, r28
    2afa:	2f 5f       	subi	r18, 0xFF	; 255
    2afc:	3f 4f       	sbci	r19, 0xFF	; 255
    2afe:	b9 01       	movw	r22, r18
    2b00:	4a e0       	ldi	r20, 0x0A	; 10
    2b02:	50 e0       	ldi	r21, 0x00	; 0
    2b04:	0e 94 44 17 	call	0x2e88	; 0x2e88 <itoa>
   LCD_displayString(buff);
    2b08:	ce 01       	movw	r24, r28
    2b0a:	01 96       	adiw	r24, 0x01	; 1
    2b0c:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <LCD_displayString>
}
    2b10:	62 96       	adiw	r28, 0x12	; 18
    2b12:	0f b6       	in	r0, 0x3f	; 63
    2b14:	f8 94       	cli
    2b16:	de bf       	out	0x3e, r29	; 62
    2b18:	0f be       	out	0x3f, r0	; 63
    2b1a:	cd bf       	out	0x3d, r28	; 61
    2b1c:	cf 91       	pop	r28
    2b1e:	df 91       	pop	r29
    2b20:	08 95       	ret

00002b22 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    2b22:	df 93       	push	r29
    2b24:	cf 93       	push	r28
    2b26:	cd b7       	in	r28, 0x3d	; 61
    2b28:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    2b2a:	81 e0       	ldi	r24, 0x01	; 1
    2b2c:	0e 94 c8 0c 	call	0x1990	; 0x1990 <LCD_sendCommand>
    2b30:	cf 91       	pop	r28
    2b32:	df 91       	pop	r29
    2b34:	08 95       	ret

00002b36 <main>:
#define M1_READY 0x10
#include "i2c.h"
#include "external_eeprom.h"
#include "app.h"

int main(void) {
    2b36:	df 93       	push	r29
    2b38:	cf 93       	push	r28
    2b3a:	00 d0       	rcall	.+0      	; 0x2b3c <main+0x6>
    2b3c:	00 d0       	rcall	.+0      	; 0x2b3e <main+0x8>
    2b3e:	cd b7       	in	r28, 0x3d	; 61
    2b40:	de b7       	in	r29, 0x3e	; 62
	 * Initialization
	 */

	uint8 command;
	uint8 LastCommand;
	EEPROM_Init();
    2b42:	0e 94 80 0b 	call	0x1700	; 0x1700 <EEPROM_Init>
	APP_alarmInit();
    2b46:	0e 94 3e 07 	call	0xe7c	; 0xe7c <APP_alarmInit>
	LCD_init();
    2b4a:	0e 94 a7 0c 	call	0x194e	; 0x194e <LCD_init>
	APP_pwmTimer0Init(250);
    2b4e:	8a ef       	ldi	r24, 0xFA	; 250
    2b50:	0e 94 27 06 	call	0xc4e	; 0xc4e <APP_pwmTimer0Init>
	UART_init(); // initialize UART
    2b54:	0e 94 56 16 	call	0x2cac	; 0x2cac <UART_init>
	LastCommand=0xFF;
    2b58:	8f ef       	ldi	r24, 0xFF	; 255
    2b5a:	89 83       	std	Y+1, r24	; 0x01

	/**
	 * Sync with MCU1
	 */
	while (UART_recieveByte() != M1_READY) {
    2b5c:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <UART_recieveByte>
    2b60:	80 31       	cpi	r24, 0x10	; 16
    2b62:	e1 f7       	brne	.-8      	; 0x2b5c <main+0x26>
	} // wait until MC2 is ready
	LCD_clearScreen();
    2b64:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_clearScreen>
	LCD_displayString("Welecome");
    2b68:	86 ed       	ldi	r24, 0xD6	; 214
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <LCD_displayString>
	UART_sendString("Micro2 ready#"); // send the required string to MC2
    2b70:	8f ed       	ldi	r24, 0xDF	; 223
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <UART_sendString>



	for (;;) {

		command = UART_recieveByte();
    2b78:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <UART_recieveByte>
    2b7c:	8a 83       	std	Y+2, r24	; 0x02
		if (command != LastCommand) {
    2b7e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b80:	89 81       	ldd	r24, Y+1	; 0x01
    2b82:	98 17       	cp	r25, r24
    2b84:	09 f4       	brne	.+2      	; 0x2b88 <main+0x52>
    2b86:	8b c0       	rjmp	.+278    	; 0x2c9e <main+0x168>
			LCD_clearScreen();
    2b88:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_clearScreen>
			LCD_displayString("command match");
    2b8c:	8d ee       	ldi	r24, 0xED	; 237
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <LCD_displayString>
			switch (command) {
    2b94:	8a 81       	ldd	r24, Y+2	; 0x02
    2b96:	28 2f       	mov	r18, r24
    2b98:	30 e0       	ldi	r19, 0x00	; 0
    2b9a:	3c 83       	std	Y+4, r19	; 0x04
    2b9c:	2b 83       	std	Y+3, r18	; 0x03
    2b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ba2:	83 30       	cpi	r24, 0x03	; 3
    2ba4:	91 05       	cpc	r25, r1
    2ba6:	09 f4       	brne	.+2      	; 0x2baa <main+0x74>
    2ba8:	47 c0       	rjmp	.+142    	; 0x2c38 <main+0x102>
    2baa:	2b 81       	ldd	r18, Y+3	; 0x03
    2bac:	3c 81       	ldd	r19, Y+4	; 0x04
    2bae:	24 30       	cpi	r18, 0x04	; 4
    2bb0:	31 05       	cpc	r19, r1
    2bb2:	7c f4       	brge	.+30     	; 0x2bd2 <main+0x9c>
    2bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb6:	9c 81       	ldd	r25, Y+4	; 0x04
    2bb8:	81 30       	cpi	r24, 0x01	; 1
    2bba:	91 05       	cpc	r25, r1
    2bbc:	39 f1       	breq	.+78     	; 0x2c0c <main+0xd6>
    2bbe:	2b 81       	ldd	r18, Y+3	; 0x03
    2bc0:	3c 81       	ldd	r19, Y+4	; 0x04
    2bc2:	22 30       	cpi	r18, 0x02	; 2
    2bc4:	31 05       	cpc	r19, r1
    2bc6:	6c f5       	brge	.+90     	; 0x2c22 <main+0xec>
    2bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bca:	9c 81       	ldd	r25, Y+4	; 0x04
    2bcc:	00 97       	sbiw	r24, 0x00	; 0
    2bce:	99 f0       	breq	.+38     	; 0x2bf6 <main+0xc0>
    2bd0:	5f c0       	rjmp	.+190    	; 0x2c90 <main+0x15a>
    2bd2:	2b 81       	ldd	r18, Y+3	; 0x03
    2bd4:	3c 81       	ldd	r19, Y+4	; 0x04
    2bd6:	25 30       	cpi	r18, 0x05	; 5
    2bd8:	31 05       	cpc	r19, r1
    2bda:	09 f4       	brne	.+2      	; 0x2bde <main+0xa8>
    2bdc:	43 c0       	rjmp	.+134    	; 0x2c64 <main+0x12e>
    2bde:	8b 81       	ldd	r24, Y+3	; 0x03
    2be0:	9c 81       	ldd	r25, Y+4	; 0x04
    2be2:	85 30       	cpi	r24, 0x05	; 5
    2be4:	91 05       	cpc	r25, r1
    2be6:	9c f1       	brlt	.+102    	; 0x2c4e <main+0x118>
    2be8:	2b 81       	ldd	r18, Y+3	; 0x03
    2bea:	3c 81       	ldd	r19, Y+4	; 0x04
    2bec:	26 30       	cpi	r18, 0x06	; 6
    2bee:	31 05       	cpc	r19, r1
    2bf0:	09 f4       	brne	.+2      	; 0x2bf4 <main+0xbe>
    2bf2:	43 c0       	rjmp	.+134    	; 0x2c7a <main+0x144>
    2bf4:	4d c0       	rjmp	.+154    	; 0x2c90 <main+0x15a>

			case PASSWORDISSETQUARYCOMMMAND:
				LCD_clearScreen();
    2bf6:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_clearScreen>
				LCD_displayString("D_ISSETQUARYCOMMMAND");
    2bfa:	8b ef       	ldi	r24, 0xFB	; 251
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <LCD_displayString>

				APP_passwordIsSetQuary();
    2c02:	0e 94 9e 09 	call	0x133c	; 0x133c <APP_passwordIsSetQuary>

				LastCommand =command;
    2c06:	8a 81       	ldd	r24, Y+2	; 0x02
    2c08:	89 83       	std	Y+1, r24	; 0x01
    2c0a:	b6 cf       	rjmp	.-148    	; 0x2b78 <main+0x42>
				break;

			case PASSWORDSTOREQUARYCOMMMAND:
				LCD_clearScreen();
    2c0c:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_clearScreen>
				LCD_displayString("D_STOREQUARYCOMMMAND");
    2c10:	80 e1       	ldi	r24, 0x10	; 16
    2c12:	91 e0       	ldi	r25, 0x01	; 1
    2c14:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <LCD_displayString>
				APP_storePassword();
    2c18:	0e 94 85 06 	call	0xd0a	; 0xd0a <APP_storePassword>
				LastCommand =command;
    2c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c1e:	89 83       	std	Y+1, r24	; 0x01
    2c20:	ab cf       	rjmp	.-170    	; 0x2b78 <main+0x42>
				break;
			case PASSWORDSETFLAGQUARYCOMMMAND:
				LCD_clearScreen();
    2c22:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_clearScreen>
				LCD_displayString("D_SETFLAGQUARYCOMMMAND");
    2c26:	85 e2       	ldi	r24, 0x25	; 37
    2c28:	91 e0       	ldi	r25, 0x01	; 1
    2c2a:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <LCD_displayString>
				PasswordSetFlag();
    2c2e:	0e 94 4c 07 	call	0xe98	; 0xe98 <PasswordSetFlag>
				LastCommand =command;
    2c32:	8a 81       	ldd	r24, Y+2	; 0x02
    2c34:	89 83       	std	Y+1, r24	; 0x01
    2c36:	a0 cf       	rjmp	.-192    	; 0x2b78 <main+0x42>
				break;
			case GETCURRENTPASSQUARYCOMMMAND:
				LCD_clearScreen();
    2c38:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_clearScreen>
				LCD_displayString("GETCURRENTPASSQUARYCOMMMAND");
    2c3c:	8c e3       	ldi	r24, 0x3C	; 60
    2c3e:	91 e0       	ldi	r25, 0x01	; 1
    2c40:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <LCD_displayString>
				APP_getCurrentPassword();
    2c44:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <APP_getCurrentPassword>
				LastCommand =command;
    2c48:	8a 81       	ldd	r24, Y+2	; 0x02
    2c4a:	89 83       	std	Y+1, r24	; 0x01
    2c4c:	95 cf       	rjmp	.-214    	; 0x2b78 <main+0x42>
				break;
			case ALARMTURNONCOMAND:
				LCD_clearScreen();
    2c4e:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_clearScreen>
				LCD_displayString("ALARMTURNONCOMAND");
    2c52:	88 e5       	ldi	r24, 0x58	; 88
    2c54:	91 e0       	ldi	r25, 0x01	; 1
    2c56:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <LCD_displayString>
				APP_alarmTurnOn();
    2c5a:	0e 94 58 07 	call	0xeb0	; 0xeb0 <APP_alarmTurnOn>
				LastCommand =command;
    2c5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c60:	89 83       	std	Y+1, r24	; 0x01
    2c62:	8a cf       	rjmp	.-236    	; 0x2b78 <main+0x42>
				break;
			case OPENDOORCOMAND:
				LCD_clearScreen();
    2c64:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_clearScreen>
				LCD_displayString("OPENDOORCOMAND");
    2c68:	8a e6       	ldi	r24, 0x6A	; 106
    2c6a:	91 e0       	ldi	r25, 0x01	; 1
    2c6c:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <LCD_displayString>
				APP_openTheDoor();
    2c70:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <APP_openTheDoor>
				LastCommand =command;
    2c74:	8a 81       	ldd	r24, Y+2	; 0x02
    2c76:	89 83       	std	Y+1, r24	; 0x01
    2c78:	7f cf       	rjmp	.-258    	; 0x2b78 <main+0x42>
				break;
			case CLOSEDOORCOMAND:
				LCD_clearScreen();
    2c7a:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_clearScreen>
				LCD_displayString("CLOSEDOORCOMAND");
    2c7e:	89 e7       	ldi	r24, 0x79	; 121
    2c80:	91 e0       	ldi	r25, 0x01	; 1
    2c82:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <LCD_displayString>
				APP_closeTheDoor();
    2c86:	0e 94 04 09 	call	0x1208	; 0x1208 <APP_closeTheDoor>
				LastCommand =command;
    2c8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c8c:	89 83       	std	Y+1, r24	; 0x01
    2c8e:	74 cf       	rjmp	.-280    	; 0x2b78 <main+0x42>
				break;
			default:
				LCD_clearScreen();
    2c90:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_clearScreen>
							LCD_displayString("in defult");
    2c94:	89 e8       	ldi	r24, 0x89	; 137
    2c96:	91 e0       	ldi	r25, 0x01	; 1
    2c98:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <LCD_displayString>
    2c9c:	6d cf       	rjmp	.-294    	; 0x2b78 <main+0x42>
				break;
			}
		}
		else{	LCD_clearScreen();
    2c9e:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_clearScreen>
		LCD_displayString("command domatch");}
    2ca2:	83 e9       	ldi	r24, 0x93	; 147
    2ca4:	91 e0       	ldi	r25, 0x01	; 1
    2ca6:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <LCD_displayString>
    2caa:	66 cf       	rjmp	.-308    	; 0x2b78 <main+0x42>

00002cac <UART_init>:
 */

#include "uart.h"
 
void UART_init(void)
{
    2cac:	df 93       	push	r29
    2cae:	cf 93       	push	r28
    2cb0:	cd b7       	in	r28, 0x3d	; 61
    2cb2:	de b7       	in	r29, 0x3e	; 62
	UCSRA = (1<<U2X); /* U2X = 1 for double transmission speed */
    2cb4:	eb e2       	ldi	r30, 0x2B	; 43
    2cb6:	f0 e0       	ldi	r31, 0x00	; 0
    2cb8:	82 e0       	ldi	r24, 0x02	; 2
    2cba:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2cbc:	ea e2       	ldi	r30, 0x2A	; 42
    2cbe:	f0 e0       	ldi	r31, 0x00	; 0
    2cc0:	88 e1       	ldi	r24, 0x18	; 24
    2cc2:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    2cc4:	e0 e4       	ldi	r30, 0x40	; 64
    2cc6:	f0 e0       	ldi	r31, 0x00	; 0
    2cc8:	86 e8       	ldi	r24, 0x86	; 134
    2cca:	80 83       	st	Z, r24
	
	/* baud rate=9600 & Fosc=1MHz -->  UBBR=( Fosc / (8 * baud rate) ) - 1 = 12 */  
	UBRRH = 0;
    2ccc:	e0 e4       	ldi	r30, 0x40	; 64
    2cce:	f0 e0       	ldi	r31, 0x00	; 0
    2cd0:	10 82       	st	Z, r1
	UBRRL = 103;
    2cd2:	e9 e2       	ldi	r30, 0x29	; 41
    2cd4:	f0 e0       	ldi	r31, 0x00	; 0
    2cd6:	87 e6       	ldi	r24, 0x67	; 103
    2cd8:	80 83       	st	Z, r24
}
    2cda:	cf 91       	pop	r28
    2cdc:	df 91       	pop	r29
    2cde:	08 95       	ret

00002ce0 <UART_sendByte>:
	
void UART_sendByte(const uint8 data)
{
    2ce0:	df 93       	push	r29
    2ce2:	cf 93       	push	r28
    2ce4:	0f 92       	push	r0
    2ce6:	cd b7       	in	r28, 0x3d	; 61
    2ce8:	de b7       	in	r29, 0x3e	; 62
    2cea:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2cec:	eb e2       	ldi	r30, 0x2B	; 43
    2cee:	f0 e0       	ldi	r31, 0x00	; 0
    2cf0:	80 81       	ld	r24, Z
    2cf2:	88 2f       	mov	r24, r24
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	80 72       	andi	r24, 0x20	; 32
    2cf8:	90 70       	andi	r25, 0x00	; 0
    2cfa:	00 97       	sbiw	r24, 0x00	; 0
    2cfc:	b9 f3       	breq	.-18     	; 0x2cec <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
    2cfe:	ec e2       	ldi	r30, 0x2C	; 44
    2d00:	f0 e0       	ldi	r31, 0x00	; 0
    2d02:	89 81       	ldd	r24, Y+1	; 0x01
    2d04:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
    2d06:	0f 90       	pop	r0
    2d08:	cf 91       	pop	r28
    2d0a:	df 91       	pop	r29
    2d0c:	08 95       	ret

00002d0e <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    2d0e:	df 93       	push	r29
    2d10:	cf 93       	push	r28
    2d12:	cd b7       	in	r28, 0x3d	; 61
    2d14:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2d16:	eb e2       	ldi	r30, 0x2B	; 43
    2d18:	f0 e0       	ldi	r31, 0x00	; 0
    2d1a:	80 81       	ld	r24, Z
    2d1c:	88 23       	and	r24, r24
    2d1e:	dc f7       	brge	.-10     	; 0x2d16 <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    2d20:	ec e2       	ldi	r30, 0x2C	; 44
    2d22:	f0 e0       	ldi	r31, 0x00	; 0
    2d24:	80 81       	ld	r24, Z
}
    2d26:	cf 91       	pop	r28
    2d28:	df 91       	pop	r29
    2d2a:	08 95       	ret

00002d2c <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    2d2c:	df 93       	push	r29
    2d2e:	cf 93       	push	r28
    2d30:	00 d0       	rcall	.+0      	; 0x2d32 <UART_sendString+0x6>
    2d32:	0f 92       	push	r0
    2d34:	cd b7       	in	r28, 0x3d	; 61
    2d36:	de b7       	in	r29, 0x3e	; 62
    2d38:	9b 83       	std	Y+3, r25	; 0x03
    2d3a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2d3c:	19 82       	std	Y+1, r1	; 0x01
    2d3e:	0e c0       	rjmp	.+28     	; 0x2d5c <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2d40:	89 81       	ldd	r24, Y+1	; 0x01
    2d42:	28 2f       	mov	r18, r24
    2d44:	30 e0       	ldi	r19, 0x00	; 0
    2d46:	8a 81       	ldd	r24, Y+2	; 0x02
    2d48:	9b 81       	ldd	r25, Y+3	; 0x03
    2d4a:	fc 01       	movw	r30, r24
    2d4c:	e2 0f       	add	r30, r18
    2d4e:	f3 1f       	adc	r31, r19
    2d50:	80 81       	ld	r24, Z
    2d52:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <UART_sendByte>
		i++;
    2d56:	89 81       	ldd	r24, Y+1	; 0x01
    2d58:	8f 5f       	subi	r24, 0xFF	; 255
    2d5a:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2d5c:	89 81       	ldd	r24, Y+1	; 0x01
    2d5e:	28 2f       	mov	r18, r24
    2d60:	30 e0       	ldi	r19, 0x00	; 0
    2d62:	8a 81       	ldd	r24, Y+2	; 0x02
    2d64:	9b 81       	ldd	r25, Y+3	; 0x03
    2d66:	fc 01       	movw	r30, r24
    2d68:	e2 0f       	add	r30, r18
    2d6a:	f3 1f       	adc	r31, r19
    2d6c:	80 81       	ld	r24, Z
    2d6e:	88 23       	and	r24, r24
    2d70:	39 f7       	brne	.-50     	; 0x2d40 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
	UART_sendByte(Str[i]);
    2d72:	89 81       	ldd	r24, Y+1	; 0x01
    2d74:	28 2f       	mov	r18, r24
    2d76:	30 e0       	ldi	r19, 0x00	; 0
    2d78:	8a 81       	ldd	r24, Y+2	; 0x02
    2d7a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d7c:	fc 01       	movw	r30, r24
    2d7e:	e2 0f       	add	r30, r18
    2d80:	f3 1f       	adc	r31, r19
    2d82:	80 81       	ld	r24, Z
    2d84:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <UART_sendByte>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2d88:	0f 90       	pop	r0
    2d8a:	0f 90       	pop	r0
    2d8c:	0f 90       	pop	r0
    2d8e:	cf 91       	pop	r28
    2d90:	df 91       	pop	r29
    2d92:	08 95       	ret

00002d94 <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    2d94:	0f 93       	push	r16
    2d96:	1f 93       	push	r17
    2d98:	df 93       	push	r29
    2d9a:	cf 93       	push	r28
    2d9c:	00 d0       	rcall	.+0      	; 0x2d9e <UART_receiveString+0xa>
    2d9e:	0f 92       	push	r0
    2da0:	cd b7       	in	r28, 0x3d	; 61
    2da2:	de b7       	in	r29, 0x3e	; 62
    2da4:	9b 83       	std	Y+3, r25	; 0x03
    2da6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2da8:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    2daa:	89 81       	ldd	r24, Y+1	; 0x01
    2dac:	28 2f       	mov	r18, r24
    2dae:	30 e0       	ldi	r19, 0x00	; 0
    2db0:	8a 81       	ldd	r24, Y+2	; 0x02
    2db2:	9b 81       	ldd	r25, Y+3	; 0x03
    2db4:	8c 01       	movw	r16, r24
    2db6:	02 0f       	add	r16, r18
    2db8:	13 1f       	adc	r17, r19
    2dba:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <UART_recieveByte>
    2dbe:	f8 01       	movw	r30, r16
    2dc0:	80 83       	st	Z, r24
    2dc2:	0f c0       	rjmp	.+30     	; 0x2de2 <UART_receiveString+0x4e>
	while(Str[i] != '\0')
	{
		i++;
    2dc4:	89 81       	ldd	r24, Y+1	; 0x01
    2dc6:	8f 5f       	subi	r24, 0xFF	; 255
    2dc8:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2dca:	89 81       	ldd	r24, Y+1	; 0x01
    2dcc:	28 2f       	mov	r18, r24
    2dce:	30 e0       	ldi	r19, 0x00	; 0
    2dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd2:	9b 81       	ldd	r25, Y+3	; 0x03
    2dd4:	8c 01       	movw	r16, r24
    2dd6:	02 0f       	add	r16, r18
    2dd8:	13 1f       	adc	r17, r19
    2dda:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <UART_recieveByte>
    2dde:	f8 01       	movw	r30, r16
    2de0:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '\0')
    2de2:	89 81       	ldd	r24, Y+1	; 0x01
    2de4:	28 2f       	mov	r18, r24
    2de6:	30 e0       	ldi	r19, 0x00	; 0
    2de8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dea:	9b 81       	ldd	r25, Y+3	; 0x03
    2dec:	fc 01       	movw	r30, r24
    2dee:	e2 0f       	add	r30, r18
    2df0:	f3 1f       	adc	r31, r19
    2df2:	80 81       	ld	r24, Z
    2df4:	88 23       	and	r24, r24
    2df6:	31 f7       	brne	.-52     	; 0x2dc4 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    2df8:	89 81       	ldd	r24, Y+1	; 0x01
    2dfa:	28 2f       	mov	r18, r24
    2dfc:	30 e0       	ldi	r19, 0x00	; 0
    2dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    2e00:	9b 81       	ldd	r25, Y+3	; 0x03
    2e02:	fc 01       	movw	r30, r24
    2e04:	e2 0f       	add	r30, r18
    2e06:	f3 1f       	adc	r31, r19
    2e08:	10 82       	st	Z, r1
}
    2e0a:	0f 90       	pop	r0
    2e0c:	0f 90       	pop	r0
    2e0e:	0f 90       	pop	r0
    2e10:	cf 91       	pop	r28
    2e12:	df 91       	pop	r29
    2e14:	1f 91       	pop	r17
    2e16:	0f 91       	pop	r16
    2e18:	08 95       	ret

00002e1a <__prologue_saves__>:
    2e1a:	2f 92       	push	r2
    2e1c:	3f 92       	push	r3
    2e1e:	4f 92       	push	r4
    2e20:	5f 92       	push	r5
    2e22:	6f 92       	push	r6
    2e24:	7f 92       	push	r7
    2e26:	8f 92       	push	r8
    2e28:	9f 92       	push	r9
    2e2a:	af 92       	push	r10
    2e2c:	bf 92       	push	r11
    2e2e:	cf 92       	push	r12
    2e30:	df 92       	push	r13
    2e32:	ef 92       	push	r14
    2e34:	ff 92       	push	r15
    2e36:	0f 93       	push	r16
    2e38:	1f 93       	push	r17
    2e3a:	cf 93       	push	r28
    2e3c:	df 93       	push	r29
    2e3e:	cd b7       	in	r28, 0x3d	; 61
    2e40:	de b7       	in	r29, 0x3e	; 62
    2e42:	ca 1b       	sub	r28, r26
    2e44:	db 0b       	sbc	r29, r27
    2e46:	0f b6       	in	r0, 0x3f	; 63
    2e48:	f8 94       	cli
    2e4a:	de bf       	out	0x3e, r29	; 62
    2e4c:	0f be       	out	0x3f, r0	; 63
    2e4e:	cd bf       	out	0x3d, r28	; 61
    2e50:	09 94       	ijmp

00002e52 <__epilogue_restores__>:
    2e52:	2a 88       	ldd	r2, Y+18	; 0x12
    2e54:	39 88       	ldd	r3, Y+17	; 0x11
    2e56:	48 88       	ldd	r4, Y+16	; 0x10
    2e58:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e5a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e5c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e5e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e60:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e62:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e64:	b9 84       	ldd	r11, Y+9	; 0x09
    2e66:	c8 84       	ldd	r12, Y+8	; 0x08
    2e68:	df 80       	ldd	r13, Y+7	; 0x07
    2e6a:	ee 80       	ldd	r14, Y+6	; 0x06
    2e6c:	fd 80       	ldd	r15, Y+5	; 0x05
    2e6e:	0c 81       	ldd	r16, Y+4	; 0x04
    2e70:	1b 81       	ldd	r17, Y+3	; 0x03
    2e72:	aa 81       	ldd	r26, Y+2	; 0x02
    2e74:	b9 81       	ldd	r27, Y+1	; 0x01
    2e76:	ce 0f       	add	r28, r30
    2e78:	d1 1d       	adc	r29, r1
    2e7a:	0f b6       	in	r0, 0x3f	; 63
    2e7c:	f8 94       	cli
    2e7e:	de bf       	out	0x3e, r29	; 62
    2e80:	0f be       	out	0x3f, r0	; 63
    2e82:	cd bf       	out	0x3d, r28	; 61
    2e84:	ed 01       	movw	r28, r26
    2e86:	08 95       	ret

00002e88 <itoa>:
    2e88:	fb 01       	movw	r30, r22
    2e8a:	9f 01       	movw	r18, r30
    2e8c:	e8 94       	clt
    2e8e:	42 30       	cpi	r20, 0x02	; 2
    2e90:	c4 f0       	brlt	.+48     	; 0x2ec2 <itoa+0x3a>
    2e92:	45 32       	cpi	r20, 0x25	; 37
    2e94:	b4 f4       	brge	.+44     	; 0x2ec2 <itoa+0x3a>
    2e96:	4a 30       	cpi	r20, 0x0A	; 10
    2e98:	29 f4       	brne	.+10     	; 0x2ea4 <itoa+0x1c>
    2e9a:	97 fb       	bst	r25, 7
    2e9c:	1e f4       	brtc	.+6      	; 0x2ea4 <itoa+0x1c>
    2e9e:	90 95       	com	r25
    2ea0:	81 95       	neg	r24
    2ea2:	9f 4f       	sbci	r25, 0xFF	; 255
    2ea4:	64 2f       	mov	r22, r20
    2ea6:	77 27       	eor	r23, r23
    2ea8:	0e 94 75 17 	call	0x2eea	; 0x2eea <__udivmodhi4>
    2eac:	80 5d       	subi	r24, 0xD0	; 208
    2eae:	8a 33       	cpi	r24, 0x3A	; 58
    2eb0:	0c f0       	brlt	.+2      	; 0x2eb4 <itoa+0x2c>
    2eb2:	89 5d       	subi	r24, 0xD9	; 217
    2eb4:	81 93       	st	Z+, r24
    2eb6:	cb 01       	movw	r24, r22
    2eb8:	00 97       	sbiw	r24, 0x00	; 0
    2eba:	a1 f7       	brne	.-24     	; 0x2ea4 <itoa+0x1c>
    2ebc:	16 f4       	brtc	.+4      	; 0x2ec2 <itoa+0x3a>
    2ebe:	5d e2       	ldi	r21, 0x2D	; 45
    2ec0:	51 93       	st	Z+, r21
    2ec2:	10 82       	st	Z, r1
    2ec4:	c9 01       	movw	r24, r18
    2ec6:	0c 94 65 17 	jmp	0x2eca	; 0x2eca <strrev>

00002eca <strrev>:
    2eca:	dc 01       	movw	r26, r24
    2ecc:	fc 01       	movw	r30, r24
    2ece:	67 2f       	mov	r22, r23
    2ed0:	71 91       	ld	r23, Z+
    2ed2:	77 23       	and	r23, r23
    2ed4:	e1 f7       	brne	.-8      	; 0x2ece <strrev+0x4>
    2ed6:	32 97       	sbiw	r30, 0x02	; 2
    2ed8:	04 c0       	rjmp	.+8      	; 0x2ee2 <strrev+0x18>
    2eda:	7c 91       	ld	r23, X
    2edc:	6d 93       	st	X+, r22
    2ede:	70 83       	st	Z, r23
    2ee0:	62 91       	ld	r22, -Z
    2ee2:	ae 17       	cp	r26, r30
    2ee4:	bf 07       	cpc	r27, r31
    2ee6:	c8 f3       	brcs	.-14     	; 0x2eda <strrev+0x10>
    2ee8:	08 95       	ret

00002eea <__udivmodhi4>:
    2eea:	aa 1b       	sub	r26, r26
    2eec:	bb 1b       	sub	r27, r27
    2eee:	51 e1       	ldi	r21, 0x11	; 17
    2ef0:	07 c0       	rjmp	.+14     	; 0x2f00 <__udivmodhi4_ep>

00002ef2 <__udivmodhi4_loop>:
    2ef2:	aa 1f       	adc	r26, r26
    2ef4:	bb 1f       	adc	r27, r27
    2ef6:	a6 17       	cp	r26, r22
    2ef8:	b7 07       	cpc	r27, r23
    2efa:	10 f0       	brcs	.+4      	; 0x2f00 <__udivmodhi4_ep>
    2efc:	a6 1b       	sub	r26, r22
    2efe:	b7 0b       	sbc	r27, r23

00002f00 <__udivmodhi4_ep>:
    2f00:	88 1f       	adc	r24, r24
    2f02:	99 1f       	adc	r25, r25
    2f04:	5a 95       	dec	r21
    2f06:	a9 f7       	brne	.-22     	; 0x2ef2 <__udivmodhi4_loop>
    2f08:	80 95       	com	r24
    2f0a:	90 95       	com	r25
    2f0c:	bc 01       	movw	r22, r24
    2f0e:	cd 01       	movw	r24, r26
    2f10:	08 95       	ret

00002f12 <_exit>:
    2f12:	f8 94       	cli

00002f14 <__stop_program>:
    2f14:	ff cf       	rjmp	.-2      	; 0x2f14 <__stop_program>
